{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":74608,"databundleVersionId":12966160,"sourceType":"competition"},{"sourceId":12189904,"sourceType":"datasetVersion","datasetId":7678100}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:50.968120Z","iopub.execute_input":"2025-07-31T00:48:50.968701Z","iopub.status.idle":"2025-07-31T00:48:51.318694Z","shell.execute_reply.started":"2025-07-31T00:48:50.968672Z","shell.execute_reply":"2025-07-31T00:48:51.318019Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/neurips-open-polymer-prediction-2025/sample_submission.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/test.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset2.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset4.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset1.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset3.csv\n/kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip install --no-index \\\n  --find-links=/kaggle/input/rdkit-2025-3-3-cp311 \\\n  /kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:51.319553Z","iopub.execute_input":"2025-07-31T00:48:51.320392Z","iopub.status.idle":"2025-07-31T00:48:54.717014Z","shell.execute_reply.started":"2025-07-31T00:48:51.320370Z","shell.execute_reply":"2025-07-31T00:48:54.716041Z"}},"outputs":[{"name":"stdout","text":"Looking in links: /kaggle/input/rdkit-2025-3-3-cp311\nProcessing /kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from rdkit==2025.3.3) (1.26.4)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from rdkit==2025.3.3) (11.2.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit==2025.3.3) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit==2025.3.3) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->rdkit==2025.3.3) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->rdkit==2025.3.3) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->rdkit==2025.3.3) (2024.2.0)\nrdkit is already installed with the same version as the provided wheel. Use --force-reinstall to force an installation of the wheel.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Imports","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem\n\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.experimental import enable_iterative_imputer  # noqa: F401\nfrom sklearn.impute import IterativeImputer\nfrom rdkit import RDLogger\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import KFold\nRDLogger.DisableLog('rdApp.*')\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nRDLogger.DisableLog('rdApp.*')\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import StandardScaler\nfrom typing import Dict, List, Tuple\n_HAS_LGBM = _HAS_XGB = False\ntry:\n    from lightgbm import LGBMRegressor\n    _HAS_LGBM = True\nexcept Exception:\n    pass\n\ntry:\n    from xgboost import XGBRegressor\n    _HAS_XGB = True\nexcept Exception:\n    pass","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:54.718322Z","iopub.execute_input":"2025-07-31T00:48:54.718621Z","iopub.status.idle":"2025-07-31T00:48:57.234024Z","shell.execute_reply.started":"2025-07-31T00:48:54.718593Z","shell.execute_reply":"2025-07-31T00:48:57.233316Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train.csv')\ntest = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/test.csv')\nTARGETS = ['Tg','FFV','Tc','Density','Rg']\ntrain.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.235953Z","iopub.execute_input":"2025-07-31T00:48:57.236613Z","iopub.status.idle":"2025-07-31T00:48:57.272565Z","shell.execute_reply.started":"2025-07-31T00:48:57.236589Z","shell.execute_reply":"2025-07-31T00:48:57.271867Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"       id                                             SMILES  Tg       FFV  \\\n0   87817                         *CC(*)c1ccccc1C(=O)OCCCCCC NaN  0.374645   \n1  106919  *Nc1ccc([C@H](CCC)c2ccc(C3(c4ccc([C@@H](CCC)c5... NaN  0.370410   \n2  388772  *Oc1ccc(S(=O)(=O)c2ccc(Oc3ccc(C4(c5ccc(Oc6ccc(... NaN  0.378860   \n3  519416  *Nc1ccc(-c2c(-c3ccc(C)cc3)c(-c3ccc(C)cc3)c(N*)... NaN  0.387324   \n4  539187  *Oc1ccc(OC(=O)c2cc(OCCCCCCCCCOCC3CCCN3c3ccc([N... NaN  0.355470   \n\n         Tc  Density  Rg  \n0  0.205667      NaN NaN  \n1       NaN      NaN NaN  \n2       NaN      NaN NaN  \n3       NaN      NaN NaN  \n4       NaN      NaN NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>SMILES</th>\n      <th>Tg</th>\n      <th>FFV</th>\n      <th>Tc</th>\n      <th>Density</th>\n      <th>Rg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>87817</td>\n      <td>*CC(*)c1ccccc1C(=O)OCCCCCC</td>\n      <td>NaN</td>\n      <td>0.374645</td>\n      <td>0.205667</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>106919</td>\n      <td>*Nc1ccc([C@H](CCC)c2ccc(C3(c4ccc([C@@H](CCC)c5...</td>\n      <td>NaN</td>\n      <td>0.370410</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>388772</td>\n      <td>*Oc1ccc(S(=O)(=O)c2ccc(Oc3ccc(C4(c5ccc(Oc6ccc(...</td>\n      <td>NaN</td>\n      <td>0.378860</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>519416</td>\n      <td>*Nc1ccc(-c2c(-c3ccc(C)cc3)c(-c3ccc(C)cc3)c(N*)...</td>\n      <td>NaN</td>\n      <td>0.387324</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>539187</td>\n      <td>*Oc1ccc(OC(=O)c2cc(OCCCCCCCCCOCC3CCCN3c3ccc([N...</td>\n      <td>NaN</td>\n      <td>0.355470</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.273313Z","iopub.execute_input":"2025-07-31T00:48:57.273545Z","iopub.status.idle":"2025-07-31T00:48:57.280597Z","shell.execute_reply.started":"2025-07-31T00:48:57.273518Z","shell.execute_reply":"2025-07-31T00:48:57.280049Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"           id                                             SMILES\n0  1109053969  *Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...\n1  1422188626  *Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...\n2  2032016830  *c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>SMILES</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1109053969</td>\n      <td>*Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1422188626</td>\n      <td>*Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2032016830</td>\n      <td>*c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"nan_counts = train.isna().sum()\nprint(nan_counts)\nprint(len(train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.281625Z","iopub.execute_input":"2025-07-31T00:48:57.281917Z","iopub.status.idle":"2025-07-31T00:48:57.297063Z","shell.execute_reply.started":"2025-07-31T00:48:57.281891Z","shell.execute_reply":"2025-07-31T00:48:57.296243Z"}},"outputs":[{"name":"stdout","text":"id            0\nSMILES        0\nTg         7462\nFFV         943\nTc         7236\nDensity    7360\nRg         7359\ndtype: int64\n7973\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# Utility functions","metadata":{}},{"cell_type":"code","source":"def build_features(df, radius=2, nBits=512):\n    \"\"\"\n    Compute ALL RDKit descriptors + Morgan fingerprints for each SMILES.\n    Returns: pd.DataFrame (index == df.index), list(desc_names), list(fp_names)\n    \"\"\"\n    # All RDKit descriptors\n    desc_list = Descriptors._descList\n    desc_names = [d[0] for d in desc_list]\n    fp_names   = [f'FP_{i}' for i in range(nBits)]\n\n    rows = []\n    valid_idx = []\n    for idx, smi in zip(df.index, df['SMILES']):\n        try:\n            mol = Chem.MolFromSmiles(smi)\n            if mol is None:\n                # Skip invalid SMILES\n                print(f\"[Warning] Skipping invalid SMILES at index {idx}: {smi}\")\n                continue\n    \n            # Compute descriptors safely\n            dvals = []\n            for _, func in desc_list:\n                try:\n                    dvals.append(func(mol))\n                except Exception as e:\n                    dvals.append(np.nan)\n                    print(f\"[Warning] Descriptor failed for SMILES={smi}: {e}\")\n    \n            # Compute fingerprint safely\n            try:\n                fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=nBits)\n                # Convert RDKit ExplicitBitVect to numpy array\n                fp_arr = np.array(fp)\n                if fp_arr.ndim == 0:  # fallback if above fails\n                    fp_arr = np.frombuffer(fp.ToBitString().encode('utf-8'), 'S1').astype(int)\n            except Exception as e:\n                print(f\"[Warning] Fingerprint failed for SMILES={smi}: {e}\")\n                fp_arr = np.zeros(nBits, dtype=int)\n    \n            rows.append(dvals + fp_arr.tolist())\n            valid_idx.append(idx)\n    \n        except Exception as e:\n            print(f\"[Error] Failed to process SMILES at index {idx}: {smi}, Error: {e}\")\n            continue\n\n    try:\n        feat_df = pd.DataFrame(rows, index=valid_idx, columns=desc_names + fp_names)\n    except Exception as e:\n        print(f\"[Error] Could not create feature DataFrame: {e}\")\n        feat_df = pd.DataFrame(columns=desc_names + fp_names)\n    \n    return feat_df, desc_names, fp_names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.298003Z","iopub.execute_input":"2025-07-31T00:48:57.298317Z","iopub.status.idle":"2025-07-31T00:48:57.311617Z","shell.execute_reply.started":"2025-07-31T00:48:57.298288Z","shell.execute_reply":"2025-07-31T00:48:57.310843Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def fit_preprocessor(X_train: pd.DataFrame,\n                     variance_threshold: float = 0.0,\n                     corr_threshold: float = 0.90,\n                     scale: bool = True):\n    \"\"\"\n    Fit-time preprocessing (only on training data):\n    - Drop columns with NaNs\n    - Remove low-variance columns\n    - Remove highly correlated columns\n    - Fit scaler\n    Returns:\n        X_clean (np.ndarray),\n        state (dict with transformation state),\n        info (summary of dropped/kept columns)\n    \"\"\"\n    from sklearn.feature_selection import VarianceThreshold\n    from sklearn.preprocessing import StandardScaler\n\n    info = {}\n    try:\n        # Ensure string column names to avoid dtype/name mismatches later\n        X = X_train.copy()\n        X.columns = X.columns.astype(str)\n\n        # Step 1: Drop any column that has at least one NaN in TRAIN\n        X = X.replace([np.inf, -np.inf], np.nan)\n        nan_cols = X.columns[X.isna().any()].tolist()\n        info['dropped_nan_cols'] = nan_cols\n        X = X.drop(columns=nan_cols)\n\n        if X.empty:\n            raise ValueError(\"All columns dropped due to NaNs\")\n\n        # Step 2: Variance threshold (fit on TRAIN)\n        vt = VarianceThreshold(threshold=variance_threshold)\n        vt.fit(X)\n        kept_var_mask = vt.get_support()\n        vt_cols = X.columns[kept_var_mask].tolist()   # store these explicitly\n        dropped_var = [c for c in X.columns if c not in vt_cols]\n        info['dropped_lowvar_cols'] = dropped_var\n\n        # Manually select instead of calling vt.transform here (safer)\n        X = X[vt_cols]\n\n        # Step 3: Drop highly correlated features (TRAIN only)\n        corr = X.corr().abs()\n        upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))\n        to_drop_corr = [col for col in upper.columns if any(upper[col] > corr_threshold)]\n        info['dropped_corr_cols'] = to_drop_corr\n\n        X = X.drop(columns=to_drop_corr)\n        kept_cols = X.columns.tolist()\n        info['retained_cols'] = kept_cols\n\n        # Step 4: Scale (fit on TRAIN)\n        scaler = None\n        if scale:\n            scaler = StandardScaler()\n            X_scaled = scaler.fit_transform(X)\n        else:\n            X_scaled = X.values\n\n        state = {\n            'variance_threshold': variance_threshold,\n            'corr_threshold': corr_threshold,\n            'nan_cols': nan_cols,               # columns dropped due to NaNs in TRAIN\n            'vt_cols': vt_cols,                 # columns kept after variance step\n            'to_drop_corr': set(to_drop_corr),  # correlated columns to drop\n            'kept_cols': kept_cols,             # final kept columns (after corr)\n            'scaler': scaler\n        }\n\n        return X_scaled, state, info\n\n    except Exception as e:\n        print(f\"[Error in fit_preprocessor] {e}\")\n        return np.array([]), {}, {'error': str(e)}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.312421Z","iopub.execute_input":"2025-07-31T00:48:57.312784Z","iopub.status.idle":"2025-07-31T00:48:57.333438Z","shell.execute_reply.started":"2025-07-31T00:48:57.312759Z","shell.execute_reply":"2025-07-31T00:48:57.332611Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"def transform_preprocessor(X_df: pd.DataFrame, state):\n    \"\"\"\n    Apply the previously fitted preprocessor on new data (e.g., test).\n    Any missing columns are created as 0, extra columns are dropped.\n    Wrapped with try-except for safety in notebook submission.\n    \"\"\"\n    try:\n        X_df = X_df.copy()\n        X_df.columns = X_df.columns.astype(str)\n        X_df = X_df.replace([np.inf, -np.inf], np.nan)\n\n        # 1) drop the same NaN columns identified from TRAIN\n        drop_nan = [c for c in state.get('nan_cols', []) if c in X_df.columns]\n        X_df = X_df.drop(columns=drop_nan, errors='ignore')\n\n        # 2) ensure we have exactly the variance-kept columns (vt_cols), in order\n        vt_cols = list(state.get('vt_cols', []))\n        # add any missing vt_cols as zeros (safe default)\n        missing = [c for c in vt_cols if c not in X_df.columns]\n        if missing:\n            for c in missing:\n                X_df[c] = 0.0\n        # drop any extra columns not in vt_cols\n        X_df = X_df.reindex(columns=vt_cols, fill_value=0.0)\n\n        # 3) drop the correlated columns decided at TRAIN time\n        drop_corr = [c for c in state.get('to_drop_corr', []) if c in X_df.columns]\n        X_df = X_df.drop(columns=drop_corr, errors='ignore')\n\n        # 4) finally, ensure we have exactly the TRAIN-kept columns, in order\n        kept_cols = list(state.get('kept_cols', []))\n        missing_final = [c for c in kept_cols if c not in X_df.columns]\n        if missing_final:\n            for c in missing_final:\n                X_df[c] = 0.0\n        X_df = X_df.reindex(columns=kept_cols, fill_value=0.0)\n\n        # 5) scale if scaler exists\n        scaler = state.get('scaler', None)\n        if scaler is not None:\n            X_df = scaler.transform(X_df)\n\n        return X_df\n\n    except Exception as e:\n        print(f\"[ERROR] transform_preprocessor failed: {e}\")\n        # fallback to a zero array with the right number of final columns\n        n_rows = len(X_df)\n        n_cols = len(state.get('kept_cols', []))\n        return np.zeros((n_rows, n_cols))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.334250Z","iopub.execute_input":"2025-07-31T00:48:57.334845Z","iopub.status.idle":"2025-07-31T00:48:57.354709Z","shell.execute_reply.started":"2025-07-31T00:48:57.334825Z","shell.execute_reply":"2025-07-31T00:48:57.353891Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def report_nan_columns_numpy(X: np.ndarray, name=\"X_train_clean\"):\n    try:\n        if X.ndim != 2:\n            print(f\"[WARN] {name} expected 2D array, got shape {X.shape}\")\n            return np.array([], dtype=int)\n        col_mask = np.isnan(X).any(axis=0)\n        idxs = np.where(col_mask)[0]\n        if idxs.size == 0:\n            print(f\"[{name}] No NaNs detected.\")\n        else:\n            counts = np.isnan(X).sum(axis=0)[idxs]\n            print(f\"[{name}] NaN columns (count={idxs.size}):\")\n            for j, c in zip(idxs, counts):\n                print(f\"  col {j} -> {c} NaNs\")\n        return idxs\n    except Exception as e:\n        print(f\"[WARN] report_nan_columns_numpy failed for {name}: {e}\")\n        return np.array([], dtype=int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.355587Z","iopub.execute_input":"2025-07-31T00:48:57.355865Z","iopub.status.idle":"2025-07-31T00:48:57.373990Z","shell.execute_reply.started":"2025-07-31T00:48:57.355848Z","shell.execute_reply":"2025-07-31T00:48:57.373411Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"def per_target_supervised_selection(\n    X_train_clean,          # np.ndarray or pd.DataFrame (after your preprocessing pipeline)\n    y_train,                # np.ndarray of shape (n_samples, n_targets) with NaNs\n    target_names,           # list of str\n    min_labels=400,         # below this, use lighter selection\n    base_estimator=None,    # pass a model; default RF\n    threshold=\"median\",     # SelectFromModel threshold\n    top_k=None,             # if set, override threshold and keep top-K by mean importance\n    cv_splits=5,\n    random_state=42,\n    verbose=True\n):\n    \"\"\"\n    Returns:\n      selectors: dict[target_name] -> fitted selector\n      Xsel_train: dict[target_name] -> selected X (train)\n    \"\"\"\n    if base_estimator is None:\n        base_estimator = RandomForestRegressor(\n            n_estimators=300, random_state=random_state, n_jobs=-1\n        )\n\n    n, p = X_train_clean.shape\n    selectors, Xsel_train = {}, {}\n\n    for j, name in enumerate(target_names):\n        yj = y_train[:, j]\n        mask = ~np.isnan(yj)\n        n_lab = int(mask.sum())\n\n        if verbose:\n            print(f\"\\n[{name}] labeled rows = {n_lab} / {n}\")\n\n        if n_lab < 5:\n            if verbose:\n                print(f\"[{name}] Too few labels; skipping selection (keep all {p}).\")\n            # Identity transform: keep all\n            keep_idx = np.arange(p)\n            selectors[name] = keep_idx\n            Xsel_train[name] = X_train_clean\n            continue\n\n        X_known = X_train_clean[mask]\n        y_known = yj[mask]\n\n        # Option A: CV-averaged importances for stability\n        kf = KFold(n_splits=min(cv_splits, n_lab), shuffle=True, random_state=random_state)\n        importances = np.zeros(p, dtype=float)\n        folds = 0\n        for tr_idx, va_idx in kf.split(X_known):\n            try:\n                est = base_estimator.__class__(**base_estimator.get_params())\n                est.fit(X_known[tr_idx], y_known[tr_idx])\n                if hasattr(est, \"feature_importances_\"):\n                    importances += est.feature_importances_\n                    folds += 1\n            except Exception as e:\n                if verbose:\n                    print(f\"[{name}] CV fold failed: {e}\")\n\n        if folds > 0:\n            importances /= folds\n        else:\n            # fallback: single fit\n            est = base_estimator.__class__(**base_estimator.get_params())\n            est.fit(X_known, y_known)\n            importances = getattr(est, \"feature_importances_\", np.ones(p) / p)\n\n        # Decide how aggressive to be\n        if n_lab < min_labels:\n            if verbose:\n                print(f\"[{name}] Using LIGHT selection (few labels).\")\n            # keep top-K or top median by importance\n            if top_k is None:\n                thr = np.median(importances)\n                keep_idx = np.where(importances >= thr)[0]\n            else:\n                keep_idx = np.argsort(importances)[::-1][:top_k]\n        else:\n            if verbose:\n                print(f\"[{name}] Using NORMAL selection.\")\n            if top_k is None:\n                thr = np.median(importances)\n                keep_idx = np.where(importances >= thr)[0]\n            else:\n                keep_idx = np.argsort(importances)[::-1][:top_k]\n\n        if verbose:\n            print(f\"[{name}] kept features: {len(keep_idx)} / {p}\")\n\n        selectors[name] = keep_idx\n        Xsel_train[name] = X_train_clean[:, keep_idx]\n\n    return selectors, Xsel_train\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.374675Z","iopub.execute_input":"2025-07-31T00:48:57.374983Z","iopub.status.idle":"2025-07-31T00:48:57.389698Z","shell.execute_reply.started":"2025-07-31T00:48:57.374946Z","shell.execute_reply":"2025-07-31T00:48:57.388896Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"def impute_targets_adaptive(\n    X,                      # np.ndarray (shared features) OR None if using X_per_target\n    y,                      # np.ndarray shape (n_samples, n_targets) with NaNs\n    target_names,           # list[str], e.g., ['Tg','FFV','Tc','Density','Rg']\n    selectors=None,         # optional: dict[name] -> np.ndarray[int] (column indices into X)\n    X_per_target=None,      # optional: dict[name] -> np.ndarray (feature matrix per target)\n    min_missing_for_nn=30,  # use NN only if number of NaNs in that target > this\n    min_known_for_nn=50,    # and at least this many known labels to train the NN\n    epochs=100, batch_size=64, verbose=0,\n    simple_strategy=\"median\",   # 'median' or 'mean'\n    random_state=42\n):\n    \"\"\"\n    Impute missing target values per target.\n    - If missing count > min_missing_for_nn AND known count >= min_known_for_nn -> use a small MLP (Keras).\n    - Else -> use SimpleImputer on the known labels (median/mean).\n    - Supports per-target feature subsets via `selectors` or `X_per_target`.\n    \n    Returns:\n        y_imp       : np.ndarray with missing targets imputed\n        impute_info : dict[name] -> ('nn', model) or ('simple', value or imputer)\n    \"\"\"\n    y_imp = y.copy().astype(float)\n    impute_info = {}\n\n    # Helper to get the design matrix for a given target\n    def get_X_for(name):\n        if X_per_target is not None:\n            return X_per_target[name]\n        if selectors is not None and X is not None:\n            idx = selectors.get(name, None)\n            return X[:, idx] if idx is not None else X\n        # default: shared X\n        return X\n\n    # Build MLP lazily and safely\n    def build_mlp(input_dim):\n        from tensorflow.keras import models, layers, optimizers\n        m = models.Sequential([\n            layers.Dense(256, activation='relu', input_shape=(input_dim,)),\n            layers.Dense(128, activation='relu'),\n            layers.Dense(1)\n        ])\n        m.compile(optimizer=optimizers.Adam(1e-3), loss='mse')\n        return m\n\n    rng = np.random.RandomState(random_state)\n    n_targets = y.shape[1]\n\n    for j, name in enumerate(target_names):\n        y_col = y[:, j]\n        miss_mask = np.isnan(y_col)\n        n_miss = int(miss_mask.sum())\n        known_mask = ~miss_mask\n        n_known = int(known_mask.sum())\n\n        if n_miss == 0:\n            impute_info[name] = ('none', None)\n            # nothing to fill\n            continue\n\n        Xj = get_X_for(name)\n        if Xj is None:\n            # Safety: if we couldn't get features, fall back to simple imputer\n            print(f\"[Impute-{name}] No features provided; using SimpleImputer({simple_strategy}).\")\n            simp = SimpleImputer(strategy=simple_strategy)\n            y_known_2d = y_col[known_mask].reshape(-1, 1)\n            simp.fit(y_known_2d)\n            y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n            impute_info[name] = ('simple', simp)\n            continue\n\n        # Decide method\n        use_nn = (n_miss > min_missing_for_nn) and (n_known >= min_known_for_nn)\n\n        if not use_nn:\n            # Simple fill from known labels statistics\n            try:\n                simp = SimpleImputer(strategy=simple_strategy)\n                y_known_2d = y_col[known_mask].reshape(-1, 1)\n                simp.fit(y_known_2d)\n                y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n                impute_info[name] = ('simple', simp)\n                print(f\"[Impute-{name}] SimpleImputer({simple_strategy}) used | known={n_known}, missing={n_miss}\")\n            except Exception as e:\n                # Final fallback: manual median\n                val = np.nanmedian(y_col)\n                y_imp[miss_mask, j] = val\n                impute_info[name] = ('simple_fallback', val)\n                print(f\"[Impute-{name}] SimpleImputer failed ({e}); filled with median={val:.4f}\")\n            continue\n\n        # NN path\n        try:\n            X_known, y_known = Xj[known_mask], y_col[known_mask]\n            # Small validation split\n            Xtr, Xva, ytr, yva = train_test_split(\n                X_known, y_known, test_size=0.2, random_state=random_state\n            )\n\n            model = build_mlp(Xj.shape[1])\n            model.fit(Xtr, ytr, validation_data=(Xva, yva),\n                      batch_size=batch_size, epochs=epochs, verbose=verbose)\n\n            # Predict missing\n            X_miss = Xj[miss_mask]\n            y_pred = model.predict(X_miss, verbose=0).ravel()\n            y_imp[miss_mask, j] = y_pred\n            impute_info[name] = ('nn', model)\n            print(f\"[Impute-{name}] NN used | known={n_known}, missing={n_miss}\")\n\n        except Exception as e:\n            # Robust fallback: SimpleImputer on labels\n            try:\n                simp = SimpleImputer(strategy=simple_strategy)\n                y_known_2d = y_col[known_mask].reshape(-1, 1)\n                simp.fit(y_known_2d)\n                y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n                impute_info[name] = ('simple_after_nn_fail', simp)\n                print(f\"[Impute-{name}] NN failed ({e}); used SimpleImputer({simple_strategy}).\")\n            except Exception as ee:\n                val = np.nanmedian(y_col)\n                y_imp[miss_mask, j] = val\n                impute_info[name] = ('simple_fallback', val)\n                print(f\"[Impute-{name}] Both NN and SimpleImputer failed ({ee}); median={val:.4f}.\")\n\n    return y_imp, impute_info","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.390647Z","iopub.execute_input":"2025-07-31T00:48:57.390909Z","iopub.status.idle":"2025-07-31T00:48:57.411207Z","shell.execute_reply.started":"2025-07-31T00:48:57.390891Z","shell.execute_reply":"2025-07-31T00:48:57.410497Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef summarize_targets(y_raw: np.ndarray, y_imp: np.ndarray, target_names):\n    \"\"\"\n    Print descriptive stats of targets before and after imputation safely.\n    \"\"\"\n    try:\n        assert y_raw.shape == y_imp.shape\n        for j, name in enumerate(target_names):\n            print(f\"\\n=== {name} ===\")\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n                mask_known   = ~np.isnan(orig)\n                mask_missing =  np.isnan(orig)\n\n                # Known values\n                print(f\"Known (before imputation): n={mask_known.sum()}\")\n                if mask_known.any():\n                    print(pd.Series(orig[mask_known]).describe())\n\n                # Imputed values\n                print(f\"\\nImputed count: {mask_missing.sum()}\")\n                if mask_missing.any():\n                    print(\"Imputed-only stats:\")\n                    print(pd.Series(imp[mask_missing]).describe())\n\n                # Full\n                print(\"\\nAfter imputation (full vector) stats:\")\n                print(pd.Series(imp).describe())\n            except Exception as e:\n                print(f\"Error summarizing {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_summarize_targets() failed: {e}\")\n\n\ndef plot_target_distributions(y_raw: np.ndarray, y_imp: np.ndarray, target_names,\n                                   bins=30, figsize=(10, 4)):\n    \"\"\"\n    Plots distribution of known vs. imputed values per target with error handling.\n    \"\"\"\n    try:\n        assert y_raw.shape == y_imp.shape\n        n_targets = y_raw.shape[1]\n\n        for j, name in enumerate(target_names):\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n\n                known_mask   = ~np.isnan(orig)\n                missing_mask =  np.isnan(orig)\n\n                fig, ax = plt.subplots(1, 2, figsize=figsize, constrained_layout=True)\n                fig.suptitle(f\"{name} — distributions before & after imputation\", fontsize=12)\n\n                if known_mask.any():\n                    ax[0].hist(orig[known_mask], bins=bins)\n                ax[0].set_title(f\"{name} (known only)\\n n={known_mask.sum()}\")\n                ax[0].set_xlabel(name)\n                ax[0].set_ylabel(\"Count\")\n\n                if missing_mask.any():\n                    ax[1].hist(imp[missing_mask], bins=bins)\n                ax[1].set_title(f\"{name} (imputed only)\\n n={missing_mask.sum()}\")\n                ax[1].set_xlabel(name)\n                ax[1].set_ylabel(\"Count\")\n\n                plt.show()\n\n            except Exception as e:\n                print(f\"Error plotting {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_plot_target_distributions() failed: {e}\")\n\n\ndef plot_overlay_pre_post(y_raw: np.ndarray, y_imp: np.ndarray, target_names,\n                               bins=30, alpha_known=0.6, alpha_imp=0.6, figsize=(6,4)):\n    \"\"\"\n    Overlay known vs. imputed distributions for each target.\n    \"\"\"\n    try:\n        for j, name in enumerate(target_names):\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n                known_mask   = ~np.isnan(orig)\n                missing_mask =  np.isnan(orig)\n\n                plt.figure(figsize=figsize)\n                if known_mask.any():\n                    plt.hist(orig[known_mask], bins=bins, alpha=alpha_known,\n                             label=\"Known (pre)\", density=True)\n                if missing_mask.any():\n                    plt.hist(imp[missing_mask], bins=bins, alpha=alpha_imp,\n                             label=\"Imputed-only (post)\", density=True)\n                plt.title(f\"{name} — overlay distributions\")\n                plt.xlabel(name)\n                plt.ylabel(\"Density\")\n                plt.legend()\n                plt.show()\n\n            except Exception as e:\n                print(f\"Error in overlay plot for {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_plot_overlay_pre_post() failed: {e}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.414143Z","iopub.execute_input":"2025-07-31T00:48:57.414372Z","iopub.status.idle":"2025-07-31T00:48:57.430651Z","shell.execute_reply.started":"2025-07-31T00:48:57.414356Z","shell.execute_reply":"2025-07-31T00:48:57.429905Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"def _make_model_specs(random_state: int = 42):\n    specs = []\n\n    if _HAS_LGBM:\n        specs.append((\n            \"lgbm\",\n            lambda: LGBMRegressor(\n                n_estimators=1200, learning_rate=0.03, num_leaves=63,\n                subsample=0.8, colsample_bytree=0.8, reg_lambda=1.0,\n                random_state=random_state, n_jobs=-1\n            )\n        ))\n\n    if _HAS_XGB:\n        specs.append((\n            \"xgb\",\n            lambda: XGBRegressor(\n                n_estimators=1200, learning_rate=0.03, max_depth=8,\n                subsample=0.8, colsample_bytree=0.8, reg_lambda=1.0,\n                objective=\"reg:squarederror\", tree_method=\"hist\",\n                random_state=random_state, n_jobs=-1\n            )\n        ))\n\n    specs.append((\n        \"rf\",\n        lambda: RandomForestRegressor(\n            n_estimators=800, max_features=\"sqrt\",\n            random_state=random_state, n_jobs=-1\n        )\n    ))\n\n    specs.append((\n        \"et\",\n        lambda: ExtraTreesRegressor(\n            n_estimators=1000, max_features=\"sqrt\",\n            random_state=random_state, n_jobs=-1\n        )\n    ))\n\n    specs.append((\n        \"enet\",\n        lambda: ElasticNet(alpha=1e-3, l1_ratio=0.2,\n                           random_state=random_state, max_iter=3000)\n    ))\n\n    return specs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.431400Z","iopub.execute_input":"2025-07-31T00:48:57.431639Z","iopub.status.idle":"2025-07-31T00:48:57.443686Z","shell.execute_reply.started":"2025-07-31T00:48:57.431624Z","shell.execute_reply":"2025-07-31T00:48:57.442955Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"# Building feature matrix","metadata":{}},{"cell_type":"code","source":"X_train_raw, desc_names, fp_names = build_features(train)\nX_test_raw, _, _ = build_features(test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:48:57.444534Z","iopub.execute_input":"2025-07-31T00:48:57.444772Z","iopub.status.idle":"2025-07-31T00:51:26.575724Z","shell.execute_reply.started":"2025-07-31T00:48:57.444749Z","shell.execute_reply":"2025-07-31T00:51:26.574707Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"train = train.loc[X_train_raw.index]\ntest  = test.loc[X_test_raw.index]\n\ny_train_raw = train[TARGETS].to_numpy(dtype=float)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:51:26.576746Z","iopub.execute_input":"2025-07-31T00:51:26.577051Z","iopub.status.idle":"2025-07-31T00:51:26.584775Z","shell.execute_reply.started":"2025-07-31T00:51:26.577021Z","shell.execute_reply":"2025-07-31T00:51:26.584185Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"code","source":"X_train_clean, state, info = fit_preprocessor(X_train_raw, variance_threshold=0.0, corr_threshold=0.90, scale=True)\nprint(\"Dropped (NaN):\", len(info['dropped_nan_cols']))\nprint(\"Dropped (low var):\", len(info['dropped_lowvar_cols']))\nprint(\"Dropped (corr):\", len(info['dropped_corr_cols']))\nprint(\"Retained:\", len(info['retained_cols']))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:51:26.585539Z","iopub.execute_input":"2025-07-31T00:51:26.585814Z","iopub.status.idle":"2025-07-31T00:51:36.633873Z","shell.execute_reply.started":"2025-07-31T00:51:26.585784Z","shell.execute_reply":"2025-07-31T00:51:36.633031Z"}},"outputs":[{"name":"stdout","text":"Dropped (NaN): 12\nDropped (low var): 13\nDropped (corr): 59\nRetained: 645\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"report_nan_columns_numpy(X_train_clean, name=\"X_train_clean\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:51:36.634742Z","iopub.execute_input":"2025-07-31T00:51:36.635077Z","iopub.status.idle":"2025-07-31T00:51:36.653561Z","shell.execute_reply.started":"2025-07-31T00:51:36.635053Z","shell.execute_reply":"2025-07-31T00:51:36.652701Z"}},"outputs":[{"name":"stdout","text":"[X_train_clean] No NaNs detected.\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"array([], dtype=int64)"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"X_test_clean = transform_preprocessor(X_test_raw, state)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:51:36.654669Z","iopub.execute_input":"2025-07-31T00:51:36.654870Z","iopub.status.idle":"2025-07-31T00:51:36.669470Z","shell.execute_reply.started":"2025-07-31T00:51:36.654854Z","shell.execute_reply":"2025-07-31T00:51:36.668721Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"# Supervised Feature Selection","metadata":{}},{"cell_type":"code","source":"selectors, Xsel_train = per_target_supervised_selection(\n    X_train_clean, y_train_raw, TARGETS,\n    min_labels=500,           # light selection when labels are ~500–700\n    top_k=100,                # e.g., cap to 100 features per target\n    cv_splits=5, verbose=True\n)\n\n# Applying the same masks to test\nXsel_test = {name: X_test_clean[:, idx] for name, idx in selectors.items()}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:51:36.670220Z","iopub.execute_input":"2025-07-31T00:51:36.670458Z","iopub.status.idle":"2025-07-31T00:55:54.880899Z","shell.execute_reply.started":"2025-07-31T00:51:36.670441Z","shell.execute_reply":"2025-07-31T00:55:54.880033Z"}},"outputs":[{"name":"stdout","text":"\n[Tg] labeled rows = 511 / 7973\n[Tg] Using NORMAL selection.\n[Tg] kept features: 100 / 645\n\n[FFV] labeled rows = 7030 / 7973\n[FFV] Using NORMAL selection.\n[FFV] kept features: 100 / 645\n\n[Tc] labeled rows = 737 / 7973\n[Tc] Using NORMAL selection.\n[Tc] kept features: 100 / 645\n\n[Density] labeled rows = 613 / 7973\n[Density] Using NORMAL selection.\n[Density] kept features: 100 / 645\n\n[Rg] labeled rows = 614 / 7973\n[Rg] Using NORMAL selection.\n[Rg] kept features: 100 / 645\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"# Target Data Imputation","metadata":{}},{"cell_type":"code","source":"y_imputed, impute_info = impute_targets_adaptive(\n    X=None, y=y_train_raw, target_names=TARGETS,\n    X_per_target=Xsel_train,            # directly pass per‑target feature matrices\n    min_missing_for_nn=30, min_known_for_nn=50\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:55:54.882175Z","iopub.execute_input":"2025-07-31T00:55:54.882575Z","iopub.status.idle":"2025-07-31T00:57:18.386680Z","shell.execute_reply.started":"2025-07-31T00:55:54.882545Z","shell.execute_reply":"2025-07-31T00:57:18.385715Z"}},"outputs":[{"name":"stderr","text":"2025-07-31 00:55:55.177395: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1753923355.196011   12978 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1753923355.201259   12978 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nI0000 00:00:1753923358.411878   12978 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1753923360.559580   13541 service.cc:148] XLA service 0x7dd058006ae0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1753923360.559617   13541 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\nI0000 00:00:1753923360.690661   13541 cuda_dnn.cc:529] Loaded cuDNN version 90300\nI0000 00:00:1753923361.116211   13541 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"[Impute-Tg] NN used | known=511, missing=7462\n[Impute-FFV] NN used | known=7030, missing=943\n[Impute-Tc] NN used | known=737, missing=7236\n[Impute-Density] NN used | known=613, missing=7360\n[Impute-Rg] NN used | known=614, missing=7359\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"try:\n    import tensorflow as tf\n    tf.keras.backend.clear_session()\nexcept Exception:\n    pass\n\nimport gc\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:57:18.387715Z","iopub.execute_input":"2025-07-31T00:57:18.389018Z","iopub.status.idle":"2025-07-31T00:57:19.055657Z","shell.execute_reply.started":"2025-07-31T00:57:18.388992Z","shell.execute_reply":"2025-07-31T00:57:19.054992Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"# Plotting target distributions before and after imputation","metadata":{}},{"cell_type":"code","source":"summarize_targets(y_train_raw, y_imputed, TARGETS)\nplot_target_distributions(y_train_raw, y_imputed, TARGETS, bins=40)\nplot_overlay_pre_post(y_train_raw, y_imputed, TARGETS, bins=40)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:57:19.056404Z","iopub.execute_input":"2025-07-31T00:57:19.056639Z","iopub.status.idle":"2025-07-31T00:57:22.909918Z","shell.execute_reply.started":"2025-07-31T00:57:19.056615Z","shell.execute_reply":"2025-07-31T00:57:22.909128Z"}},"outputs":[{"name":"stdout","text":"\n=== Tg ===\nKnown (before imputation): n=511\ncount    511.000000\nmean      96.452314\nstd      111.228279\nmin     -148.029738\n25%       13.674509\n50%       74.040183\n75%      161.147595\nmax      472.250000\ndtype: float64\n\nImputed count: 7462\nImputed-only stats:\ncount    7462.000000\nmean      136.441029\nstd       109.810703\nmin      -142.861191\n25%        44.497424\n50%       131.455315\n75%       223.229832\nmax       574.694031\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    7973.000000\nmean      133.878099\nstd       110.330663\nmin      -148.029738\n25%        42.400909\n50%       127.491470\n75%       220.339828\nmax       574.694031\ndtype: float64\n\n=== FFV ===\nKnown (before imputation): n=7030\ncount    7030.000000\nmean        0.367212\nstd         0.029609\nmin         0.226992\n25%         0.349549\n50%         0.364264\n75%         0.380790\nmax         0.777097\ndtype: float64\n\nImputed count: 943\nImputed-only stats:\ncount    943.000000\nmean       0.373580\nstd        0.038067\nmin        0.267175\n25%        0.351965\n50%        0.370237\n75%        0.394904\nmax        0.947154\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    7973.000000\nmean        0.367965\nstd         0.030797\nmin         0.226992\n25%         0.349769\n50%         0.364816\n75%         0.382379\nmax         0.947154\ndtype: float64\n\n=== Tc ===\nKnown (before imputation): n=737\ncount    737.000000\nmean       0.256334\nstd        0.089538\nmin        0.046500\n25%        0.186000\n50%        0.236000\n75%        0.330500\nmax        0.524000\ndtype: float64\n\nImputed count: 7236\nImputed-only stats:\ncount    7236.000000\nmean        0.199275\nstd         0.149667\nmin        -0.509296\n25%         0.107165\n50%         0.196247\n75%         0.288494\nmax         1.296123\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    7973.000000\nmean        0.204549\nstd         0.146092\nmin        -0.509296\n25%         0.116457\n50%         0.202003\n75%         0.293047\nmax         1.296123\ndtype: float64\n\n=== Density ===\nKnown (before imputation): n=613\ncount    613.000000\nmean       0.985484\nstd        0.146189\nmin        0.748691\n25%        0.890243\n50%        0.948193\n75%        1.062096\nmax        1.840999\ndtype: float64\n\nImputed count: 7360\nImputed-only stats:\ncount    7360.000000\nmean        1.050087\nstd         0.307757\nmin         0.192144\n25%         0.868237\n50%         1.012171\n75%         1.195771\nmax         6.618835\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    7973.000000\nmean        1.045120\nstd         0.298945\nmin         0.192144\n25%         0.871362\n50%         1.006336\n75%         1.184645\nmax         6.618835\ndtype: float64\n\n=== Rg ===\nKnown (before imputation): n=614\ncount    614.000000\nmean      16.419787\nstd        4.608640\nmin        9.728355\n25%       12.540328\n50%       15.052194\n75%       20.411067\nmax       34.672906\ndtype: float64\n\nImputed count: 7359\nImputed-only stats:\ncount    7359.000000\nmean       17.708828\nstd         4.369079\nmin         7.213097\n25%        14.419514\n50%        17.649519\n75%        20.656528\nmax        74.034439\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    7973.000000\nmean       17.609559\nstd         4.401132\nmin         7.213097\n25%        14.216173\n50%        17.515241\n75%        20.629345\nmax        74.034439\ndtype: float64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA/MAAAGbCAYAAACIxMC9AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABrU0lEQVR4nO3de3zP9f//8ft7ZzbbnHZitqEcQznMcmbMIVEOKTIlJBMhrHJMDZ1EIn3KIaQoKjnkfCiEoqQWcgobpW1MG7bX74++e/28bWNm8957u10vl/eF1/P1fL1ej9fr/dr7+X68n6/X82UxDMMQAAAAAACwGw62DgAAAAAAANwaknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM6QzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAoxDZv3iyLxaLNmzebZX369FFwcPAd2X5wcLD69OljTs+bN08Wi0V79uy5I9tv3ry5mjdvfke2dav69OkjDw+PPF/va6+9pooVK8rR0VF16tTJ8/XbizVr1qhOnTpyc3OTxWJRQkKCTeKwWCwaP368TbZdUHAMACB/kMwDKPIyEsyMl5OTk8qVK6c+ffro1KlTtg6vQDh48KDGjx+vY8eO2TqUTApybHfaN998o5EjR6pRo0aaO3euXn31VVuHZEpJSVF0dLSCg4NVvHhxVa1aVSNGjMiXbf3999/q3r27ihUrppkzZ+qjjz6Su7u7Xn31Va1YsSJftmnPTp8+rfHjx2vfvn25XseqVatI2AHgDnOydQAAUFBMnDhRISEhSklJ0c6dOzVv3jxt375dBw4ckJubm63DyzPvv/++0tPTb2mZgwcPasKECWrevPkt9erHxsbKwSF/fze+UWzffPNNvm67oNm4caMcHBz0wQcfyMXFxdbhWBk1apSmT5+uJ598UqGhoYqNjdXChQv1+uuv5/m2du/erQsXLujll19WeHi4Wf7qq6+qa9eu6ty5c55vMzv//vuvnJwK9tet06dPa8KECQoODs711RyrVq3SzJkzs0zo7eEYAIA94pMVAP5Pu3btVK9ePUnSU089pTJlymjKlCn68ssv1b17dxtHl3ecnZ3zdf2GYSglJUXFihWTq6trvm7rZgpaQpvfzp49q2LFiuXZfl/7Xt6uJUuWqH379vrggw/Msvy6cuDs2bOSJG9v73xZ/7VSUlLk4uKS7Y9WhemHwNziGABA/uAyewDIRpMmTSRJR44csSpPT0/X+PHjFRAQoOLFi6tFixY6ePBgpvvD77Q///xTnTt3lru7u3x8fPTcc88pNTU1U72s7plfsmSJ6tatqxIlSsjT01P33HOP3n77bUn/3YbQrVs3SVKLFi3M2xEy7sMPDg7WAw88oLVr16pevXoqVqyY3nvvPXNeVsfk0qVLGjBggEqXLi1PT0/17t1b//zzj1Wd7O6zvXadN4stq3vmz549q759+8rX11dubm6qXbu25s+fb1Xn2LFjslgsev311zVnzhxVqlRJrq6uql+/vnbv3m1VNy4uTk888YTKly8vV1dX+fv7q1OnTjm+7P+PP/5QRESE3N3dFRAQoIkTJ8owDKs66enpmjZtmmrUqCE3Nzf5+vpqwIABVsfMYrFo7ty5Sk5ONo/DvHnzJElXr17Vyy+/bO5HcHCwXnjhhUznx43ey4SEBA0dOlSBgYFydXVV5cqVNWXKlBxf5eHg4JBpv271x55t27apW7duqlChglxdXRUYGKjnnntO//77r1mnefPmioyMlCTVr19fFotFffr0kcViUXJysubPn28en2vPzVOnTunJJ5+Ur6+vXF1dVaNGDX344YdW288Yg2LJkiV66aWXVK5cORUvXlxJSUnZxnz9eTx+/HhZLBb9/vvv6tWrl7y8vFS2bFmNGTNGhmHo5MmT6tSpkzw9PeXn56c33ngjyxg++eQTvfDCC/Lz85O7u7sefPBBnTx50qpudn9/1/5dbN68WfXr15ckPfHEE5nOnZwc8z59+mjmzJnm/ma8sjsGkvTjjz+qXbt28vT0lIeHh1q1aqWdO3da1cm4Berbb7/VsGHDVLZsWbm7u+uhhx7SuXPnsj3mAFBU0DMPANnISMZKlixpVR4dHa2pU6eqY8eOioiI0P79+xUREaGUlBQbRPmff//9V61atdKJEyf07LPPKiAgQB999JE2btx402XXrVunRx99VK1atdKUKVMkSb/++qu+/fZbDRkyRE2bNtWzzz6r6dOn64UXXlC1atUkyfxX+u9y+kcffVQDBgxQv379VKVKlRtuMyoqSt7e3ho/frxiY2M1a9YsHT9+3ExUcionsV3r33//VfPmzXX48GFFRUUpJCRES5cuVZ8+fZSQkKAh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Tp48KcMw9PLLL6t8+fIqVqyYOnXqpPPnz1utM6NN/Oabb1SnTh25ubmpevXq+vzzz63qjR8/XhaLJVOsGbcgHDt2zFzfL7/8oi1btpi3JTRv3tysn5CQoKFDhyowMFCurq6qXLmypkyZkumKg4SEBPXp00deXl7y9vZWZGSkEhISbnrsMvzxxx/q1q2bSpUqpeLFi6thw4b6+uuvrepkjI3z6aef6pVXXlH58uXl5uamVq1a6fDhw9mu2zAMBQcHq1OnTpnmpaSkyMvLSwMGDDDLnJ2d1bx5c33xxRc5jh+4HSTzQD7IaOhKlixpVR4dHa0JEyaoXr16eu2113TXXXcpIiJCycnJN13nlStXtHv3bt133303rbty5Uo9+OCD6tatm/mrf4bt27frmWeeUY8ePTR16lSlpKSoS5cu+vvvv806v/zyi5o0aaL9+/dr5MiRGjNmjI4eParmzZtr165dkiRvb2/VrFlTW7dutVq3xWLR+fPndfDgQbN827Zt5hehDP/884/atm2r2rVr64033lDVqlU1atQorV69+qb799RTT2ns2LG677779NZbb6lZs2aKiYlRjx49MtU9fPiwunbtqtatW+uNN95QyZIl1adPH/3yyy/Zrv/xxx/X1atX9cknn1iVX758WcuWLVOXLl2sLrOsW7euJFkNXgQAKDxs3a5nWLRokd59910NHjxYw4cP15YtW9S9e3e99NJLWrNmjUaNGqX+/fvrq6++0ogRIzItf+jQIT3yyCNq166dYmJi5OTkpG7dumndunU5jiHDtGnTVL58eVWtWlUfffSRPvroI7344ouSpEuXLqlZs2ZauHChevfurenTp6tRo0aKjo7WsGHDzHUYhqFOnTrpo48+Uq9evTRp0iT9+eefioyMzFEM8fHxuv/++7V27Vo988wzeuWVV5SSkqIHH3xQy5cvz1R/8uTJWr58uUaMGKHo6Gjt3LlTPXv2zHb9FotFvXr10urVqzP9OPLVV18pKSlJvXr1siqvW7euDhw4oKSkpBztA3BbDAC5NnfuXEOSsX79euPcuXPGyZMnjWXLlhlly5Y1XF1djZMnT5p14+LiDCcnJ6Nz585W6xg/frwhyYiMjLzhtg4fPmxIMmbMmJFpXrNmzYwaNWoYhmEYn332meHs7Gz069fPSEtLs6onyXBxcTEOHz5slu3fvz/Tejt37my4uLgYR44cMctOnz5tlChRwmjatKlZNmjQIMPX19ecHjZsmNG0aVPDx8fHmDVrlmEYhvH3338bFovFePvtt63ilWQsWLDALEtNTTX8/PyMLl263PA47Nu3z5BkPPXUU1blI0aMMCQZGzduNMuCgoIMScbWrVvNsrNnzxqurq7G8OHDzbJNmzYZkoxNmzaZZWFhYUZoaKjVNj7//PNM9TK4uLgYAwcOvGHsAICCraC065GRkUZQUJA5ffToUUOSUbZsWSMhIcEsj46ONiQZtWvXNq5cuWKWP/roo4aLi4uRkpJilmW0iZ999plZlpiYaPj7+xv33nuvWTZu3DgjqxQh49gcPXrULKtRo4bRrFmzTHVffvllw93d3fj999+tykePHm04OjoaJ06cMAzDMFasWGFIMqZOnWrWuXr1qtGkSRNDkjF37txM677W0KFDDUnGtm3bzLILFy4YISEhRnBwsPk9KKOdr1atmpGammrWffvttw1Jxs8//2yWXX/sY2NjDUnm95oMDz74oBEcHGykp6dblS9evNiQZOzateuGsQN5gZ55IA+Eh4erbNmyCgwMVNeuXeXu7q4vv/xS5cuXN+ts2LBBV69e1TPPPGO17ODBg3O0jYye8+t7Ba718ccf65FHHtGAAQP03nvvycEh8594eHi41aAstWrVkqenp/744w9JUlpamr755ht17txZFStWNOv5+/vrscce0/bt281fm5s0aaL4+HjFxsZK+q8HvmnTpmrSpIm2bdsm6b/eesMwMvXMe3h4WP2a7eLiogYNGphxZGfVqlWSZPXLviQNHz5ckjJdWle9enWrbZctW1ZVqlS56XZ69+6tXbt2WV1SuWjRIgUGBqpZs2aZ6pcsWVJ//fXXDdcJALAPBaVdv163bt3k5eVlToeGhkqSevXqZXUVXmhoqC5fvpxpBP6AgAA99NBD5rSnp6d69+6tH3/8MU+fyrJ06VI1adLEbBszXuHh4UpLSzOv6lu1apWcnJw0cOBAc1lHR8ccH8NVq1apQYMGaty4sVnm4eGh/v3769ixY1ZXCUrSE088IRcXF3M64/vBjb4T3H333QoNDdWiRYvMsvPnz2v16tXq2bNnplsSMt5PvhPgTiCZB/LAzJkztW7dOi1btkzt27fXX3/9lWngmuPHj0uSKleubFVeqlSpW2rIjWwGWTt69Kh69eqlLl26aMaMGVne7yZJFSpUyFRWsmRJ/fPPP5L+G1n30qVLqlKlSqZ61apVU3p6uk6ePCnp/zeC27ZtU3Jysn788Uc1adJETZs2NZP5bdu2ydPTU7Vr17ZaV/ny5bNsADPiyM7x48fl4OCQ6Tj6+fnJ29vbPM453d/sPPLII3J1dTUb78TERK1cuTLLhlv6733J7pgDAOxLQWjXs3J9m5aR2AcGBmZZfn1bV7ly5Uxt1d133y3p/99KkBcOHTqkNWvWqGzZslav8PBwSdLZs2cl/XcM/f39M40ZkNV3kKwcP3482+8rGfOvdf3xy3ifbvadoHfv3vr222/N9S1dulRXrlzR448/nqluxvvJdwLcCTyaDsgDDRo0UL169SRJnTt3VuPGjfXYY48pNjY2R4PV5UTp0qUlZd/g+Pv7y9/fX6tWrdKePXvMeK7n6OiYZfmtfJnIEBAQoJCQEG3dulXBwcEyDENhYWEqW7ashgwZouPHj2vbtm26//77M10lcLtx5LSRzO12SpYsqQceeECLFi3S2LFjtWzZMqWmpma6Ny5DQkKCypQpk6OYAAAFW0Fo17OSXZuWl217du1rWlpajteRnp6u1q1ba+TIkVnOz/gB4U7L7XHq0aOHnnvuOS1atEgvvPCCFi5cqHr16mX5Q0LG+8l3AtwJ9MwDeczR0VExMTE6ffq03nnnHbM8KChIkjKNmvr333/nqCGvUKGCihUrpqNHj2Y5383NTStXrtRdd92ltm3b3nCAtxspW7asihcvbl46f63ffvtNDg4OVj0AGZfUb9u2TXXq1FGJEiVUu3ZteXl5ac2aNfrhhx/UtGnTXMWSlaCgIKWnp+vQoUNW5fHx8UpISDCPc17o3bu3fv/9d+3evVuLFi3Svffeqxo1amSqd+rUKV2+fNnsCQAAFB62atfzw+HDhzMlrr///rskmaPnZ/RWXz+i/PW93FL2iX+lSpV08eJFhYeHZ/nK6CEPCgrSmTNndPHiRavls/oOkpWgoKBsv69kzM8LpUqVUocOHbRo0SIdP35c3377bZa98tJ/V0o6ODjY7AcLFC0k80A+aN68uRo0aKBp06aZjzBr1aqVnJycNGvWLKu6134xuBFnZ2fVq1dPe/bsybaOl5eX1q5dKx8fH7Vu3TrTI3RywtHRUW3atNEXX3xhdcldfHy8Fi9erMaNG8vT09Msb9KkiY4dO6ZPPvnEvOzewcFB999/v958801duXIl0/3yt6N9+/aS/htF91pvvvmmJKlDhw55tq127dqpTJkymjJlirZs2ZJtr/zevXslSffff3+ebRsAUHDYql3Pa6dPn7Ya5T0pKUkLFixQnTp1zEfIZoyrc+3TapKTk7N8drq7u3uWj5Hr3r27duzYobVr12aal5CQYD4yt3379rp69arVMUxLS9OMGTNytD/t27fX999/rx07dljFOmfOHAUHB6t69eo5Wk9OPP744zp48KCef/55OTo6ZvkEHem/7wQ1atSwGtsAyC9cZg/kk+eff17dunXTvHnz9PTTT8vX11dDhgzRG2+8oQcffFBt27bV/v37tXr1apUpUyZHl4136tRJL774opKSkqwS6muVKVNG69atU+PGjRUeHq7t27erXLlytxT7pEmTzHU888wzcnJy0nvvvafU1NRMz4LPSNRjY2P16quvmuVNmzbV6tWr5erqqvr169/S9m+kdu3aioyM1Jw5c5SQkKBmzZrp+++/1/z589W5c2e1aNEiz7bl7OysHj166J133pGjo6MeffTRLOutW7dOFSpU0L333ptn2wYAFCy2atfz0t13362+fftq9+7d8vX11Ycffqj4+HjNnTvXrNOmTRtVqFBBffv2NRPXDz/8UGXLltWJEyes1le3bl3NmjVLkyZNUuXKleXj46OWLVvq+eef15dffqkHHnhAffr0Ud26dZWcnKyff/5Zy5Yt07Fjx1SmTBl17NhRjRo10ujRo3Xs2DHzufeJiYk52p/Ro0fr448/Vrt27fTss8+qVKlSmj9/vo4eParPPvssy4GAc6tDhw4qXbq0li5dqnbt2snHxydTnStXrmjLli2ZBkUE8gs980A+efjhh1WpUiW9/vrr5n1mU6ZM0ZgxY7R7926NGDFChw8f1jfffCPDMKyeW56dxx9/XGlpafryyy9vWK9cuXJav369UlNT1bp161seUbVGjRratm2batasqZiYGE2YMEFBQUHatGmTOXJuhipVqpgN2rWjyWYk+Q0aNMg0aNDt+t///qcJEyZo9+7dGjp0qDZu3Kjo6GgtWbIkT7cj/XepvfRfD4y/v3+m+enp6frss8/Uu3dvBrsBgELMlu16Xrnrrrv0ySefaNWqVRo9erSuXLmiTz75RBEREWYdZ2dn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Mq0XKGpI5oEipEKFClbTGZfR/fPPP2ZZxYoVVbFixVtab0bDHxISYibykuTh4aGOHTtq4cKFunr1qpyccv6Rc/XqVT377LN6/PHHVb9+/VuKBwCAoiS/2vfrffbZZ0pJScn2Envpv579jF70Rx99VP3791d4eLhiY2Nv+EPBY489puHDh2v9+vVmMl+rVi0tXrxYTz/9tBo1aiRJ8vPz07Rp0zRw4ECrkfCBoohkHihCrh9FNsO1A89cvHjR7Gm/2boyRqIPCAiQJKv73DL4+PjoypUrSk5OlpeXV45jXbBggWJjY/Xee+9lutzvwoULOnbsmHx8fMz75gAAKKryq32/3qJFi+Tl5aUHHnggx7F17dpV77//vrZu3aqIiIgb1g0MDNT58+czLf/ggw9q//79SktL03333WeOmn/33XfnOA6gMCKZB2Dl9ddfv+V76gICAuTn55flvWunT5+Wm5ubSpQocUtxnDhxQleuXDF/ib/WggULtGDBAi1fvlydO3e+pfUCAFAU5aZ9v9aZM2e0adMm9enTR66urjnebsal8ImJiTesZxiGjh07pnvvvTfTPBcXF6ur9NavXy9JCg8Pz3EcQGFEMg/ASm7vqXvkkUf09ttva926debIsn/99Ze++OILtWzZUg4Ot/YkzB49eqhOnTqZyh966CG1b99e/fr1s7qkHwAAZO9275lfsmSJ0tPTs73E/ty5c1n26H/wwQeyWCy67777blh31qxZOnfu3E3H2Dl06JBmz56tBx54gJ55FHkk8wCs5PaeuujoaH366afq0qWLhg0bJi8vL82ePVtXrlzRq6++alX3o48+0vHjx81H5GzdulWTJk2SJD3++OMKCgpS1apVVbVq1Sy3FRISQo88AAC34HbvmV+0aJECAgLUvHnzLOe/8sor+vbbb9W2bVtVqFBB58+f12effabdu3dr8ODBqly5slk3KChIjzzyiO655x65ublp+/btWrJkierUqaMBAwZYrbd69erq1q2bKlSooKNHj2rWrFkqVaqUZs+enet9AQoLknkAecLX11fbt2/XiBEj9NZbb+nKlSsKCwvTwoULVbt2bau6H3zwgbZs2WJOb9q0SZs2bZIkNW7c2OrxMwAAwLZiY2O1d+9eDRs2LNsr7Tp06KAjR47oww8/1Llz5+Tm5qZatWpp7ty5ioyMtKrbs2dPfffdd+aAekFBQRo5cqRefPHFTGPh1K5dW3PnzlV8fLzKlCmj7t27a8KECfLx8cm3/QXshcW4dmQMAAAAAABQ4N3aTawAAAAAAMDmSOYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtT6J8zn56ertOnT6tEiRKyWCy2DgcAgFtmGIYuXLiggICAbJ/xDNp8AEDhkNN2v9An86dPn1ZgYKCtwwAA4LadPHlS5cuXt3UYBRZtPgCgMLlZu1/ok/kSJUpI+u9AeHp62jgaAABuXVJSkgIDA802DVmjzQcAFAY5bfcLfTKfcZmdp6cnDTsAwK5x6fiN0eYDAAqTm7X73HgHAAAAAICdIZkHAAAAAMDOkMwDAAAAAGBnSOYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM442ToA5K3g0V/nqN6xyR3yORIAAFAY8V0DAAoGeuYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAADe0detWdezYUQEBAbJYLFqxYoXVfMMwNHbsWPn7+6tYsWIKDw/XoUOHrOqcP39ePXv2lKenp7y9vdW3b19dvHjRqs5PP/2kJk2ayM3NTYGBgZo6dWp+7xoAAHaLZB4AANxQcnKyateurZkzZ2Y5f+rUqZo+fbpmz56tXbt2yd3dXREREUpJSTHr9OzZU7/88ovWrVunlStXauvWrerfv785PykpSW3atFFQUJD27t2r1157TePHj9ecOXPyff8AALBHTrYOAAAAFGzt2rVTu3btspxnGIamTZuml156SZ06dZIkLViwQL6+vlqxYoV69OihX3/9VWvWrNHu3btVr149SdKMGTPUvn17vf766woICNCiRYt0+fJlffjhh3JxcVGNGjW0b98+vfnmm1ZJPwAA+A898wAAINeOHj2quLg4hYeHm2VeXl4KDQ3Vjh07JEk7duyQt7e3mchLUnh4uBwcHLRr1y6zTtOmTeXi4mLWiYiIUGxsrP75558st52amqqkpCSrFwAARQXJPAAAyLW4uDhJkq+vr1W5r6+vOS8uLk4+Pj5W852cnFSqVCmrOlmt49ptXC8mJkZeXl7mKzAw8PZ3CAAAO0EyDwAA7FJ0dLQSExPN18mTJ20dEgAAdwzJPAAAyDU/Pz9JUnx8vFV5fHy8Oc/Pz09nz561mn/16lWdP3/eqk5W67h2G9dzdXWVp6en1QsAgKKCZB4AAORaSEiI/Pz8tGHDBrMsKSlJu3btUlhYmCQpLCxMCQkJ2rt3r1ln48aNSk9PV2hoqFln69atunLlilln3bp1qlKlikqWLHmH9gYAAPtBMg8AAG7o4sWL2rdvn/bt2yfpv0Hv9u3bpxMnTshisWjo0KGaNGmSvvzyS/3888/q3bu3AgIC1LlzZ0lStWrV1LZtW/Xr10/ff/+9vv32W0VFRalHjx4KCAiQJD322GNycXFR37599csvv+iTTz7R22+/rWHDhtlorwEAKNh4NB0AALihPXv2qEWLFuZ0RoIdGRmpefPmaeTIkUpOTlb//v2VkJCgxo0ba82aNXJzczOXWbRokaKiotSqVSs5ODioS5cumj59ujnfy8tL33zzjQYNGqS6deuqTJkyGjt2LI+lAwAgGyTzAADghpo3by7DMLKdb7FYNHHiRE2cODHbOqVKldLixYtvuJ1atWpp27ZtuY4TAICihGQeAAAAkqTg0V/bOgQAQA5xzzwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ3hnnkAAAA7ldN73I9N7pDPkQAA7jSSeQAAgEKOge0AoPDhMnsAAAAAAOyMTZP58ePHy2KxWL2qVq1qzk9JSdGgQYNUunRpeXh4qEuXLoqPj7dhxAAAAAAA2J7Ne+Zr1KihM2fOmK/t27eb85577jl99dVXWrp0qbZs2aLTp0/r4YcftmG0AAAAAADYns3vmXdycpKfn1+m8sTERH3wwQdavHixWrZsKUmaO3euqlWrpp07d6phw4Z3OlQAAAAAAAoEm/fMHzp0SAEBAapYsaJ69uypEydOSJL27t2rK1euKDw83KxbtWpVVahQQTt27Mh2fampqUpKSrJ6AQAAAABQmNg0mQ8NDdW8efO0Zs0azZo1S0ePHlWTJk104cIFxcXFycXFRd7e3lbL+Pr6Ki4uLtt1xsTEyMvLy3wFBgbm814AAAAAAHBn2fQy+3bt2pn/r1WrlkJDQxUUFKRPP/1UxYoVy9U6o6OjNWzYMHM6KSmJhB4AAAAAUKjY/DL7a3l7e+vuu+/W4cOH5efnp8uXLyshIcGqTnx8fJb32GdwdXWVp6en1QsAAAAAgMKkQCXzFy9e1JEjR+Tv76+6devK2dlZGzZsMOfHxsbqxIkTCgsLs2GUAAAAAADYlk0vsx8xYoQ6duyooKAgnT59WuPGjZOjo6MeffRReXl5qW/fvho2bJhKlSolT09PDR48WGFhYYxkDwAAAAAo0myazP/555969NFH9ffff6ts2bJq3Lixdu7cqbJly0qS3nrrLTk4OKhLly5KTU1VRESE3n33XVuGDAAAAACAzdk0mV+yZMkN57u5uWnmzJmaOXPmHYoIAAAAAICCr0DdMw8AAAAAAG6OZB4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM6QzAMAAAAAYGdsOpo9AAAACqfg0V/nqN6xyR3yORIAKJzomQcAAAAAwM6QzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AzJPAAAAAAAdoZkHgAAAAAAO0MyDwAAAACAnSGZBwAAAADAzpDMAwAAAABgZ5xsHQBsI3j01zmqd2xyh3yOBAAAAABwq+iZBwAAAADAzpDMAwAAAABgZ0jmAQAAAACwMyTzAAAAAADYGZJ5AAAAAADsDMk8AAC4LWlpaRozZoxCQkJUrFgxVapUSS+//LIMwzDrGIahsWPHyt/fX8WKFVN4eLgOHTpktZ7z58+rZ8+e8vT0lLe3t/r27auLFy/e6d0BAMAukMwDAIDbMmXKFM2aNUvvvPOOfv31V02ZMkVTp07VjBkzzDpTp07V9OnTNXv2bO3atUvu7u6KiIhQSkqKWadnz5765ZdftG7dOq1cuVJbt25V//79bbFLAAAUeDxnHgAA3JbvvvtOnTp1UocOHSRJwcHB+vjjj/X9999L+q9Xftq0aXrppZfUqVMnSdKCBQvk6+urFStWqEePHvr111+1Zs0a7d69W/Xq1ZMkzZgxQ+3bt9frr7+ugIAA2+ycjQSP/trWIQAACjh65gEAwG25//77tWHDBv3++++SpP3792v79u1q166dJOno0aOKi4tTeHi4uYyXl5dCQ0O1Y8cOSdKOHTvk7e1tJvKSFB4eLgcHB+3atSvL7aampiopKcnqBQBAUUHPvI3l9Jf3Y5M75HMkAADkzujRo5WUlKSqVavK0dFRaWlpeuWVV9SzZ09JUlxcnCTJ19fXajlfX19zXlxcnHx8fKzmOzk5qVSpUmad68XExGjChAl5vTsAANgFeuYBAMBt+fTTT7Vo0SItXrxYP/zwg+bPn6/XX39d8+fPz9ftRkdHKzEx0XydPHkyX7cHAEBBQs88AAC4Lc8//7xGjx6tHj16SJLuueceHT9+XDExMYqMjJSfn58kKT4+Xv7+/uZy8fHxqlOnjiTJz89PZ8+etVrv1atXdf78eXP567m6usrV1TUf9ggAgIKPnnkAAHBbLl26JAcH668Ujo6OSk9PlySFhITIz89PGzZsMOcnJSVp165dCgsLkySFhYUpISFBe/fuNets3LhR6enpCg0NvQN7AQCAfaFnHgAA3JaOHTvqlVdeUYUKFVSjRg39+OOPevPNN/Xkk09KkiwWi4YOHapJkybprrvuUkhIiMaMGaOAgAB17txZklStWjW1bdtW/fr10+zZs3XlyhVFRUWpR48eRW4kewAAcoJkHgAA3JYZM2ZozJgxeuaZZ3T27FkFBARowIABGjt2rFln5MiRSk5OVv/+/ZWQkKDGjRtrzZo1cnNzM+ssWrRIUVFRatWqlRwcHNSlSxdNnz7dFrsEAECBRzIPAABuS4kSJTRt2jRNmzYt2zoWi0UTJ07UxIkTs61TqlQpLV68OB8iBACg8OGeeQAAAAAA7AzJPAAAAAAAdobL7O1E8OivbR0CAAAAAKCAKDA985MnTzZHu82QkpKiQYMGqXTp0vLw8FCXLl0UHx9vuyABAAAAACgACkQyv3v3br333nuqVauWVflzzz2nr776SkuXLtWWLVt0+vRpPfzwwzaKEgAAAACAgsHmyfzFixfVs2dPvf/++ypZsqRZnpiYqA8++EBvvvmmWrZsqbp162ru3Ln67rvvtHPnThtGDAAAAACAbdk8mR80aJA6dOig8PBwq/K9e/fqypUrVuVVq1ZVhQoVtGPHjmzXl5qaqqSkJKsXAAAAAACFiU0HwFuyZIl++OEH7d69O9O8uLg4ubi4yNvb26rc19dXcXFx2a4zJiZGEyZMyOtQi6ycDrx3bHKHfI4EAAAAAJDBZj3zJ0+e1JAhQ7Ro0SK5ubnl2Xqjo6OVmJhovk6ePJln6wYAAAAAoCCwWTK/d+9enT17Vvfdd5+cnJzk5OSkLVu2aPr06XJycpKvr68uX76shIQEq+Xi4+Pl5+eX7XpdXV3l6elp9QIAAAAAoDCx2WX2rVq10s8//2xV9sQTT6hq1aoaNWqUAgMD5ezsrA0bNqhLly6SpNjYWJ04cUJhYWG2CBkAAAAAgALBZsl8iRIlVLNmTasyd3d3lS5d2izv27evhg0bplKlSsnT01ODBw9WWFiYGjZsaIuQAQAAAAAoEGw6AN7NvPXWW3JwcFCXLl2UmpqqiIgIvfvuu7YOCwAAAAAAmypQyfzmzZutpt3c3DRz5kzNnDnTNgEBAAAAAFAA2fw58wAAAAAA4NaQzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AzJPAAAAAAAdoZkHgAAAAAAO0MyDwAAAACAnSGZBwAAAADAzpDMAwAAAABgZ0jmAQAAAACwMyTzAAAAAADYGZJ5AAAAAADsDMk8AAAAAAB2hmQeAAAAAAA7QzIPAAAAAICdIZkHAAAAAMDOkMwDAAAAAGBnSOYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM6QzAMAAAAAYGdylcxXrFhRf//9d6byhIQEVaxY8baDgv0JHv11jl4AgDvnTrbXp06dUq9evVS6dGkVK1ZM99xzj/bs2WPONwxDY8eOlb+/v4oVK6bw8HAdOnTIah3nz59Xz5495enpKW9vb/Xt21cXL17M0zgBACgscpXMHzt2TGlpaZnKU1NTderUqdsOCgAA3L471V7/888/atSokZydnbV69WodPHhQb7zxhkqWLGnWmTp1qqZPn67Zs2dr165dcnd3V0REhFJSUsw6PXv21C+//KJ169Zp5cqV2rp1q/r3759ncQIAUJg43UrlL7/80vz/2rVr5eXlZU6npaVpw4YNCg4OzrPgAADArbvT7fWUKVMUGBiouXPnmmUhISHm/w3D0LRp0/TSSy+pU6dOkqQFCxbI19dXK1asUI8ePfTrr79qzZo12r17t+rVqydJmjFjhtq3b6/XX39dAQEBeRYvAACFwS0l8507d5YkWSwWRUZGWs1zdnZWcHCw3njjjTwLDgAA3Lo73V5/+eWXioiIULdu3bRlyxaVK1dOzzzzjPr16ydJOnr0qOLi4hQeHm4u4+XlpdDQUO3YsUM9evTQjh075O3tbSbykhQeHi4HBwft2rVLDz30UKbtpqamKjU11ZxOSkrKs30CAKCgu6VkPj09XdJ/v7bv3r1bZcqUyZegAABA7t3p9vqPP/7QrFmzNGzYML3wwgvavXu3nn32Wbm4uCgyMlJxcXGSJF9fX6vlfH19zXlxcXHy8fGxmu/k5KRSpUqZda4XExOjCRMm5MMeAQBQ8N1SMp/h6NGjeR0HAADIY3eqvU5PT1e9evX06quvSpLuvfdeHThwQLNnz850ZUBeio6O1rBhw8zppKQkBQYG5tv2AAAoSHKVzEvShg0btGHDBp09e9bsAcjw4Ycf3nZgAADg9t2J9trf31/Vq1e3KqtWrZo+++wzSZKfn58kKT4+Xv7+/mad+Ph41alTx6xz9uxZq3VcvXpV58+fN5e/nqurq1xdXfNkHwAAsDe5Gs1+woQJatOmjTZs2KC//vpL//zzj9ULAADY3p1qrxs1aqTY2First9//11BQUGS/rvc38/PTxs2bDDnJyUladeuXQoLC5MkhYWFKSEhQXv37jXrbNy4Uenp6QoNDc2zWAEAKCxy1TM/e/ZszZs3T48//nhexwMAAPLInWqvn3vuOd1///169dVX1b17d33//feaM2eO5syZI+m/gfiGDh2qSZMm6a677lJISIjGjBmjgIAAc7C+atWqqW3bturXr59mz56tK1euKCoqSj169GAkewAAspCrZP7y5cu6//778zoWAACQh+5Ue12/fn0tX75c0dHRmjhxokJCQjRt2jT17NnTrDNy5EglJyerf//+SkhIUOPGjbVmzRq5ubmZdRYtWqSoqCi1atVKDg4O6tKli6ZPn57v8QMAYI8shmEYt7rQqFGj5OHhoTFjxuRHTHkqKSlJXl5eSkxMlKenp63DySR49Ne2DuGOOja5g61DAAC7k9u2zJ7a67xQ0Nv8W1GUvh/w3QAArOW0PctVz3xKSormzJmj9evXq1atWnJ2draa/+abb+ZoPbNmzdKsWbN07NgxSVKNGjU0duxYtWvXztzO8OHDtWTJEqWmpioiIkLvvvtupkfbAACAzPKqvQYAAAVPrpL5n376yRx99sCBA1bzLBZLjtdTvnx5TZ48WXfddZcMw9D8+fPVqVMn/fjjj6pRo4aee+45ff3111q6dKm8vLwUFRWlhx9+WN9++21uwgYAoEjJq/YaAAAUPLlK5jdt2pQnG+/YsaPV9CuvvKJZs2Zp586dKl++vD744AMtXrxYLVu2lCTNnTtX1apV086dO9WwYcMs15mamqrU1FRzOikpKU9iBQDA3uRVew0AAAqeXD2aLj+kpaVpyZIlSk5OVlhYmPbu3asrV64oPDzcrFO1alVVqFBBO3bsyHY9MTEx8vLyMl+BgYF3InwAAAAAAO6YXPXMt2jR4oaX523cuDHH6/r5558VFhamlJQUeXh4aPny5apevbr27dsnFxcXeXt7W9X39fVVXFxctuuLjo7WsGHDzOmkpCQSegBAkZSX7TUAAChYcpXMZ9x/l+HKlSvat2+fDhw4oMjIyFtaV5UqVbRv3z4lJiZq2bJlioyM1JYtW3ITliTJ1dVVrq6uuV4eAIDCIi/bawAAULDkKpl/6623siwfP368Ll68eEvrcnFxUeXKlSVJdevW1e7du/X222/rkUce0eXLl5WQkGDVOx8fHy8/P7/chA0AQJGSl+01AAAoWPL0nvlevXrpww8/vK11pKenKzU1VXXr1pWzs7M2bNhgzouNjdWJEycUFhZ2u6ECAFBk5UV7DQAAbCtXPfPZ2bFjh9zc3HJcPzo6Wu3atVOFChV04cIFLV68WJs3b9batWvl5eWlvn37atiwYSpVqpQ8PT01ePBghYWFZTuSPYCcCx79dY7qHZvcIZ8jAXCn3Wp7DQAACp5cJfMPP/yw1bRhGDpz5oz27NmjMWPG5Hg9Z8+eVe/evXXmzBl5eXmpVq1aWrt2rVq3bi3pv8sDHRwc1KVLF6WmpioiIkLvvvtubkIGAKDIyav2GgAAFDy5Sua9vLysph0cHFSlShVNnDhRbdq0yfF6PvjggxvOd3Nz08yZMzVz5szchAkAQJGWV+01AAAoeHKVzM+dOzev4wAAAHmM9hoAgMLrtu6Z37t3r3799VdJUo0aNXTvvffmSVAAACDv0F4DAFD45CqZP3v2rHr06KHNmzebj41LSEhQixYttGTJEpUtWzYvYwRwC3I6sB2Awo/2GgCAwitXyfzgwYN14cIF/fLLL6pWrZok6eDBg4qMjNSzzz6rjz/+OE+DBAAAt472GvaAp6sAQO7kKplfs2aN1q9fb34xkKTq1atr5syZDKgDAEABQXsNAEDh5ZCbhdLT0+Xs7Jyp3NnZWenp6bcdFAAAuH201wAAFF65SuZbtmypIUOG6PTp02bZqVOn9Nxzz6lVq1Z5FhwAAMg92msAAAqvXF1m/8477+jBBx9UcHCwAgMDJUknT55UzZo1tXDhwjwNECjsuFcQQH6hvQYAoPDKVTIfGBioH374QevXr9dvv/0mSapWrZrCw8PzNDgAAJB7tNcFD08cAQDklVu6zH7jxo2qXr26kpKSZLFY1Lp1aw0ePFiDBw9W/fr1VaNGDW3bti2/YgUAADlAew0AQOF3S8n8tGnT1K9fP3l6emaa5+XlpQEDBujNN9/Ms+AAAMCto70GAKDwu6XL7Pfv368pU6ZkO79NmzZ6/fXXbzsoAAVHTi4J5X5+oGChvQYAoPC7pZ75+Pj4LB9xk8HJyUnnzp277aAAAEDu0V4DAFD43VIyX65cOR04cCDb+T/99JP8/f1vOygAAJB7tNcAABR+t5TMt2/fXmPGjFFKSkqmef/++6/GjRunBx54IM+CAwAAt472GgCAwu+W7pl/6aWX9Pnnn+vuu+9WVFSUqlSpIkn67bffNHPmTKWlpenFF1/Ml0ABAEDO0F4DAFD43VIy7+vrq++++04DBw5UdHS0DMOQJFksFkVERGjmzJny9fXNl0DtEc+SBQDYAu01AACF3y0l85IUFBSkVatW6Z9//tHhw4dlGIbuuusulSxZMj/iAwAAuUB7DQBA4XbLyXyGkiVLqn79+nkZCwAAyGO01wAAFE63NAAeAAAAAACwPZJ5AAAAAADsTK4vsweADDkd7PHY5A75HAkAAABQNNAzDwAAAACAnSGZBwAAAADAzpDMAwAAAABgZ0jmAQAAAACwMwyAB7uWk4HXGHQNAAAAQGFDzzwAAAAAAHaGZB4AAAAAADtDMg8AAPLU5MmTZbFYNHToULMsJSVFgwYNUunSpeXh4aEuXbooPj7earkTJ06oQ4cOKl68uHx8fPT888/r6tWrdzh6AADsA/fMo0DKyb3wAICCZ/fu3XrvvfdUq1Ytq/LnnntOX3/9tZYuXSovLy9FRUXp4Ycf1rfffitJSktLU4cOHeTn56fvvvtOZ86cUe/eveXs7KxXX33VFrsCAECBRs88AADIExcvXlTPnj31/vvvq2TJkmZ5YmKiPvjgA7355ptq2bKl6tatq7lz5+q7777Tzp07JUnffPONDh48qIULF6pOnTpq166dXn75Zc2cOVOXL1+21S4BAFBgkcwDAIA8MWjQIHXo0EHh4eFW5Xv37tWVK1esyqtWraoKFSpox44dkqQdO3bonnvuka+vr1knIiJCSUlJ+uWXX7LcXmpqqpKSkqxeAAAUFVxmDwAAbtuSJUv0ww8/aPfu3ZnmxcXFycXFRd7e3lblvr6+iouLM+tcm8hnzM+Yl5WYmBhNmDAhD6IHAMD+0DMPAABuy8mTJzVkyBAtWrRIbm5ud2y70dHRSkxMNF8nT568Y9sGAMDWSOYBAMBt2bt3r86ePav77rtPTk5OcnJy0pYtWzR9+nQ5OTnJ19dXly9fVkJCgtVy8fHx8vPzkyT5+fllGt0+YzqjzvVcXV3l6elp9QIAoKiwaTIfExOj+vXrq0SJEvLx8VHnzp0VGxtrVScnj7IBAAC206pVK/3888/at2+f+apXr5569uxp/t/Z2VkbNmwwl4mNjdWJEycUFhYmSQoLC9PPP/+ss2fPmnXWrVsnT09PVa9e/Y7vEwAABZ1N75nfsmWLBg0apPr16+vq1at64YUX1KZNGx08eFDu7u6Sbv4oGwAAYFslSpRQzZo1rcrc3d1VunRps7xv374aNmyYSpUqJU9PTw0ePFhhYWFq2LChJKlNmzaqXr26Hn/8cU2dOlVxcXF66aWXNGjQILm6ut7xfQIAoKCzaTK/Zs0aq+l58+bJx8dHe/fuVdOmTc1H2SxevFgtW7aUJM2dO1fVqlXTzp07zS8AAACgYHvrrbfk4OCgLl26KDU1VREREXr33XfN+Y6Ojlq5cqUGDhyosLAwubu7KzIyUhMnTrRh1AAAFFwFajT7xMRESVKpUqUk3fxRNlkl86mpqUpNTTWneUwNAAB33ubNm62m3dzcNHPmTM2cOTPbZYKCgrRq1ap8jgwAgMKhwAyAl56erqFDh6pRo0bmJXk5eZTN9WJiYuTl5WW+AgMD8zt0AAAAAADuqAKTzA8aNEgHDhzQkiVLbms9PKYGAAAAAFDYFYjL7KOiorRy5Upt3bpV5cuXN8v9/PzMR9lc2zt/7aNsrufq6spAOQAAAACAQs2mPfOGYSgqKkrLly/Xxo0bFRISYjW/bt26N32UDQAAAAAARY1Ne+YHDRqkxYsX64svvlCJEiXM++C9vLxUrFgxeXl53fRRNgAAAAAAFDU2TeZnzZolSWrevLlV+dy5c9WnTx9JN3+UDVBUBI/+2tYhAAAAACggbJrMG4Zx0zo5eZQNAAAAAABFSYEZzR4AAAAAAOQMyTwAAAAAAHamQDyaDkUH930DAAAAwO2jZx4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM6QzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AzJPAAAAAAAdoZkHgAAAAAAO+Nk6wCAgiJ49Nc5qndscod8jgQAAAAAboyeeQAAAAAA7Aw98wAAACjwuIIOAKzRMw8AAAAAgJ0hmQcAAAAAwM6QzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AyPpsuFnD4aBYUTj8YBAAAAYGv0zAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AwD4AH5hIESAQAAAOQXeuYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAALctJiZG9evXV4kSJeTj46POnTsrNjbWqk5KSooGDRqk0qVLy8PDQ126dFF8fLxVnRMnTqhDhw4qXry4fHx89Pzzz+vq1at3clcAALALJPMAAOC2bdmyRYMGDdLOnTu1bt06XblyRW3atFFycrJZ57nnntNXX32lpUuXasuWLTp9+rQefvhhc35aWpo6dOigy5cv67vvvtP8+fM1b948jR071ha7BABAgeZk6wAAAID9W7NmjdX0vHnz5OPjo71796pp06ZKTEzUBx98oMWLF6tly5aSpLlz56patWrauXOnGjZsqG+++UYHDx7U+vXr5evrqzp16ujll1/WqFGjNH78eLm4uNhi1wAAKJBsmsxv3bpVr732mvbu3aszZ85o+fLl6ty5sznfMAyNGzdO77//vhISEtSoUSPNmjVLd911l+2CBgAAN5WYmChJKlWqlCRp7969unLlisLDw806VatWVYUKFbRjxw41bNhQO3bs0D333CNfX1+zTkREhAYOHKhffvlF9957r9U2UlNTlZqaak4nJSXl5y7dUPDor222bQBA0WTTy+yTk5NVu3ZtzZw5M8v5U6dO1fTp0zV79mzt2rVL7u7uioiIUEpKyh2OFAAA5FR6erqGDh2qRo0aqWbNmpKkuLg4ubi4yNvb26qur6+v4uLizDrXJvIZ8zPmXS8mJkZeXl7mKzAwMB/2BgCAgsmmPfPt2rVTu3btspxnGIamTZuml156SZ06dZIkLViwQL6+vlqxYoV69OhxJ0MFAAA5NGjQIB04cEDbt2/P1+1ER0dr2LBh5nRSUhIJPQCgyCiwA+AdPXpUcXFxVpfjeXl5KTQ0VDt27Mh2udTUVCUlJVm9AADAnREVFaWVK1dq06ZNKl++vFnu5+eny5cvKyEhwap+fHy8/Pz8zDrXj26fMZ1R51qurq7y9PS0egEAUFQU2AHwMi6ny+pyu6wutcsQExOjCRMm5GtssC/cxwgA+c8wDA0ePFjLly/X5s2bFRISYjW/bt26cnZ21oYNG9SlSxdJUmxsrE6cOKGwsDBJUlhYmF555RWdPXtWPj4+kqR169bJ09NT1atXv7M7BABAAVdge+ZzKzo6WomJiebr5MmTtg4JAIBCb9CgQVq4cKEWL16sEiVKKC4uTnFxcfr3338l/Xd1Xd++fTVs2DBt2rRJe/fu1RNPPKGwsDA1bNhQktSmTRtVr15djz/+uPbv36+1a9fqpZde0qBBg+Tq6mrL3QMAoMApsD3zGZfTxcfHy9/f3yyPj49XnTp1sl3O1dWVBh8AgDts1qxZkqTmzZtblc+dO1d9+vSRJL311ltycHBQly5dlJqaqoiICL377rtmXUdHR61cuVIDBw5UWFiY3N3dFRkZqYkTJ96p3QAAwG4U2GQ+JCREfn5+2rBhg5m8JyUladeuXRo4cKBtgwMAAFYMw7hpHTc3N82cOTPbp9hIUlBQkFatWpWXoQEAUCjZNJm/ePGiDh8+bE4fPXpU+/btU6lSpVShQgUNHTpUkyZN0l133aWQkBCNGTNGAQEBVs+iBwAAAACgqLFpMr9nzx61aNHCnM54vExkZKTmzZunkSNHKjk5Wf3791dCQoIaN26sNWvWyM3NzVYhAwAAAABgczZN5ps3b37Dy/IsFosmTpzIvXIAAAAAAFyj0I1mDwAAAABAYUcyDwAAAACAnSGZBwAAAADAzhTYR9MBKLqCR3+dp+s7NrlDnq4PAAAAsDV65gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AzJPAAAAAAAdoYB8ADg/+R04D0G1AMAAICt0TMPAAAAAICdoWceAAAAhQZXWQEoKuiZBwAAAADAztAzD+COyWlvSWHZLgAAAJBf6JkHAAAAAMDOkMwDAAAAAGBnSOYBAAAAALAzJPMAAAAAANgZknkAAAAAAOwMyTwAAAAAAHaGZB4AAAAAADtDMg8AAAAAgJ0hmQcAAAAAwM442ToAACjqgkd/naN6xyZ3yOdIAAAAYC/omQcAAAAAwM6QzAMAAAAAYGdI5gEAAAAAsDMk8wAAAAAA2BmSeQAAAAAA7AzJPAAAAAAAdoZkHgAAAAAAO0MyDwAAAACAnXGydQAAgJwJHv31Tescm9zhjm8zP7ZbkHFMipacvt8AANxp9MwDAAAAAGBn6JkHAABAkcNVNgDsHT3zAAAAAADYGZJ5AAAAAADsDJfZA8AtKsiXZjJYFwAUbAW5DQFgX+wimZ85c6Zee+01xcXFqXbt2poxY4YaNGhg67AAAEA+oN1HQULyDaCgKvDJ/CeffKJhw4Zp9uzZCg0N1bRp0xQREaHY2Fj5+PjYOjwAAJCHaPeB/9jicaQA7EuBT+bffPNN9evXT0888YQkafbs2fr666/14YcfavTo0TaODgAA5CXafdgrW9zmxFUDQNFWoJP5y5cva+/evYqOjjbLHBwcFB4erh07dmS5TGpqqlJTU83pxMRESVJSUlKexZWeeinP1gWg8Mrp505h+EzJy8/Ygi6n71deHpOMdRmGkWfrLIhutd2nzQdypsJzS3NU78CEiHyO5M6oOW5tjuoV5P0tDPtQWNjivchpu1+gk/m//vpLaWlp8vX1tSr39fXVb7/9luUyMTExmjBhQqbywMDAfIkRALLjNc3WEdw5RWlfcyo/jsmFCxfk5eWV9ysuIG613afNB/JWUfssLwz7Wxj2obCwRbtfoJP53IiOjtawYcPM6fT0dJ0/f16lS5eWxWLJ8+0lJSUpMDBQJ0+elKenZ56vvzDj2N0ejl/ucexyj2OXe7dz7AzD0IULFxQQEJBP0dmnO93m50ZR+pthXwunorSvUtHaX/a14Mppu1+gk/kyZcrI0dFR8fHxVuXx8fHy8/PLchlXV1e5urpalXl7e+dXiCZPT0+7ODEKIo7d7eH45R7HLvc4drmX22NXmHvkM9xqu2+rNj83itLfDPtaOBWlfZWK1v6yrwVTTtp9hzsQR665uLiobt262rBhg1mWnp6uDRs2KCwszIaRAQCAvEa7DwBAzhXonnlJGjZsmCIjI1WvXj01aNBA06ZNU3JysjnKLQAAKDxo9wEAyJkCn8w/8sgjOnfunMaOHau4uDjVqVNHa9asyTQ4jq24urpq3LhxmS7zw81x7G4Pxy/3OHa5x7HLPY5dzhT0dv9WFaX3nX0tnIrSvkpFa3/ZV/tnMQr7c24AAAAAAChkCvQ98wAAAAAAIDOSeQAAAAAA7AzJPAAAAAAAdoZkHgAAAAAAO0Myn0Nbt25Vx44dFRAQIIvFohUrVljNNwxDY8eOlb+/v4oVK6bw8HAdOnTINsEWMDc7dn369JHFYrF6tW3b1jbBFjAxMTGqX7++SpQoIR8fH3Xu3FmxsbFWdVJSUjRo0CCVLl1aHh4e6tKli+Lj420UccGRk2PXvHnzTOfe008/baOIC5ZZs2apVq1a8vT0lKenp8LCwrR69WpzPudd9m527DjvCqei8j2hKLVLRflzcPLkybJYLBo6dKhZVpj2d/z48Zk+h6tWrWrOL0z7KkmnTp1Sr169VLp0aRUrVkz33HOP9uzZY84vLJ9PwcHBmd5Xi8WiQYMGSSp876tEMp9jycnJql27tmbOnJnl/KlTp2r69OmaPXu2du3aJXd3d0VERCglJeUOR1rw3OzYSVLbtm115swZ8/Xxxx/fwQgLri1btmjQoEHauXOn1q1bpytXrqhNmzZKTk426zz33HP66quvtHTpUm3ZskWnT5/Www8/bMOoC4acHDtJ6tevn9W5N3XqVBtFXLCUL19ekydP1t69e7Vnzx61bNlSnTp10i+//CKJ8+5GbnbsJM67wqiofE8oSu1SUf0c3L17t9577z3VqlXLqryw7W+NGjWsPoe3b99uzitM+/rPP/+oUaNGcnZ21urVq3Xw4EG98cYbKlmypFmnsHw+7d692+o9XbdunSSpW7dukgrX+2oycMskGcuXLzen09PTDT8/P+O1114zyxISEgxXV1fj448/tkGEBdf1x84wDCMyMtLo1KmTTeKxN2fPnjUkGVu2bDEM47/zzNnZ2Vi6dKlZ59dffzUkGTt27LBVmAXS9cfOMAyjWbNmxpAhQ2wXlJ0pWbKk8b///Y/zLhcyjp1hcN4VBUXpe0JRa5cK++fghQsXjLvuustYt26d1WdVYdvfcePGGbVr185yXmHb11GjRhmNGzfOdn5h/nwaMmSIUalSJSM9Pb3Qva8Z6JnPA0ePHlVcXJzCw8PNMi8vL4WGhmrHjh02jMx+bN68WT4+PqpSpYoGDhyov//+29YhFUiJiYmSpFKlSkmS9u7dqytXrlide1WrVlWFChU4965z/bHLsGjRIpUpU0Y1a9ZUdHS0Ll26ZIvwCrS0tDQtWbJEycnJCgsL47y7Bdcfuwycd0VLYf6eUFTapaLyOTho0CB16NDBar+kwvm+Hjp0SAEBAapYsaJ69uypEydOSCp8+/rll1+qXr166tatm3x8fHTvvffq/fffN+cX1s+ny5cva+HChXryySdlsVgK3fuawcnWARQGcXFxkiRfX1+rcl9fX3Meste2bVs9/PDDCgkJ0ZEjR/TCCy+oXbt22rFjhxwdHW0dXoGRnp6uoUOHqlGjRqpZs6ak/849FxcXeXt7W9Xl3LOW1bGTpMcee0xBQUEKCAjQTz/9pFGjRik2Nlaff/65DaMtOH7++WeFhYUpJSVFHh4eWr58uapXr659+/Zx3t1EdsdO4rwrigrr94Si0C4Vpc/BJUuW6IcfftDu3bszzSts72toaKjmzZunKlWq6MyZM5owYYKaNGmiAwcOFLp9/eOPPzRr1iwNGzZML7zwgnbv3q1nn31WLi4uioyMLLSfTytWrFBCQoL69OkjqfCdwxlI5mFzPXr0MP9/zz33qFatWqpUqZI2b96sVq1a2TCygmXQoEE6cOCA1T1dyJnsjl3//v3N/99zzz3y9/dXq1atdOTIEVWqVOlOh1ngVKlSRfv27VNiYqKWLVumyMhIbdmyxdZh2YXsjl316tU571BoFIV2qah8Dp48eVJDhgzRunXr5ObmZutw8l27du3M/9eqVUuhoaEKCgrSp59+qmLFitkwsryXnp6uevXq6dVXX5Uk3XvvvTpw4IBmz56tyMhIG0eXfz744AO1a9dOAQEBtg4lX3GZfR7w8/OTpEyjIcbHx5vzkHMVK1ZUmTJldPjwYVuHUmBERUVp5cqV2rRpk8qXL2+W+/n56fLly0pISLCqz7n3/2V37LISGhoqSZx7/8fFxUWVK1dW3bp1FRMTo9q1a+vtt9/mvMuB7I5dVjjvCr/C+D2hqLRLReVzcO/evTp79qzuu+8+OTk5ycnJSVu2bNH06dPl5OQkX1/fQrW/1/P29tbdd9+tw4cPF7r31t/f37wyLEO1atXM2woK4+fT8ePHtX79ej311FNmWWF7XzOQzOeBkJAQ+fn5acOGDWZZUlKSdu3aZXWPJHLmzz//1N9//y1/f39bh2JzhmEoKipKy5cv18aNGxUSEmI1v27dunJ2drY692JjY3XixIkif+7d7NhlZd++fZLEuZeN9PR0paamct7lQsaxywrnXeFXmL4nFPV2qbB+DrZq1Uo///yz9u3bZ77q1aunnj17mv8vTPt7vYsXL+rIkSPy9/cvdO9to0aNMj0+8vfff1dQUJCkwvX5lGHu3Lny8fFRhw4dzLLC9r6abDwAn924cOGC8eOPPxo//vijIcl48803jR9//NE4fvy4YRiGMXnyZMPb29v44osvjJ9++sno1KmTERISYvz77782jtz2bnTsLly4YIwYMcLYsWOHcfToUWP9+vXGfffdZ9x1111GSkqKrUO3uYEDBxpeXl7G5s2bjTNnzpivS5cumXWefvppo0KFCsbGjRuNPXv2GGFhYUZYWJgNoy4YbnbsDh8+bEycONHYs2ePcfToUeOLL74wKlasaDRt2tTGkRcMo0ePNrZs2WIcPXrU+Omnn4zRo0cbFovF+OabbwzD4Ly7kRsdO867wquofE8oSu1SUf8cvP7JG4Vpf4cPH25s3rzZOHr0qPHtt98a4eHhRpkyZYyzZ88ahlG49vX77783nJycjFdeecU4dOiQsWjRIqN48eLGwoULzTqF5fPJMAwjLS3NqFChgjFq1KhM8wrT+5qBZD6HNm3aZEjK9IqMjDQM47/HOowZM8bw9fU1XF1djVatWhmxsbG2DbqAuNGxu3TpktGmTRujbNmyhrOzsxEUFGT069fPiIuLs3XYBUJWx02SMXfuXLPOv//+azzzzDNGyZIljeLFixsPPfSQcebMGdsFXUDc7NidOHHCaNq0qVGqVCnD1dXVqFy5svH8888biYmJtg28gHjyySeNoKAgw8XFxShbtqzRqlUr8wusYXDe3ciNjh3nXeFVVL4nFKV2qah/Dl6fzBem/X3kkUcMf39/w8XFxShXrpzxyCOPGIcPHzbnF6Z9NQzD+Oqrr4yaNWsarq6uRtWqVY05c+ZYzS8sn0+GYRhr1641JGUZf2F7Xw3DMCyGYRj52vUPAAAAAADyFPfMAwAAAABgZ0jmAQAAAACwMyTzAAAAAADYGZJ5AAAAAADsDMk8AAAAAAB2hmQeAAAAAAA7QzIPAAAAAICdIZkHAAAAAMDOkMwDAAAAAGBnSOYB5EifPn1ksVhksVjk7OyskJAQjRw5UikpKbYODQAA5CHafMA+ONk6AAD2o23btpo7d66uXLmivXv3KjIyUhaLRVOmTLF1aAAAIA/R5gMFHz3zAHLM1dVVfn5+CgwMVOfOnRUeHq5169aZ87/77jvVqVNHbm5uqlevnlasWCGLxaJ9+/bZLmgAAHDLaPOBgo+eeQC5cuDAAX333XcKCgqSJCUlJaljx45q3769Fi9erOPHj2vo0KG2DRIAANw22nygYCKZB5BjK1eulIeHh65evarU1FQ5ODjonXfekSQtXrxYFotF77//vtzc3FS9enWdOnVK/fr1s3HUAADgVtHmAwUfyTyAHGvRooVmzZql5ORkvfXWW3JyclKXLl0kSbGxsapVq5bc3NzM+g0aNLBVqAAA4DbQ5gMFH/fMA8gxd3d3Va5cWbVr19aHH36oXbt26YMPPrB1WAAAII/R5gMFH8k8gFxxcHDQCy+8oJdeekn//vuvqlSpop9//lmpqalmnd27d9swQgAAkBdo84GCiWQeQK5169ZNjo6Omjlzph577DGlp6erf//++vXXX7V27Vq9/vrrkiSLxWLjSAEAwO2gzQcKHpJ5ALnm5OSkqKgoTZ06VY6Ojvrqq6+0b98+1alTRy+++KLGjh0rSVb31AEAAPtDmw8UPBbDMAxbBwGgcFq0aJGeeOIJJSYmqlixYrYOBwAA5BPafODOYzR7AHlmwYIFqlixosqVK6f9+/dr1KhR6t69O406AACFDG0+YHsk8wDyTFxcnMaOHau4uDj5+/urW7dueuWVV2wdFgAAyGO0+YDtcZk9AAAAAAB2hgHwAAAAAACwMyTzAAAAAADYGZJ5AAAAAADsDMk8AAAAAAB2hmQeAAAAAAA7QzIPAAAAAICdIZkHAAAAAMDOkMwDAAAAAGBn/h/Sxlc7wqE5ZwAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":23},{"cell_type":"markdown","source":"# Training ensemble models","metadata":{}},{"cell_type":"code","source":"use_models = ['lgbm', 'xgb']     \nensemble_models = ['lgbm', 'xgb']   \n\n\n\ndef kfold_train_ensemble(\n    Xsel_train: Dict[str, np.ndarray],\n    y_imputed: np.ndarray,\n    target_names: List[str],\n    n_splits: int = 5,\n    random_state: int = 42,\n    use_models: List[str] = None,                 # e.g. ['lgbm','xgb','rf','et','enet']\n    use_mae_objective_for: Tuple[str, ...] = (\"Tg\",\"Rg\")\n):\n    \"\"\"\n    K-fold OOF training per target for multiple models.\n    NO submission logic here.\n\n    Returns:\n      results:     {model_name: {'per_target': {t: mae}, 'mean_mae': float},\n                    'ensemble': {...}}   # simple unweighted avg over model OOFs\n      oof_preds:   {model_name: (n_train, K) array}\n      fold_models: {model_name: {tname: [fold_model, ...]}}\n                   For 'enet', each fold_model is ('scaler', scaler, model)\n    \"\"\"\n    n, K = y_imputed.shape\n    assert K == len(target_names)\n\n    # Folds\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n    folds = list(kf.split(np.arange(n)))\n\n    # Specs\n    specs = _make_model_specs(random_state)\n    if use_models is not None:\n        specs = [(n, b) for (n, b) in specs if n in use_models]\n    model_names = [n for (n, _) in specs]\n    print(\"Models:\", model_names)\n\n    # Storage\n    oof_preds = {m: np.full((n, K), np.nan) for m in model_names}\n    fold_models = {m: {t: [] for t in target_names} for m in model_names}\n\n    # Train\n    for model_name, builder in specs:\n        print(f\"\\n==== Training: {model_name} ====\")\n        for j, tname in enumerate(target_names):\n            X = Xsel_train[tname]\n            y = y_imputed[:, j]\n\n            for fold_id, (tr_idx, va_idx) in enumerate(folds):\n                X_tr, X_va = X[tr_idx], X[va_idx]\n                y_tr, y_va = y[tr_idx], y[va_idx]\n\n                try:\n                    model = builder()\n                    # LightGBM/XGBoost: early stopping + MAE objective for Tg/Rg\n                    if model_name in (\"lgbm\",\"xgb\"):\n                        if (model_name == \"lgbm\") and (tname in use_mae_objective_for):\n                            model.set_params(objective=\"mae\")\n                            eval_metric = \"l1\"     # LightGBM name for MAE\n                        elif (model_name == \"xgb\") and (tname in use_mae_objective_for):\n                            model.set_params(objective=\"reg:absoluteerror\")\n                            eval_metric = \"mae\"\n                        else:\n                            eval_metric = \"l1\" if model_name == \"lgbm\" else \"mae\"\n                        \n                        if model_name == \"lgbm\":\n                            import lightgbm as lgb\n                            # silence logs; some versions only respect 'verbosity'\n                            model.set_params(verbosity=-1)\n                            try:\n                                # Newer API with callbacks\n                                model.fit(\n                                    X_tr, y_tr,\n                                    eval_set=[(X_va, y_va)],\n                                    eval_metric=eval_metric,\n                                    callbacks=[\n                                        lgb.early_stopping(stopping_rounds=200, verbose=False),\n                                        lgb.log_evaluation(0)\n                                    ],\n                                )\n                            except TypeError:\n                                # Older API fallback (no callbacks kw)\n                                model.fit(\n                                    X_tr, y_tr,\n                                    eval_set=[(X_va, y_va)],\n                                    eval_metric=eval_metric,\n                                    early_stopping_rounds=200,\n                                    verbose=False,\n                                )\n                            # Brief, useful fold log\n                            best_it = getattr(model, \"best_iteration_\", None)\n                            best_val = None\n                            try:\n                                bs = getattr(model, \"best_score_\", None)\n                                if isinstance(bs, dict):\n                                    vkey = \"valid_0\" if \"valid_0\" in bs else next(iter(bs))\n                                    mkey = next(iter(bs[vkey]))\n                                    best_val = bs[vkey][mkey]\n                            except Exception:\n                                pass\n                            print(f\"[lgbm | {tname} | fold {fold_id}] best_it={best_it} \"\n                                  f\"best_{eval_metric}={best_val:.4f}\" if best_val is not None else\n                                  f\"[lgbm | {tname} | fold {fold_id}] best_it={best_it}\")\n                            y_hat = model.predict(X_va)\n                            fold_models[model_name][tname].append(model)\n                        \n                        else:  # XGBoost\n                            try:\n                                from xgboost.callback import EarlyStopping\n                                model.fit(\n                                    X_tr, y_tr,\n                                    eval_set=[(X_va, y_va)],\n                                    eval_metric=eval_metric,\n                                    callbacks=[EarlyStopping(rounds=200, save_best=True, maximize=False)],\n                                    verbose=False,\n                                )\n                            except Exception:\n                                model.fit(\n                                    X_tr, y_tr,\n                                    eval_set=[(X_va, y_va)],\n                                    eval_metric=eval_metric,\n                                    early_stopping_rounds=200,\n                                    verbose=False,\n                                )\n                            best_it = getattr(model, \"best_iteration\", None)\n                            print(f\"[xgb  | {tname} | fold {fold_id}] best_it={best_it}\")\n                            y_hat = model.predict(X_va)\n                            fold_models[model_name][tname].append(model)\n\n                    oof_preds[model_name][va_idx, j] = y_hat\n\n                except Exception as e:\n                    print(f\"[{model_name} | {tname} | fold {fold_id}] failed: {e}\")\n\n    # OOF MAEs per model\n    results = {}\n    for m in model_names:\n        per_t = {}\n        for j, tname in enumerate(target_names):\n            y_true = y_imputed[:, j]\n            y_hat = oof_preds[m][:, j]\n            mask = np.isfinite(y_hat)\n            mae = mean_absolute_error(y_true[mask], y_hat[mask]) if mask.sum() > 0 else np.nan\n            per_t[tname] = float(mae)\n        mean_mae = float(np.nanmean(list(per_t.values())))\n        results[m] = {\"per_target\": per_t, \"mean_mae\": mean_mae}\n        line = \" | \".join([f\"{t}:{per_t[t]:.4f}\" for t in target_names])\n        print(f\"{m} OOF → {line} | mean={mean_mae:.4f}\")\n\n    # Simple ensemble of OOF (avg across available models)\n    oof_ens = np.zeros((n, K), dtype=float)\n    cnt = 0\n    for m in model_names:\n        if np.isfinite(oof_preds[m]).any():\n            oof_ens += np.nan_to_num(oof_preds[m], nan=0.0)\n            cnt += 1\n    if cnt > 0:\n        oof_ens /= cnt\n\n    per_t = {}\n    for j, tname in enumerate(target_names):\n        y_true = y_imputed[:, j]\n        y_hat = oof_ens[:, j]\n        mask = np.isfinite(y_hat)\n        mae = mean_absolute_error(y_true[mask], y_hat[mask]) if mask.sum() > 0 else np.nan\n        per_t[tname] = float(mae)\n    mean_mae = float(np.nanmean(list(per_t.values())))\n    results[\"ensemble\"] = {\"per_target\": per_t, \"mean_mae\": mean_mae}\n    line = \" | \".join([f\"{t}:{per_t[t]:.4f}\" for t in target_names])\n    print(f\"\\nEnsemble OOF → {line} | mean={mean_mae:.4f}\")\n\n    return results, oof_preds, fold_models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:57:22.910892Z","iopub.execute_input":"2025-07-31T00:57:22.911206Z","iopub.status.idle":"2025-07-31T00:57:22.931486Z","shell.execute_reply.started":"2025-07-31T00:57:22.911178Z","shell.execute_reply":"2025-07-31T00:57:22.930667Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"results, oof_preds, fold_models = kfold_train_ensemble(\n    Xsel_train=Xsel_train,\n    y_imputed=y_imputed,\n    target_names=TARGETS,\n    n_splits=5,\n    random_state=42,\n    use_models=use_models,\n    use_mae_objective_for=(\"Tg\",\"Rg\")\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T00:57:22.932326Z","iopub.execute_input":"2025-07-31T00:57:22.932834Z","iopub.status.idle":"2025-07-31T01:06:49.689762Z","shell.execute_reply.started":"2025-07-31T00:57:22.932815Z","shell.execute_reply":"2025-07-31T01:06:49.689035Z"}},"outputs":[{"name":"stdout","text":"Models: ['lgbm', 'xgb']\n\n==== Training: lgbm ====\n[lgbm | Tg | fold 0] best_it=1200 best_l1=14.1116\n[lgbm | Tg | fold 1] best_it=1200 best_l1=15.2126\n[lgbm | Tg | fold 2] best_it=1200 best_l1=15.7294\n[lgbm | Tg | fold 3] best_it=1200 best_l1=15.1016\n[lgbm | Tg | fold 4] best_it=1200 best_l1=14.5540\n[lgbm | FFV | fold 0] best_it=478 best_l1=0.0067\n[lgbm | FFV | fold 1] best_it=1200 best_l1=0.0074\n[lgbm | FFV | fold 2] best_it=948 best_l1=0.0065\n[lgbm | FFV | fold 3] best_it=1193 best_l1=0.0067\n[lgbm | FFV | fold 4] best_it=1127 best_l1=0.0064\n[lgbm | Tc | fold 0] best_it=1200 best_l1=0.0562\n[lgbm | Tc | fold 1] best_it=1200 best_l1=0.0554\n[lgbm | Tc | fold 2] best_it=1200 best_l1=0.0544\n[lgbm | Tc | fold 3] best_it=1200 best_l1=0.0547\n[lgbm | Tc | fold 4] best_it=1185 best_l1=0.0557\n[lgbm | Density | fold 0] best_it=1198 best_l1=0.0782\n[lgbm | Density | fold 1] best_it=1199 best_l1=0.0828\n[lgbm | Density | fold 2] best_it=1200 best_l1=0.0812\n[lgbm | Density | fold 3] best_it=1197 best_l1=0.0832\n[lgbm | Density | fold 4] best_it=1199 best_l1=0.0795\n[lgbm | Rg | fold 0] best_it=1200 best_l1=0.8030\n[lgbm | Rg | fold 1] best_it=1200 best_l1=0.7910\n[lgbm | Rg | fold 2] best_it=1200 best_l1=0.8039\n[lgbm | Rg | fold 3] best_it=1200 best_l1=0.8392\n[lgbm | Rg | fold 4] best_it=1200 best_l1=0.7716\n\n==== Training: xgb ====\n[xgb  | Tg | fold 0] best_it=1199\n[xgb  | Tg | fold 1] best_it=1199\n[xgb  | Tg | fold 2] best_it=1199\n[xgb  | Tg | fold 3] best_it=1199\n[xgb  | Tg | fold 4] best_it=1197\n[xgb  | FFV | fold 0] best_it=1194\n[xgb  | FFV | fold 1] best_it=1195\n[xgb  | FFV | fold 2] best_it=1193\n[xgb  | FFV | fold 3] best_it=1199\n[xgb  | FFV | fold 4] best_it=1199\n[xgb  | Tc | fold 0] best_it=1199\n[xgb  | Tc | fold 1] best_it=1199\n[xgb  | Tc | fold 2] best_it=1198\n[xgb  | Tc | fold 3] best_it=1199\n[xgb  | Tc | fold 4] best_it=1199\n[xgb  | Density | fold 0] best_it=1195\n[xgb  | Density | fold 1] best_it=1196\n[xgb  | Density | fold 2] best_it=1199\n[xgb  | Density | fold 3] best_it=1197\n[xgb  | Density | fold 4] best_it=1198\n[xgb  | Rg | fold 0] best_it=1198\n[xgb  | Rg | fold 1] best_it=1199\n[xgb  | Rg | fold 2] best_it=1196\n[xgb  | Rg | fold 3] best_it=1199\n[xgb  | Rg | fold 4] best_it=1199\nlgbm OOF → Tg:14.9419 | FFV:0.0067 | Tc:0.0553 | Density:0.0810 | Rg:0.8017 | mean=3.1773\nxgb OOF → Tg:16.2336 | FFV:0.0063 | Tc:0.0544 | Density:0.0805 | Rg:0.8474 | mean=3.4444\n\nEnsemble OOF → Tg:15.3048 | FFV:0.0064 | Tc:0.0543 | Density:0.0797 | Rg:0.8107 | mean=3.2512\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"# Making submission","metadata":{}},{"cell_type":"code","source":"def predict_and_make_submission(\n    fold_models: Dict[str, Dict[str, List[object]]],\n    Xsel_test: Dict[str, np.ndarray],\n    target_names: List[str],\n    test_df: pd.DataFrame,\n    models_to_use: List[str] = (\"lgbm\",\"xgb\"),   # pick your two-model average here\n    weights: Dict[str, float] = None,            # optional model weights, e.g. {'lgbm':0.6,'xgb':0.4}\n    path: str = \"submission.csv\"\n):\n    \"\"\"\n    Use trained fold models to predict test set and write submission.csv.\n    Averages over folds per model, then over models.\n\n    fold_models: {model_name: {tname: [fold_model, ...]}}\n                 For 'enet', each item is ('scaler', scaler, model)\n    \"\"\"\n    n_test = next(iter(Xsel_test.values())).shape[0]\n    K = len(target_names)\n\n    # per-model predictions\n    test_preds_per_model = {m: np.zeros((n_test, K), dtype=float) for m in models_to_use}\n    used_models = []\n\n    for m in models_to_use:\n        if m not in fold_models:\n            print(f\"[WARN] Model {m} not in fold_models, skipping.\")\n            continue\n        used_models.append(m)\n\n        for j, tname in enumerate(target_names):\n            X_te = Xsel_test[tname]\n            folds = fold_models[m][tname]\n            if len(folds) == 0:\n                print(f\"[WARN] No fold models for ({m}, {tname}), skipping.\")\n                continue\n\n            # average across folds\n            fold_sum = np.zeros(n_test, dtype=float)\n            for fobj in folds:\n                if m == \"enet\":\n                    _, scaler, mdl = fobj\n                    y_te = mdl.predict(scaler.transform(X_te))\n                else:\n                    mdl = fobj\n                    y_te = mdl.predict(X_te)\n                fold_sum += y_te\n            test_preds_per_model[m][:, j] = fold_sum / len(folds)\n\n    # combine across models\n    if weights is None:\n        # simple mean across used models\n        denom = max(1, len(used_models))\n        final_test = sum(test_preds_per_model[m] for m in used_models) / denom\n    else:\n        # weighted average\n        sw = sum(weights.get(m, 0.0) for m in used_models)\n        assert sw > 0, \"Sum of weights must be > 0\"\n        final_test = sum(weights.get(m, 0.0) * test_preds_per_model[m]\n                         for m in used_models) / sw\n\n    # write submission\n    sub = pd.DataFrame(final_test, columns=target_names)\n    sub.insert(0, \"id\", test_df[\"id\"].values)\n    sub.to_csv(path, index=False)\n    print(f\"Saved submission to {path}\")\n\n    return sub, test_preds_per_model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T01:11:19.958334Z","iopub.execute_input":"2025-07-31T01:11:19.959023Z","iopub.status.idle":"2025-07-31T01:11:19.969903Z","shell.execute_reply.started":"2025-07-31T01:11:19.958958Z","shell.execute_reply":"2025-07-31T01:11:19.969290Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"sub, test_preds_per_model = predict_and_make_submission(\n    fold_models=fold_models,\n    Xsel_test=Xsel_test,\n    target_names=TARGETS,\n    test_df=test,\n    models_to_use=[\"lgbm\",\"xgb\"],  # your chosen pair\n    # weights={\"lgbm\":0.5, \"xgb\":0.5},  # optional\n    path=\"submission.csv\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-31T01:11:24.202779Z","iopub.execute_input":"2025-07-31T01:11:24.203113Z","iopub.status.idle":"2025-07-31T01:11:24.297996Z","shell.execute_reply.started":"2025-07-31T01:11:24.203091Z","shell.execute_reply":"2025-07-31T01:11:24.296328Z"}},"outputs":[{"name":"stdout","text":"Saved submission to submission.csv\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"display(submission.csv)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}