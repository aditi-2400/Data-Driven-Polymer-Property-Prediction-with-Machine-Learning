{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74608,"databundleVersionId":12966160,"sourceType":"competition"},{"sourceId":12189904,"sourceType":"datasetVersion","datasetId":7678100}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:57:29.308393Z","iopub.execute_input":"2025-08-25T21:57:29.309092Z","iopub.status.idle":"2025-08-25T21:57:29.742744Z","shell.execute_reply.started":"2025-08-25T21:57:29.309067Z","shell.execute_reply":"2025-08-25T21:57:29.741861Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/neurips-open-polymer-prediction-2025/sample_submission.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/test.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset2.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset4.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset1.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset3.csv\n/kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip install --no-index \\\n  --find-links=/kaggle/input/rdkit-2025-3-3-cp311 \\\n  /kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:41.033344Z","iopub.execute_input":"2025-08-26T13:45:41.033669Z","iopub.status.idle":"2025-08-26T13:45:49.448662Z","shell.execute_reply.started":"2025-08-26T13:45:41.033645Z","shell.execute_reply":"2025-08-26T13:45:49.447416Z"}},"outputs":[{"name":"stdout","text":"Looking in links: /kaggle/input/rdkit-2025-3-3-cp311\nProcessing /kaggle/input/rdkit-2025-3-3-cp311/rdkit-2025.3.3-cp311-cp311-manylinux_2_28_x86_64.whl\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from rdkit==2025.3.3) (1.26.4)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from rdkit==2025.3.3) (11.2.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit==2025.3.3) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit==2025.3.3) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit==2025.3.3) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->rdkit==2025.3.3) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->rdkit==2025.3.3) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->rdkit==2025.3.3) (2024.2.0)\nInstalling collected packages: rdkit\nSuccessfully installed rdkit-2025.3.3\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Imports","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport optuna\n\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem\n\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.experimental import enable_iterative_imputer  # noqa: F401\nfrom sklearn.impute import IterativeImputer\nfrom rdkit import RDLogger\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import KFold\nRDLogger.DisableLog('rdApp.*')\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nRDLogger.DisableLog('rdApp.*')\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import StandardScaler\nfrom typing import Dict, List, Tuple\n_HAS_LGBM = _HAS_XGB = False\ntry:\n    from lightgbm import LGBMRegressor\n    _HAS_LGBM = True\nexcept Exception:\n    pass\n\ntry:\n    from xgboost import XGBRegressor\n    _HAS_XGB = True\nexcept Exception:\n    pass\n\ntry:\n    from catboost import CatBoostRegressor\n    _HAS_CAT = True\nexcept ImportError:\n    _HAS_CAT = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:49.450959Z","iopub.execute_input":"2025-08-26T13:45:49.451326Z","iopub.status.idle":"2025-08-26T13:45:55.995631Z","shell.execute_reply.started":"2025-08-26T13:45:49.451296Z","shell.execute_reply":"2025-08-26T13:45:55.994677Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train.csv')\ntest = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/test.csv')\nds1 = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset1.csv')\nds2 = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset2.csv')\nds3 = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset3.csv')\nds4 = pd.read_csv('/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset4.csv')\nTARGETS = ['Tg','FFV','Tc','Density','Rg']\ntrain.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:55.996649Z","iopub.execute_input":"2025-08-26T13:45:55.997417Z","iopub.status.idle":"2025-08-26T13:45:56.117010Z","shell.execute_reply.started":"2025-08-26T13:45:55.997381Z","shell.execute_reply":"2025-08-26T13:45:56.115943Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"       id                                             SMILES  Tg       FFV  \\\n0   87817                         *CC(*)c1ccccc1C(=O)OCCCCCC NaN  0.374645   \n1  106919  *Nc1ccc([C@H](CCC)c2ccc(C3(c4ccc([C@@H](CCC)c5... NaN  0.370410   \n2  388772  *Oc1ccc(S(=O)(=O)c2ccc(Oc3ccc(C4(c5ccc(Oc6ccc(... NaN  0.378860   \n3  519416  *Nc1ccc(-c2c(-c3ccc(C)cc3)c(-c3ccc(C)cc3)c(N*)... NaN  0.387324   \n4  539187  *Oc1ccc(OC(=O)c2cc(OCCCCCCCCCOCC3CCCN3c3ccc([N... NaN  0.355470   \n\n         Tc  Density  Rg  \n0  0.205667      NaN NaN  \n1       NaN      NaN NaN  \n2       NaN      NaN NaN  \n3       NaN      NaN NaN  \n4       NaN      NaN NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>SMILES</th>\n      <th>Tg</th>\n      <th>FFV</th>\n      <th>Tc</th>\n      <th>Density</th>\n      <th>Rg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>87817</td>\n      <td>*CC(*)c1ccccc1C(=O)OCCCCCC</td>\n      <td>NaN</td>\n      <td>0.374645</td>\n      <td>0.205667</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>106919</td>\n      <td>*Nc1ccc([C@H](CCC)c2ccc(C3(c4ccc([C@@H](CCC)c5...</td>\n      <td>NaN</td>\n      <td>0.370410</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>388772</td>\n      <td>*Oc1ccc(S(=O)(=O)c2ccc(Oc3ccc(C4(c5ccc(Oc6ccc(...</td>\n      <td>NaN</td>\n      <td>0.378860</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>519416</td>\n      <td>*Nc1ccc(-c2c(-c3ccc(C)cc3)c(-c3ccc(C)cc3)c(N*)...</td>\n      <td>NaN</td>\n      <td>0.387324</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>539187</td>\n      <td>*Oc1ccc(OC(=O)c2cc(OCCCCCCCCCOCC3CCCN3c3ccc([N...</td>\n      <td>NaN</td>\n      <td>0.355470</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:56.119051Z","iopub.execute_input":"2025-08-26T13:45:56.119395Z","iopub.status.idle":"2025-08-26T13:45:56.128182Z","shell.execute_reply.started":"2025-08-26T13:45:56.119369Z","shell.execute_reply":"2025-08-26T13:45:56.127178Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"           id                                             SMILES\n0  1109053969  *Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...\n1  1422188626  *Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...\n2  2032016830  *c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>SMILES</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1109053969</td>\n      <td>*Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1422188626</td>\n      <td>*Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2032016830</td>\n      <td>*c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"nan_counts = train.isna().sum()\nprint(nan_counts)\nprint(len(train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:57:46.786857Z","iopub.execute_input":"2025-08-25T21:57:46.787216Z","iopub.status.idle":"2025-08-25T21:57:46.810996Z","shell.execute_reply.started":"2025-08-25T21:57:46.787186Z","shell.execute_reply":"2025-08-25T21:57:46.809879Z"}},"outputs":[{"name":"stdout","text":"id            0\nSMILES        0\nTg         7462\nFFV         943\nTc         7236\nDensity    7360\nRg         7359\ndtype: int64\n7973\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# Utility functions","metadata":{}},{"cell_type":"code","source":"def canonicalize_smiles(df, smiles_col=\"SMILES\"):\n    \"\"\"Return a copy of df with canonical SMILES in place.\"\"\"\n    df = df.copy()\n    canonical = []\n    for smi in df[smiles_col]:\n        try:\n            mol = Chem.MolFromSmiles(smi)\n            if mol is None:\n                canonical.append(None)\n            else:\n                canonical.append(Chem.MolToSmiles(mol, canonical=True))\n        except Exception:\n            canonical.append(None)\n    df[smiles_col] = canonical\n    return df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:56.129335Z","iopub.execute_input":"2025-08-26T13:45:56.129574Z","iopub.status.idle":"2025-08-26T13:45:56.152837Z","shell.execute_reply.started":"2025-08-26T13:45:56.129552Z","shell.execute_reply":"2025-08-26T13:45:56.151788Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def build_features(df, radius=2, nBits=1024):\n    \"\"\"\n    Compute ALL RDKit descriptors + Morgan fingerprints for each SMILES.\n    Returns: pd.DataFrame (index == df.index), list(desc_names), list(fp_names)\n    \"\"\"\n    # All RDKit descriptors\n    desc_list = Descriptors._descList\n    desc_names = [d[0] for d in desc_list]\n    #Commenting fingerprints temporarily\n    fp_names   = [f'FP_{i}' for i in range(nBits)] \n\n    rows = []\n    valid_idx = []\n    for idx, smi in zip(df.index, df['SMILES']):\n        try:\n            mol = Chem.MolFromSmiles(smi)\n            if mol is None:\n                # Skip invalid SMILES\n                print(f\"[Warning] Skipping invalid SMILES at index {idx}: {smi}\")\n                continue\n    \n            # Compute descriptors safely\n            dvals = []\n            for _, func in desc_list:\n                try:\n                    dvals.append(func(mol))\n                except Exception as e:\n                    dvals.append(np.nan)\n                    print(f\"[Warning] Descriptor failed for SMILES={smi}: {e}\")\n    \n            #Compute fingerprint safely\n            try:\n                fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=nBits)\n                # Convert RDKit ExplicitBitVect to numpy array\n                fp_arr = np.array(fp)\n                if fp_arr.ndim == 0:  # fallback if above fails\n                    fp_arr = np.frombuffer(fp.ToBitString().encode('utf-8'), 'S1').astype(int)\n            except Exception as e:\n                print(f\"[Warning] Fingerprint failed for SMILES={smi}: {e}\")\n                fp_arr = np.zeros(nBits, dtype=int)\n    \n            rows.append(dvals + fp_arr.tolist())\n            valid_idx.append(idx)\n    \n        except Exception as e:\n            print(f\"[Error] Failed to process SMILES at index {idx}: {smi}, Error: {e}\")\n            continue\n\n    try:\n        feat_df = pd.DataFrame(rows, index=valid_idx, columns=desc_names + fp_names)\n    except Exception as e:\n        print(f\"[Error] Could not create feature DataFrame: {e}\")\n        feat_df = pd.DataFrame(columns=desc_names + fp_names)\n    \n    return feat_df, desc_names, fp_names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:56.153764Z","iopub.execute_input":"2025-08-26T13:45:56.154087Z","iopub.status.idle":"2025-08-26T13:45:56.178032Z","shell.execute_reply.started":"2025-08-26T13:45:56.154065Z","shell.execute_reply":"2025-08-26T13:45:56.177005Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def fit_preprocessor(X_train: pd.DataFrame,\n                     variance_threshold: float = 0.0,\n                     corr_threshold: float = 0.90,\n                     scale: bool = True):\n    \"\"\"\n    Fit-time preprocessing (only on training data):\n    - Drop columns with NaNs\n    - Remove low-variance columns\n    - Remove highly correlated columns\n    - Fit scaler\n    Returns:\n        X_clean (np.ndarray),\n        state (dict with transformation state),\n        info (summary of dropped/kept columns)\n    \"\"\"\n    from sklearn.feature_selection import VarianceThreshold\n    from sklearn.preprocessing import StandardScaler\n\n    info = {}\n    try:\n        # Ensure string column names to avoid dtype/name mismatches later\n        X = X_train.copy()\n        X.columns = X.columns.astype(str)\n\n        # Step 1: Drop any column that has at least one NaN in TRAIN\n        X = X.replace([np.inf, -np.inf], np.nan)\n        nan_cols = X.columns[X.isna().any()].tolist()\n        info['dropped_nan_cols'] = nan_cols\n        X = X.drop(columns=nan_cols)\n\n        if X.empty:\n            raise ValueError(\"All columns dropped due to NaNs\")\n\n        # Step 2: Variance threshold (fit on TRAIN)\n        vt = VarianceThreshold(threshold=variance_threshold)\n        vt.fit(X)\n        kept_var_mask = vt.get_support()\n        vt_cols = X.columns[kept_var_mask].tolist()   # store these explicitly\n        dropped_var = [c for c in X.columns if c not in vt_cols]\n        info['dropped_lowvar_cols'] = dropped_var\n\n        # Manually select instead of calling vt.transform here (safer)\n        X = X[vt_cols]\n\n        # Step 3: Drop highly correlated features (TRAIN only)\n        corr = X.corr().abs()\n        upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))\n        to_drop_corr = [col for col in upper.columns if any(upper[col] > corr_threshold)]\n        info['dropped_corr_cols'] = to_drop_corr\n\n        X = X.drop(columns=to_drop_corr)\n        kept_cols = X.columns.tolist()\n        info['retained_cols'] = kept_cols\n\n        # Step 4: Scale (fit on TRAIN)\n        scaler = None\n        if scale:\n            scaler = StandardScaler()\n            X_scaled = scaler.fit_transform(X)\n        else:\n            X_scaled = X.values\n\n        state = {\n            'variance_threshold': variance_threshold,\n            'corr_threshold': corr_threshold,\n            'nan_cols': nan_cols,               # columns dropped due to NaNs in TRAIN\n            'vt_cols': vt_cols,                 # columns kept after variance step\n            'to_drop_corr': set(to_drop_corr),  # correlated columns to drop\n            'kept_cols': kept_cols,             # final kept columns (after corr)\n            'scaler': scaler\n        }\n\n        return X_scaled, state, info\n\n    except Exception as e:\n        print(f\"[Error in fit_preprocessor] {e}\")\n        return np.array([]), {}, {'error': str(e)}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:45:57.962686Z","iopub.execute_input":"2025-08-26T13:45:57.963061Z","iopub.status.idle":"2025-08-26T13:45:57.974233Z","shell.execute_reply.started":"2025-08-26T13:45:57.963032Z","shell.execute_reply":"2025-08-26T13:45:57.973101Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def transform_preprocessor(X_df: pd.DataFrame, state):\n    \"\"\"\n    Apply the previously fitted preprocessor on new data (e.g., test).\n    Any missing columns are created as 0, extra columns are dropped.\n    Wrapped with try-except for safety in notebook submission.\n    \"\"\"\n    try:\n        X_df = X_df.copy()\n        X_df.columns = X_df.columns.astype(str)\n        X_df = X_df.replace([np.inf, -np.inf], np.nan)\n\n        # 1) drop the same NaN columns identified from TRAIN\n        drop_nan = [c for c in state.get('nan_cols', []) if c in X_df.columns]\n        X_df = X_df.drop(columns=drop_nan, errors='ignore')\n\n        # 2) ensure we have exactly the variance-kept columns (vt_cols), in order\n        vt_cols = list(state.get('vt_cols', []))\n        # add any missing vt_cols as zeros (safe default)\n        missing = [c for c in vt_cols if c not in X_df.columns]\n        if missing:\n            for c in missing:\n                X_df[c] = 0.0\n        # drop any extra columns not in vt_cols\n        X_df = X_df.reindex(columns=vt_cols, fill_value=0.0)\n\n        # 3) drop the correlated columns decided at TRAIN time\n        drop_corr = [c for c in state.get('to_drop_corr', []) if c in X_df.columns]\n        X_df = X_df.drop(columns=drop_corr, errors='ignore')\n\n        # 4) finally, ensure we have exactly the TRAIN-kept columns, in order\n        kept_cols = list(state.get('kept_cols', []))\n        missing_final = [c for c in kept_cols if c not in X_df.columns]\n        if missing_final:\n            for c in missing_final:\n                X_df[c] = 0.0\n        X_df = X_df.reindex(columns=kept_cols, fill_value=0.0)\n\n        # 5) scale if scaler exists\n        scaler = state.get('scaler', None)\n        if scaler is not None:\n            X_df = scaler.transform(X_df)\n\n        return X_df\n\n    except Exception as e:\n        print(f\"[ERROR] transform_preprocessor failed: {e}\")\n        # fallback to a zero array with the right number of final columns\n        n_rows = len(X_df)\n        n_cols = len(state.get('kept_cols', []))\n        return np.zeros((n_rows, n_cols))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:01.546566Z","iopub.execute_input":"2025-08-26T13:46:01.546849Z","iopub.status.idle":"2025-08-26T13:46:01.557398Z","shell.execute_reply.started":"2025-08-26T13:46:01.546828Z","shell.execute_reply":"2025-08-26T13:46:01.555838Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"def report_nan_columns_numpy(X: np.ndarray, name=\"X_train_clean\"):\n    try:\n        if X.ndim != 2:\n            print(f\"[WARN] {name} expected 2D array, got shape {X.shape}\")\n            return np.array([], dtype=int)\n        col_mask = np.isnan(X).any(axis=0)\n        idxs = np.where(col_mask)[0]\n        if idxs.size == 0:\n            print(f\"[{name}] No NaNs detected.\")\n        else:\n            counts = np.isnan(X).sum(axis=0)[idxs]\n            print(f\"[{name}] NaN columns (count={idxs.size}):\")\n            for j, c in zip(idxs, counts):\n                print(f\"  col {j} -> {c} NaNs\")\n        return idxs\n    except Exception as e:\n        print(f\"[WARN] report_nan_columns_numpy failed for {name}: {e}\")\n        return np.array([], dtype=int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:05.366465Z","iopub.execute_input":"2025-08-26T13:46:05.366799Z","iopub.status.idle":"2025-08-26T13:46:05.374326Z","shell.execute_reply.started":"2025-08-26T13:46:05.366775Z","shell.execute_reply":"2025-08-26T13:46:05.373319Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def per_target_supervised_selection(\n    X_train_clean,          # np.ndarray or pd.DataFrame (after your preprocessing pipeline)\n    y_train,                # np.ndarray of shape (n_samples, n_targets) with NaNs\n    target_names,           # list of str\n    min_labels=400,         # below this, use lighter selection\n    base_estimator=None,    # pass a model; default RF\n    threshold=\"median\",     # SelectFromModel threshold\n    top_k=None,             # if set, override threshold and keep top-K by mean importance\n    cv_splits=5,\n    random_state=42,\n    verbose=True\n):\n    \"\"\"\n    Returns:\n      selectors: dict[target_name] -> fitted selector\n      Xsel_train: dict[target_name] -> selected X (train)\n    \"\"\"\n    if base_estimator is None:\n        base_estimator = RandomForestRegressor(\n            n_estimators=300, random_state=random_state, n_jobs=-1\n        )\n\n    n, p = X_train_clean.shape\n    selectors, Xsel_train = {}, {}\n\n    for j, name in enumerate(target_names):\n        yj = y_train[:, j]\n        mask = ~np.isnan(yj)\n        n_lab = int(mask.sum())\n\n        if verbose:\n            print(f\"\\n[{name}] labeled rows = {n_lab} / {n}\")\n\n        if n_lab < 5:\n            if verbose:\n                print(f\"[{name}] Too few labels; skipping selection (keep all {p}).\")\n            # Identity transform: keep all\n            keep_idx = np.arange(p)\n            selectors[name] = keep_idx\n            Xsel_train[name] = X_train_clean\n            continue\n\n        X_known = X_train_clean[mask]\n        y_known = yj[mask]\n\n        # Option A: CV-averaged importances for stability\n        kf = KFold(n_splits=min(cv_splits, n_lab), shuffle=True, random_state=random_state)\n        importances = np.zeros(p, dtype=float)\n        folds = 0\n        for tr_idx, va_idx in kf.split(X_known):\n            try:\n                est = base_estimator.__class__(**base_estimator.get_params())\n                est.fit(X_known[tr_idx], y_known[tr_idx])\n                if hasattr(est, \"feature_importances_\"):\n                    importances += est.feature_importances_\n                    folds += 1\n            except Exception as e:\n                if verbose:\n                    print(f\"[{name}] CV fold failed: {e}\")\n\n        if folds > 0:\n            importances /= folds\n        else:\n            # fallback: single fit\n            est = base_estimator.__class__(**base_estimator.get_params())\n            est.fit(X_known, y_known)\n            importances = getattr(est, \"feature_importances_\", np.ones(p) / p)\n\n        # Decide how aggressive to be\n        if n_lab < min_labels:\n            if verbose:\n                print(f\"[{name}] Using LIGHT selection (few labels).\")\n            # keep top-K or top median by importance\n            if top_k is None:\n                thr = np.median(importances)\n                keep_idx = np.where(importances >= thr)[0]\n            else:\n                keep_idx = np.argsort(importances)[::-1][:top_k]\n        else:\n            if verbose:\n                print(f\"[{name}] Using NORMAL selection.\")\n            if top_k is None:\n                thr = np.median(importances)\n                keep_idx = np.where(importances >= thr)[0]\n            else:\n                keep_idx = np.argsort(importances)[::-1][:top_k]\n\n        if verbose:\n            print(f\"[{name}] kept features: {len(keep_idx)} / {p}\")\n\n        selectors[name] = keep_idx\n        Xsel_train[name] = X_train_clean[:, keep_idx]\n\n    return selectors, Xsel_train\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:08.446660Z","iopub.execute_input":"2025-08-26T13:46:08.447069Z","iopub.status.idle":"2025-08-26T13:46:08.619360Z","shell.execute_reply.started":"2025-08-26T13:46:08.447045Z","shell.execute_reply":"2025-08-26T13:46:08.618201Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"def impute_targets_adaptive(\n    X,                      # np.ndarray (shared features) OR None if using X_per_target\n    y,                      # np.ndarray shape (n_samples, n_targets) with NaNs\n    target_names,           # list[str], e.g., ['Tg','FFV','Tc','Density','Rg']\n    selectors=None,         # optional: dict[name] -> np.ndarray[int] (column indices into X)\n    X_per_target=None,      # optional: dict[name] -> np.ndarray (feature matrix per target)\n    min_missing_for_nn=30,  # use NN only if number of NaNs in that target > this\n    min_known_for_nn=50,    # and at least this many known labels to train the NN\n    epochs=100, batch_size=64, verbose=0,\n    simple_strategy=\"median\",   # 'median' or 'mean'\n    random_state=42\n):\n    \"\"\"\n    Impute missing target values per target.\n    - If missing count > min_missing_for_nn AND known count >= min_known_for_nn -> use a small MLP (Keras).\n    - Else -> use SimpleImputer on the known labels (median/mean).\n    - Supports per-target feature subsets via `selectors` or `X_per_target`.\n    \n    Returns:\n        y_imp       : np.ndarray with missing targets imputed\n        impute_info : dict[name] -> ('nn', model) or ('simple', value or imputer)\n    \"\"\"\n    y_imp = y.copy().astype(float)\n    impute_info = {}\n\n    # Helper to get the design matrix for a given target\n    def get_X_for(name):\n        if X_per_target is not None:\n            return X_per_target[name]\n        if selectors is not None and X is not None:\n            idx = selectors.get(name, None)\n            return X[:, idx] if idx is not None else X\n        # default: shared X\n        return X\n\n    # Build MLP lazily and safely\n    def build_mlp(\n    input_dim: int,\n    hidden_units=(256, 128),\n    dropout_rate: float = 0.30,     # try 0.2–0.5\n    l2: float = 1e-4,               # try 1e-5–1e-3\n    use_batchnorm: bool = True,\n    lr: float = 1e-3,\n    loss: str = \"mse\"               # or \"huber\" for robustness\n):\n        \"\"\"\n        MLP with L2 regularization + Dropout (and optional BatchNorm).\n        \"\"\"\n        from tensorflow.keras import models, layers, optimizers, regularizers, initializers\n    \n        reg  = regularizers.l2(l2) if l2 and l2 > 0 else None\n        init = initializers.HeNormal()\n    \n        m = models.Sequential()\n        m.add(layers.Input(shape=(input_dim,)))\n    \n        for units in hidden_units:\n            m.add(layers.Dense(units,\n                               activation=\"relu\",\n                               kernel_initializer=init,\n                               kernel_regularizer=reg))\n            if use_batchnorm:\n                m.add(layers.BatchNormalization())\n            if dropout_rate and dropout_rate > 0:\n                m.add(layers.Dropout(dropout_rate))\n    \n        # Output layer (keep small L2 to stabilize if desired)\n        m.add(layers.Dense(1, kernel_regularizer=reg))\n    \n        # Consider Huber loss for outlier‑robust imputation:\n        # from tensorflow.keras.losses import Huber\n        # loss = Huber(delta=1.0)\n    \n        m.compile(optimizer=optimizers.Adam(learning_rate=lr), loss=loss)\n        return m\n    rng = np.random.RandomState(random_state)\n    n_targets = y.shape[1]\n\n    for j, name in enumerate(target_names):\n        y_col = y[:, j]\n        miss_mask = np.isnan(y_col)\n        n_miss = int(miss_mask.sum())\n        known_mask = ~miss_mask\n        n_known = int(known_mask.sum())\n\n        if n_miss == 0:\n            impute_info[name] = ('none', None)\n            # nothing to fill\n            continue\n\n        Xj = get_X_for(name)\n        if Xj is None:\n            # Safety: if we couldn't get features, fall back to simple imputer\n            print(f\"[Impute-{name}] No features provided; using SimpleImputer({simple_strategy}).\")\n            simp = SimpleImputer(strategy=simple_strategy)\n            y_known_2d = y_col[known_mask].reshape(-1, 1)\n            simp.fit(y_known_2d)\n            y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n            impute_info[name] = ('simple', simp)\n            continue\n\n        # Decide method\n        use_nn = (n_miss > min_missing_for_nn) and (n_known >= min_known_for_nn)\n\n        if not use_nn:\n            # Simple fill from known labels statistics\n            try:\n                simp = SimpleImputer(strategy=simple_strategy)\n                y_known_2d = y_col[known_mask].reshape(-1, 1)\n                simp.fit(y_known_2d)\n                y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n                impute_info[name] = ('simple', simp)\n                print(f\"[Impute-{name}] SimpleImputer({simple_strategy}) used | known={n_known}, missing={n_miss}\")\n            except Exception as e:\n                # Final fallback: manual median\n                val = np.nanmedian(y_col)\n                y_imp[miss_mask, j] = val\n                impute_info[name] = ('simple_fallback', val)\n                print(f\"[Impute-{name}] SimpleImputer failed ({e}); filled with median={val:.4f}\")\n            continue\n\n        # NN path\n        try:\n            X_known, y_known = Xj[known_mask], y_col[known_mask]\n            # Small validation split\n            Xtr, Xva, ytr, yva = train_test_split(\n                X_known, y_known, test_size=0.2, random_state=random_state\n            )\n\n            model = build_mlp(Xj.shape[1])\n            model.fit(Xtr, ytr, validation_data=(Xva, yva),\n                      batch_size=batch_size, epochs=epochs, verbose=verbose)\n\n            # Predict missing\n            X_miss = Xj[miss_mask]\n            y_pred = model.predict(X_miss, verbose=0).ravel()\n            y_imp[miss_mask, j] = y_pred\n            impute_info[name] = ('nn', model)\n            print(f\"[Impute-{name}] NN used | known={n_known}, missing={n_miss}\")\n\n        except Exception as e:\n            # Robust fallback: SimpleImputer on labels\n            try:\n                simp = SimpleImputer(strategy=simple_strategy)\n                y_known_2d = y_col[known_mask].reshape(-1, 1)\n                simp.fit(y_known_2d)\n                y_imp[miss_mask, j] = simp.transform(np.full((n_miss, 1), np.nan))[:, 0]\n                impute_info[name] = ('simple_after_nn_fail', simp)\n                print(f\"[Impute-{name}] NN failed ({e}); used SimpleImputer({simple_strategy}).\")\n            except Exception as ee:\n                val = np.nanmedian(y_col)\n                y_imp[miss_mask, j] = val\n                impute_info[name] = ('simple_fallback', val)\n                print(f\"[Impute-{name}] Both NN and SimpleImputer failed ({ee}); median={val:.4f}.\")\n\n    return y_imp, impute_info","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:12.562025Z","iopub.execute_input":"2025-08-26T13:46:12.562801Z","iopub.status.idle":"2025-08-26T13:46:12.582987Z","shell.execute_reply.started":"2025-08-26T13:46:12.562764Z","shell.execute_reply":"2025-08-26T13:46:12.581600Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef summarize_targets(y_raw: np.ndarray, y_imp: np.ndarray, target_names):\n    \"\"\"\n    Print descriptive stats of targets before and after imputation safely.\n    \"\"\"\n    try:\n        assert y_raw.shape == y_imp.shape\n        for j, name in enumerate(target_names):\n            print(f\"\\n=== {name} ===\")\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n                mask_known   = ~np.isnan(orig)\n                mask_missing =  np.isnan(orig)\n\n                # Known values\n                print(f\"Known (before imputation): n={mask_known.sum()}\")\n                if mask_known.any():\n                    print(pd.Series(orig[mask_known]).describe())\n\n                # Imputed values\n                print(f\"\\nImputed count: {mask_missing.sum()}\")\n                if mask_missing.any():\n                    print(\"Imputed-only stats:\")\n                    print(pd.Series(imp[mask_missing]).describe())\n\n                # Full\n                print(\"\\nAfter imputation (full vector) stats:\")\n                print(pd.Series(imp).describe())\n            except Exception as e:\n                print(f\"Error summarizing {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_summarize_targets() failed: {e}\")\n\n\ndef plot_target_distributions(y_raw: np.ndarray, y_imp: np.ndarray, target_names,\n                                   bins=30, figsize=(10, 4)):\n    \"\"\"\n    Plots distribution of known vs. imputed values per target with error handling.\n    \"\"\"\n    try:\n        assert y_raw.shape == y_imp.shape\n        n_targets = y_raw.shape[1]\n\n        for j, name in enumerate(target_names):\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n\n                known_mask   = ~np.isnan(orig)\n                missing_mask =  np.isnan(orig)\n\n                fig, ax = plt.subplots(1, 2, figsize=figsize, constrained_layout=True)\n                fig.suptitle(f\"{name} — distributions before & after imputation\", fontsize=12)\n\n                if known_mask.any():\n                    ax[0].hist(orig[known_mask], bins=bins)\n                ax[0].set_title(f\"{name} (known only)\\n n={known_mask.sum()}\")\n                ax[0].set_xlabel(name)\n                ax[0].set_ylabel(\"Count\")\n\n                if missing_mask.any():\n                    ax[1].hist(imp[missing_mask], bins=bins)\n                ax[1].set_title(f\"{name} (imputed only)\\n n={missing_mask.sum()}\")\n                ax[1].set_xlabel(name)\n                ax[1].set_ylabel(\"Count\")\n\n                plt.show()\n\n            except Exception as e:\n                print(f\"Error plotting {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_plot_target_distributions() failed: {e}\")\n\n\ndef plot_overlay_pre_post(y_raw: np.ndarray, y_imp: np.ndarray, target_names,\n                               bins=30, alpha_known=0.6, alpha_imp=0.6, figsize=(6,4)):\n    \"\"\"\n    Overlay known vs. imputed distributions for each target.\n    \"\"\"\n    try:\n        for j, name in enumerate(target_names):\n            try:\n                orig = y_raw[:, j]\n                imp  = y_imp[:, j]\n                known_mask   = ~np.isnan(orig)\n                missing_mask =  np.isnan(orig)\n\n                plt.figure(figsize=figsize)\n                if known_mask.any():\n                    plt.hist(orig[known_mask], bins=bins, alpha=alpha_known,\n                             label=\"Known (pre)\", density=True)\n                if missing_mask.any():\n                    plt.hist(imp[missing_mask], bins=bins, alpha=alpha_imp,\n                             label=\"Imputed-only (post)\", density=True)\n                plt.title(f\"{name} — overlay distributions\")\n                plt.xlabel(name)\n                plt.ylabel(\"Density\")\n                plt.legend()\n                plt.show()\n\n            except Exception as e:\n                print(f\"Error in overlay plot for {name}: {e}\")\n    except Exception as e:\n        print(f\"safe_plot_overlay_pre_post() failed: {e}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:18.063871Z","iopub.execute_input":"2025-08-26T13:46:18.064224Z","iopub.status.idle":"2025-08-26T13:46:18.081535Z","shell.execute_reply.started":"2025-08-26T13:46:18.064198Z","shell.execute_reply":"2025-08-26T13:46:18.080416Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"def _make_model_specs(random_state: int = 42):\n    specs = []\n\n    if _HAS_LGBM:\n        specs.append((\n            \"lgbm\",\n            lambda: LGBMRegressor(\n                n_estimators=1200, learning_rate=0.03, num_leaves=63,\n                subsample=0.8, colsample_bytree=0.8, reg_lambda=1.0,\n                random_state=random_state, n_jobs=-1\n            )\n        ))\n\n    if _HAS_XGB:\n        specs.append((\n            \"xgb\",\n            lambda: XGBRegressor(\n                n_estimators=1200, learning_rate=0.03, max_depth=8,\n                subsample=0.8, colsample_bytree=0.8, reg_lambda=1.0,\n                objective=\"reg:squarederror\", tree_method=\"hist\",\n                random_state=random_state, n_jobs=-1\n            )\n        ))\n\n    specs.append((\n        \"rf\",\n        lambda: RandomForestRegressor(\n            n_estimators=800, max_features=\"sqrt\",\n            random_state=random_state, n_jobs=-1\n        )\n    ))\n\n    specs.append((\n        \"et\",\n        lambda: ExtraTreesRegressor(\n            n_estimators=1000, max_features=\"sqrt\",\n            random_state=random_state, n_jobs=-1\n        )\n    ))\n\n    specs.append((\n        \"enet\",\n        lambda: ElasticNet(alpha=1e-3, l1_ratio=0.2,\n                           random_state=random_state, max_iter=3000)\n    ))\n\n    if _HAS_CAT:\n        specs.append((\n            \"cat\",\n            lambda: CatBoostRegressor(\n                iterations=1200,\n                learning_rate=0.03,\n                depth=6,\n                loss_function=\"MAE\",  \n                random_seed=random_state,\n                verbose=0,\n                early_stopping_rounds=200\n            )\n        ))\n\n    return specs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:22.396752Z","iopub.execute_input":"2025-08-26T13:46:22.397135Z","iopub.status.idle":"2025-08-26T13:46:22.406287Z","shell.execute_reply.started":"2025-08-26T13:46:22.397109Z","shell.execute_reply":"2025-08-26T13:46:22.404957Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"# Making SMILES canonical","metadata":{}},{"cell_type":"code","source":"train = canonicalize_smiles(train)\ntest  = canonicalize_smiles(test)\nds1 = canonicalize_smiles(ds1, \"SMILES\")\nds2 = canonicalize_smiles(ds2, \"SMILES\")\nds3 = canonicalize_smiles(ds3, \"SMILES\")\nds4 = canonicalize_smiles(ds4, \"SMILES\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:26.479417Z","iopub.execute_input":"2025-08-26T13:46:26.479830Z","iopub.status.idle":"2025-08-26T13:46:36.142041Z","shell.execute_reply.started":"2025-08-26T13:46:26.479805Z","shell.execute_reply":"2025-08-26T13:46:36.140883Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"# Adding extra data","metadata":{}},{"cell_type":"code","source":"if 'TC_mean' in ds1.columns:\n    ds1 = ds1[['SMILES','TC_mean']].rename(columns={'TC_mean':'Tc'})\nelse:\n    ds1 = ds1[['SMILES']]\n\nds2 = ds2[['SMILES']]\n\nif 'Tg' in ds3.columns:\n    ds3 = ds3[['SMILES','Tg']]\nelse:\n    ds3 = ds3[['SMILES']]\n\nif 'FFV' in ds4.columns:\n    ds4 = ds4[['SMILES','FFV']]\nelse:\n    ds4 = ds4[['SMILES']]\n\n    # Numeric-coerce targets & average duplicates per SMILES (WRITE BACK!)\ndef _prep(df, targets):\n    df = df.copy()\n    df.dropna(subset=['SMILES'], inplace=True)\n    for t in targets:\n        if t in df.columns:\n            df[t] = pd.to_numeric(df[t], errors='coerce')\n    keep = ['SMILES'] + [t for t in targets if t in df.columns]\n    df = df[keep]\n    if len(keep) > 1:\n        df = df.groupby('SMILES', as_index=False).mean()\n    else:\n        df = df.drop_duplicates(subset=['SMILES'])\n    return df\n\nds1 = _prep(ds1, ['Tc'])\nds3 = _prep(ds3, ['Tg'])\nds4 = _prep(ds4, ['FFV'])\n\n# Build a single extras table\nextras = ds1.merge(ds3, on='SMILES', how='outer').merge(ds4, on='SMILES', how='outer')\n\n# 1) Fill missing labels in existing train rows\nmerged = train.merge(extras, on='SMILES', how='left', suffixes=('', '_ext'))\nfor t in TARGETS:\n    if f'{t}_ext' in merged.columns:\n        # only fill where train label is NaN\n        merged[t] = merged[t].where(~merged[t].isna(), merged[f'{t}_ext'])\n        merged.drop(columns=[f'{t}_ext'], inplace=True)\n\n# 2) Append brand-new SMILES from extras (not present in train)\ntrain_smiles = set(merged['SMILES'].unique())\nnew_rows = extras[~extras['SMILES'].isin(train_smiles)].copy()\nif not new_rows.empty:\n    # Ensure all TARGET columns exist in new_rows\n    for t in TARGETS:\n        if t not in new_rows.columns:\n            new_rows[t] = np.nan\n    # Bring to the same column order as train\n    # (keep any non-target train cols as NaN in appended rows)\n    for col in merged.columns:\n        if col not in new_rows.columns:\n            new_rows[col] = np.nan\n    new_rows = new_rows[merged.columns]\n    merged = pd.concat([merged, new_rows], ignore_index=True)\n\ntrain = merged\n\nprint(\"After merge+append, labeled counts:\")\nfor t in TARGETS:\n    if t in train.columns:\n        print(f\"  {t}: {train[t].notna().sum()} / {len(train)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:36.144156Z","iopub.execute_input":"2025-08-26T13:46:36.144466Z","iopub.status.idle":"2025-08-26T13:46:36.237835Z","shell.execute_reply.started":"2025-08-26T13:46:36.144442Z","shell.execute_reply":"2025-08-26T13:46:36.236889Z"}},"outputs":[{"name":"stdout","text":"After merge+append, labeled counts:\n  Tg: 557 / 8972\n  FFV: 7892 / 8972\n  Tc: 866 / 8972\n  Density: 613 / 8972\n  Rg: 614 / 8972\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":" train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T21:57:56.150683Z","iopub.execute_input":"2025-08-25T21:57:56.151004Z","iopub.status.idle":"2025-08-25T21:57:56.157145Z","shell.execute_reply.started":"2025-08-25T21:57:56.150975Z","shell.execute_reply":"2025-08-25T21:57:56.156310Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"(8972, 7)"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"# Building feature matrix","metadata":{}},{"cell_type":"code","source":"X_train_raw, desc_names, fp_names = build_features(train)\nX_test_raw, _, _ = build_features(test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:46:36.238809Z","iopub.execute_input":"2025-08-26T13:46:36.239154Z","iopub.status.idle":"2025-08-26T13:50:14.312465Z","shell.execute_reply.started":"2025-08-26T13:46:36.239132Z","shell.execute_reply":"2025-08-26T13:50:14.311476Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"X_train_raw","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:14.314794Z","iopub.execute_input":"2025-08-26T13:50:14.315145Z","iopub.status.idle":"2025-08-26T13:50:14.343023Z","shell.execute_reply.started":"2025-08-26T13:50:14.315121Z","shell.execute_reply":"2025-08-26T13:50:14.342073Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"      MaxAbsEStateIndex  MaxEStateIndex  MinAbsEStateIndex  MinEStateIndex  \\\n0             12.144536       12.144536           0.105927       -0.105927   \n1              3.523412        3.523412           0.098918        0.098918   \n2             13.714745       13.714745           0.107441       -3.829434   \n3              3.978671        3.978671           0.054569       -0.202102   \n4             13.703218       13.703218           0.068062       -0.686332   \n...                 ...             ...                ...             ...   \n8967           2.293426        2.293426           0.347037        0.347037   \n8968          13.468559       13.468559           0.051218       -0.585425   \n8969           5.776027        5.776027           0.075749        0.075749   \n8970           4.911759        4.911759           0.339590        0.339590   \n8971           2.596829        2.596829           0.310112        0.310112   \n\n           qed        SPS     MolWt  HeavyAtomMolWt   ExactMolWt  \\\n0     0.500278  13.705882   232.323         212.163   232.146330   \n1     0.125364  16.777778   598.919         544.487   598.428700   \n2     0.092387  16.301370  1003.207         952.807  1002.289625   \n3     0.209590  11.523810   542.726         508.454   542.272199   \n4     0.014164  15.885714   965.154         896.610   964.483374   \n...        ...        ...       ...             ...          ...   \n8967  0.497081  12.800000   126.158         120.110   126.046950   \n8968  0.468687  15.875000   416.392         404.296   416.079707   \n8969  0.526209  12.695652   298.305         288.225   298.085461   \n8970  0.657438  13.000000   265.447         246.295   265.095892   \n8971  0.189371  12.333333   444.794         400.442   444.288443   \n\n      NumValenceElectrons  ...  FP_1014  FP_1015  FP_1016  FP_1017  FP_1018  \\\n0                      92  ...        0        0        0        0        0   \n1                     236  ...        0        0        0        0        0   \n2                     364  ...        0        0        0        0        0   \n3                     204  ...        0        0        0        0        0   \n4                     376  ...        0        0        0        0        0   \n...                   ...  ...      ...      ...      ...      ...      ...   \n8967                   46  ...        0        0        0        0        0   \n8968                  150  ...        0        0        0        0        0   \n8969                  108  ...        0        0        0        0        0   \n8970                   92  ...        0        0        0        0        0   \n8971                  168  ...        0        0        0        0        0   \n\n      FP_1019  FP_1020  FP_1021  FP_1022  FP_1023  \n0           0        0        0        0        0  \n1           1        0        0        0        0  \n2           0        0        0        0        0  \n3           0        0        0        0        0  \n4           1        0        0        0        0  \n...       ...      ...      ...      ...      ...  \n8967        0        0        0        0        0  \n8968        0        0        0        0        0  \n8969        0        0        0        0        0  \n8970        0        0        0        0        0  \n8971        0        0        0        0        0  \n\n[8972 rows x 1241 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>ExactMolWt</th>\n      <th>NumValenceElectrons</th>\n      <th>...</th>\n      <th>FP_1014</th>\n      <th>FP_1015</th>\n      <th>FP_1016</th>\n      <th>FP_1017</th>\n      <th>FP_1018</th>\n      <th>FP_1019</th>\n      <th>FP_1020</th>\n      <th>FP_1021</th>\n      <th>FP_1022</th>\n      <th>FP_1023</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.144536</td>\n      <td>12.144536</td>\n      <td>0.105927</td>\n      <td>-0.105927</td>\n      <td>0.500278</td>\n      <td>13.705882</td>\n      <td>232.323</td>\n      <td>212.163</td>\n      <td>232.146330</td>\n      <td>92</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.523412</td>\n      <td>3.523412</td>\n      <td>0.098918</td>\n      <td>0.098918</td>\n      <td>0.125364</td>\n      <td>16.777778</td>\n      <td>598.919</td>\n      <td>544.487</td>\n      <td>598.428700</td>\n      <td>236</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13.714745</td>\n      <td>13.714745</td>\n      <td>0.107441</td>\n      <td>-3.829434</td>\n      <td>0.092387</td>\n      <td>16.301370</td>\n      <td>1003.207</td>\n      <td>952.807</td>\n      <td>1002.289625</td>\n      <td>364</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.978671</td>\n      <td>3.978671</td>\n      <td>0.054569</td>\n      <td>-0.202102</td>\n      <td>0.209590</td>\n      <td>11.523810</td>\n      <td>542.726</td>\n      <td>508.454</td>\n      <td>542.272199</td>\n      <td>204</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13.703218</td>\n      <td>13.703218</td>\n      <td>0.068062</td>\n      <td>-0.686332</td>\n      <td>0.014164</td>\n      <td>15.885714</td>\n      <td>965.154</td>\n      <td>896.610</td>\n      <td>964.483374</td>\n      <td>376</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8967</th>\n      <td>2.293426</td>\n      <td>2.293426</td>\n      <td>0.347037</td>\n      <td>0.347037</td>\n      <td>0.497081</td>\n      <td>12.800000</td>\n      <td>126.158</td>\n      <td>120.110</td>\n      <td>126.046950</td>\n      <td>46</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8968</th>\n      <td>13.468559</td>\n      <td>13.468559</td>\n      <td>0.051218</td>\n      <td>-0.585425</td>\n      <td>0.468687</td>\n      <td>15.875000</td>\n      <td>416.392</td>\n      <td>404.296</td>\n      <td>416.079707</td>\n      <td>150</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8969</th>\n      <td>5.776027</td>\n      <td>5.776027</td>\n      <td>0.075749</td>\n      <td>0.075749</td>\n      <td>0.526209</td>\n      <td>12.695652</td>\n      <td>298.305</td>\n      <td>288.225</td>\n      <td>298.085461</td>\n      <td>108</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8970</th>\n      <td>4.911759</td>\n      <td>4.911759</td>\n      <td>0.339590</td>\n      <td>0.339590</td>\n      <td>0.657438</td>\n      <td>13.000000</td>\n      <td>265.447</td>\n      <td>246.295</td>\n      <td>265.095892</td>\n      <td>92</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8971</th>\n      <td>2.596829</td>\n      <td>2.596829</td>\n      <td>0.310112</td>\n      <td>0.310112</td>\n      <td>0.189371</td>\n      <td>12.333333</td>\n      <td>444.794</td>\n      <td>400.442</td>\n      <td>444.288443</td>\n      <td>168</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>8972 rows × 1241 columns</p>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"\n\ny_train_raw = train[TARGETS].to_numpy(dtype=float)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:14.344062Z","iopub.execute_input":"2025-08-26T13:50:14.344405Z","iopub.status.idle":"2025-08-26T13:50:14.351349Z","shell.execute_reply.started":"2025-08-26T13:50:14.344380Z","shell.execute_reply":"2025-08-26T13:50:14.350182Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"\nimport seaborn as sns\n\n# y_train_raw: (n_samples, n_targets) with NaNs\n# TARGETS: list of target names like ['Tg','FFV','Tc','Density','Rg']\ny_df = pd.DataFrame(y_train_raw, columns=TARGETS)\n\n# Pairwise-complete Pearson corr; require at least 3 overlapping rows\ncorr = y_df.corr(method='pearson', min_periods=3)\n\nplt.figure(figsize=(6, 5))\nsns.heatmap(corr, annot=True, fmt=\".2f\", vmin=-1, vmax=1, cmap=\"vlag\", square=True,\n            cbar_kws={\"label\": \"Pearson r\"})\nplt.title(\"Target Correlation (pairwise complete observations)\")\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:14.352747Z","iopub.execute_input":"2025-08-26T13:50:14.353092Z","iopub.status.idle":"2025-08-26T13:50:15.033850Z","shell.execute_reply.started":"2025-08-26T13:50:14.353068Z","shell.execute_reply":"2025-08-26T13:50:15.032948Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"code","source":"X_train_clean, state, info = fit_preprocessor(X_train_raw, variance_threshold=0.0, corr_threshold=0.90, scale=True)\nprint(\"Dropped (NaN):\", len(info['dropped_nan_cols']))\nprint(\"Dropped (low var):\", len(info['dropped_lowvar_cols']))\nprint(\"Dropped (corr):\", len(info['dropped_corr_cols']))\nprint(\"Retained:\", len(info['retained_cols']))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:15.034960Z","iopub.execute_input":"2025-08-26T13:50:15.035683Z","iopub.status.idle":"2025-08-26T13:50:52.388087Z","shell.execute_reply.started":"2025-08-26T13:50:15.035651Z","shell.execute_reply":"2025-08-26T13:50:52.387052Z"}},"outputs":[{"name":"stdout","text":"Dropped (NaN): 12\nDropped (low var): 12\nDropped (corr): 62\nRetained: 1155\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"report_nan_columns_numpy(X_train_clean, name=\"X_train_clean\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:52.390595Z","iopub.execute_input":"2025-08-26T13:50:52.390896Z","iopub.status.idle":"2025-08-26T13:50:52.426639Z","shell.execute_reply.started":"2025-08-26T13:50:52.390874Z","shell.execute_reply":"2025-08-26T13:50:52.425597Z"}},"outputs":[{"name":"stdout","text":"[X_train_clean] No NaNs detected.\n","output_type":"stream"},{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"array([], dtype=int64)"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"X_test_clean = transform_preprocessor(X_test_raw, state)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:52.428060Z","iopub.execute_input":"2025-08-26T13:50:52.428339Z","iopub.status.idle":"2025-08-26T13:50:52.453489Z","shell.execute_reply.started":"2025-08-26T13:50:52.428318Z","shell.execute_reply":"2025-08-26T13:50:52.452635Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"# Supervised Feature Selection","metadata":{}},{"cell_type":"code","source":"selectors, Xsel_train = per_target_supervised_selection(\n    X_train_clean, y_train_raw, TARGETS,\n    min_labels=500,           # light selection when labels are ~500–700\n    top_k=60,                # e.g., cap to 100 features per target\n    cv_splits=5, verbose=True\n)\n\n# Applying the same masks to test\nXsel_test = {name: X_test_clean[:, idx] for name, idx in selectors.items()}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:50:52.454750Z","iopub.execute_input":"2025-08-26T13:50:52.455102Z","iopub.status.idle":"2025-08-26T13:58:37.757236Z","shell.execute_reply.started":"2025-08-26T13:50:52.455069Z","shell.execute_reply":"2025-08-26T13:58:37.756265Z"}},"outputs":[{"name":"stdout","text":"\n[Tg] labeled rows = 557 / 8972\n[Tg] Using NORMAL selection.\n[Tg] kept features: 60 / 1155\n\n[FFV] labeled rows = 7892 / 8972\n[FFV] Using NORMAL selection.\n[FFV] kept features: 60 / 1155\n\n[Tc] labeled rows = 866 / 8972\n[Tc] Using NORMAL selection.\n[Tc] kept features: 60 / 1155\n\n[Density] labeled rows = 613 / 8972\n[Density] Using NORMAL selection.\n[Density] kept features: 60 / 1155\n\n[Rg] labeled rows = 614 / 8972\n[Rg] Using NORMAL selection.\n[Rg] kept features: 60 / 1155\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"# Target Data Imputation","metadata":{}},{"cell_type":"code","source":"y_imputed, impute_info = impute_targets_adaptive(\n    X=None, y=y_train_raw, target_names=TARGETS,\n    X_per_target=Xsel_train,            # directly pass per‑target feature matrices\n    min_missing_for_nn=30, min_known_for_nn=50\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T13:58:37.758389Z","iopub.execute_input":"2025-08-26T13:58:37.758757Z","iopub.status.idle":"2025-08-26T14:01:13.861960Z","shell.execute_reply.started":"2025-08-26T13:58:37.758725Z","shell.execute_reply":"2025-08-26T14:01:13.861053Z"}},"outputs":[{"name":"stderr","text":"2025-08-26 13:58:39.745558: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1756216720.039075      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1756216720.108507      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2025-08-26 13:58:56.644628: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"},{"name":"stdout","text":"[Impute-Tg] NN used | known=557, missing=8415\n[Impute-FFV] NN used | known=7892, missing=1080\n[Impute-Tc] NN used | known=866, missing=8106\n[Impute-Density] NN used | known=613, missing=8359\n[Impute-Rg] NN used | known=614, missing=8358\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"try:\n    import tensorflow as tf\n    tf.keras.backend.clear_session()\nexcept Exception:\n    pass\n\nimport gc\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:13.863303Z","iopub.execute_input":"2025-08-26T14:01:13.864219Z","iopub.status.idle":"2025-08-26T14:01:14.867232Z","shell.execute_reply.started":"2025-08-26T14:01:13.864192Z","shell.execute_reply":"2025-08-26T14:01:14.866277Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"# Plotting target distributions before and after imputation","metadata":{}},{"cell_type":"code","source":"summarize_targets(y_train_raw, y_imputed, TARGETS)\nplot_target_distributions(y_train_raw, y_imputed, TARGETS, bins=40)\nplot_overlay_pre_post(y_train_raw, y_imputed, TARGETS, bins=40)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:14.867906Z","iopub.execute_input":"2025-08-26T14:01:14.868263Z","iopub.status.idle":"2025-08-26T14:01:19.666068Z","shell.execute_reply.started":"2025-08-26T14:01:14.868230Z","shell.execute_reply":"2025-08-26T14:01:19.664952Z"}},"outputs":[{"name":"stdout","text":"\n=== Tg ===\nKnown (before imputation): n=557\ncount    557.000000\nmean      99.693183\nstd      111.075991\nmin     -148.029738\n25%       17.013426\n50%       77.846783\n75%      164.863901\nmax      472.250000\ndtype: float64\n\nImputed count: 8415\nImputed-only stats:\ncount    8415.000000\nmean      106.476281\nstd        96.064258\nmin      -134.908386\n25%        22.765326\n50%       105.484627\n75%       181.965622\nmax       392.562347\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    8972.000000\nmean      106.055172\nstd        97.070662\nmin      -148.029738\n25%        22.398016\n50%       103.548134\n75%       181.342419\nmax       472.250000\ndtype: float64\n\n=== FFV ===\nKnown (before imputation): n=7892\ncount    7892.000000\nmean        0.367007\nstd         0.029067\nmin         0.226992\n25%         0.349598\n50%         0.364004\n75%         0.380173\nmax         0.777097\ndtype: float64\n\nImputed count: 1080\nImputed-only stats:\ncount    1080.000000\nmean        0.385532\nstd         0.056929\nmin         0.264361\n25%         0.347768\n50%         0.377999\n75%         0.419333\nmax         1.378369\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    8972.000000\nmean        0.369237\nstd         0.034196\nmin         0.226992\n25%         0.349438\n50%         0.364652\n75%         0.382867\nmax         1.378369\ndtype: float64\n\n=== Tc ===\nKnown (before imputation): n=866\ncount    866.000000\nmean       0.256644\nstd        0.101281\nmin        0.046500\n25%        0.186375\n50%        0.236000\n75%        0.325000\nmax        1.590000\ndtype: float64\n\nImputed count: 8106\nImputed-only stats:\ncount    8106.000000\nmean        0.236533\nstd         0.054222\nmin        -0.144952\n25%         0.207618\n50%         0.235763\n75%         0.267261\nmax         0.554875\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    8972.000000\nmean        0.238474\nstd         0.060668\nmin        -0.144952\n25%         0.205984\n50%         0.235804\n75%         0.269978\nmax         1.590000\ndtype: float64\n\n=== Density ===\nKnown (before imputation): n=613\ncount    613.000000\nmean       0.985484\nstd        0.146189\nmin        0.748691\n25%        0.890243\n50%        0.948193\n75%        1.062096\nmax        1.840999\ndtype: float64\n\nImputed count: 8359\nImputed-only stats:\ncount    8359.000000\nmean        1.122025\nstd         0.243991\nmin         0.551980\n25%         0.955603\n50%         1.059499\n75%         1.228717\nmax         3.105466\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    8972.000000\nmean        1.112696\nstd         0.241057\nmin         0.551980\n25%         0.947457\n50%         1.052743\n75%         1.213665\nmax         3.105466\ndtype: float64\n\n=== Rg ===\nKnown (before imputation): n=614\ncount    614.000000\nmean      16.419787\nstd        4.608640\nmin        9.728355\n25%       12.540328\n50%       15.052194\n75%       20.411067\nmax       34.672906\ndtype: float64\n\nImputed count: 8358\nImputed-only stats:\ncount    8358.000000\nmean       17.204419\nstd         3.292256\nmin         7.499529\n25%        14.696222\n50%        17.389284\n75%        19.686724\nmax        29.423868\ndtype: float64\n\nAfter imputation (full vector) stats:\ncount    8972.000000\nmean       17.150723\nstd         3.404068\nmin         7.499529\n25%        14.535922\n50%        17.323239\n75%        19.713006\nmax        34.672906\ndtype: float64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"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6+Pj4w13d3er8sxtXv+zTElJMby8vIx69eoZV69eNctXrVplSDLGjh1rluX0s9yxY4chyYiMjLQqX7t2bbbl2fnoo48MJycnQ5Ixc+bMW7bPzpUrV7KURUdHG5KMzz//3CzLfJ9NmTLFqm3nzp2t3juZFi1aZNjZ2Rk7duywKs/8vf7+++/NMkmGnZ2dsX///lzFfOP7eMuWLYYko169elY/9969exsWi8Xo2LGj1euDgoKyxJz52bRnzx6z7OTJk4azs7Px+OOPm2U3/q5kuvH3wjAMo0yZMkZYWFiWtrnt82XLlhmSjC1btmRpf2MfzJgxw5BkLF682CxLSUkxgoKCjLJlyxpJSUmGYfzv51i+fHnj3LlzZtuVK1cakoxvv/02y74A4E7GZfYA7lqzZ8/Whg0brJYbNW/ePEub6++Pt7e3V69evRQdHW11mWlUVJS8vb3Vrl27ojiULNasWSNJGjZsmFV5bib6yjwru2rVKqWmpuY7hueffz7Xbbt166Z77rnHXG/WrJmaN29uHkdhydz+yJEjrcozJz1cvXq1VXmdOnXUsmVLc71ixYqqWbOmjh07ZpZ5eHho//79Onz4cL5iGjx4sNXZxeeff16lSpUyY92wYYMuXLig3r176++//zYXe3t7NW/eXFu2bLnp9vfs2aMzZ87ohRdesLqvu3PnzqpVq1aWY86M4XrLli2Tu7u7HnnkEasYAgMDVbZs2VvGsHLlSoWHh+urr77SG2+8oeHDh2v+/PlWbWrWrKl+/frddDvXX/WSmpqqs2fP6r777pOHh4d++umnm772ZpYtW6batWurVq1aVsf38MMPS1KW42vdurXq1KmT7/1JUv/+/a1+7s2bN5dhGObtLdeX//bbb0pLS7MqDwoKUmBgoLleqVIlPfbYY1q3bp3S09NvK7brFUafr1mzRj4+Purdu7dZ5uDgoGHDhunSpUvatm2bVfsnn3xS5cqVM9czfyev/z0EgLsBl9kDuGs1a9bslhPgVahQ4ZazgIeGhmr69OmKiorS66+/rt9//107duzQsGHDbjmxXGJioq5evZrn2CXJ3d09x0v4T548KTs7O/PS2Ew1a9a85XZbt26tHj16aMKECZo+fbratGmjbt26qU+fPrme8b5UqVK69957c9VWkqpXr56lrEaNGvryyy9zvY38yOyn++67z6rcx8dH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xaLx48fn+XWvvfaamjdvXvABAQBsXnZj9oIFC2SxWHTixIniC6yYVa5cWQMGDCjy/ea371NTU+Xv76+PPvqocALDXYlkHihkmR/62S2vvfaa2a5y5co5trt27Zq6du2q0qVL6+LFiznuKzQ0VI6Ojjp79uxNY/riiy/022+/aciQIQV2nMi/4cOH65dfftE333xT3KEAwF2NMbtgrVmzJl9fct+JHBwcNHLkSL399tu6du1acYeDO0Sp4g4AuFtMnDhRVapUsSqrV6+e1XqjRo300ksvZXmto6OjQkND9e233+rrr79W//79s7S5cuWKVq5cqQ4dOqh8+fI3jWXKlCnq1auX3N3d83EkKGg+Pj567LHHNHXqVHXt2rW4wwGAu15JH7P79eunXr16ycnJKS+HVeTWrFmj2bNnk9D/fwMHDtRrr72mqKgoPfXUU8UdDu4AJPNAEenYsaOaNGly0zb33HOP+vbtm21d165d5erqqqioqGz/MFi5cqUuX76s0NDQm+7j559/1i+//KL3338/98Gj0PXs2VP/+te/dOzYMVWtWrW4wwGAu1pJH7Pt7e1lb29/i6NASePh4aHg4GAtWLCAZB4FgsvsARvh4uKi7t27a9OmTTpz5kyW+qioKLm6ut7yzO6KFSvk6OioVq1a3XKfJ0+e1H333ad69eopISFBktSmTRvVq1dPBw4cUNu2bVW6dGndc889mjx5cpbXnzlzRoMGDZK3t7ecnZ3VsGFDLVy40KrN/fffr+7du1uV1a9fXxaLRXv37jXLli5dKovFooMHD0r63z3+R44c0YABA+Th4SF3d3cNHDhQV65cueWxSdKyZcsUGBgoFxcXVahQQX379tUff/xh1WbAgAEqW7as/vjjD3Xr1k1ly5ZVxYoV9fLLLys9PT3HbW/ZskUWi0Vff/11lrqoqChZLBZFR0ebZe3bt5f0zx94AADbVthjdnb3bVeuXFmPPvqotm7dqiZNmsjFxUX169fX1q1bJUnLly9X/fr15ezsrMDAQP38889W28wc744dO6aQkBCVKVNGfn5+mjhxogzDMNtt3bpVFovF3G6mEydOyGKxaMGCBeb2Zs+eLUlWtyFkysjI0IwZM1S3bl05OzvL29tbzz77rM6fP2+1XcMw9NZbb+nee+9V6dKl1bZtW+3fv/+m/Xa9y5cv66WXXpK/v7+c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ExPl5eWlihUrWi2XLl0y5xnIHI+rV69u9fqKFSvm6kuOkydPys/PT66urlblN/4tkunG/pNyN973799fV69eNefJiYuLU0xMjPr165elbebPk/EeBYFkHrAxgYGBqlWrlr744gtJ/zx/1jCMW86Im6l8+fI3HZR69Oiho0ePZnuvd6ac/gDJyx8c12vRooV27Nihq1evKiYmRi1btlS9evXk4eGhHTt2aMeOHSpbtqwaN25c6LFk53ZmDO7fv7+2bdum33//XUePHtWuXbtynP34/PnzqlChQr73BQAoWQp7zL5RTuNVQY6VOSWhN5sU9kYZGRny8vLKcmVD5jJx4sQ8x1UQ8ttPderUUWBgoBYvXixJWrx4sRwdHdWzZ88sbTN/noz3KAgk84ANCg0N1b59+7R3715FRUWpevXqatq0aa5eW6tWLR0/fjzH+ilTpmjQoEF64YUXzDMJ+REQEKDDhw9nmVzn0KFDZn2mli1b6tSpU1qyZInS09P14IMPys7Ozkzyd+zYoQcffLDAHsOTue+4uLgsdXFxcVax3a7Msy9ffPGFIiMj5eDgoCeffDLbtsePH88ywR8AwLYV5phd0DIyMrJcUv7f//5X0j+z5Uv/uwLuxslibzzLLeWc+FerVk1nz57VQw89lOXqhvbt26thw4aS/jdeHz582Or1f/31V66+5AgICNCff/5pdfm7lP3fIrerf//+2rx5s06fPq2oqCh17tw526sHMn+ejPcoCCTzgA3K/EZ/7Nixio2NzfU3/JIUFBSkffv2KTk5Odt6i8WiefPm6YknnlBYWJi++eabfMXYqVMnxcfHa+nSpWZZWlqaZs2apbJly6p169Zmeebl8++9954aNGhgXv7XsmVLbdq0SXv27Mn2Evv8atKkiby8vDR37lyrfvjPf/6jgwcPqnPnzgW2rwoVKqhjx45avHixIiMj1aFDh2y/jU9MTNTRo0f14IMPFti+AQDFrzDH7MLw4Ycfmv83DEMffvihHBwczHv8AwICZG9vb851k+mjjz7Ksq0yZcpIypr49+zZU+np6Zo0aVKW16SlpZnt27dvLwcHB82aNcvq7PiMGTNydSydOnVSenq61TFJ0vTp02WxWNSxY8dcbSc3evfuLYvFohdffFHHjh3L8Sq8mJgYWSwWq7kNgPwqVdwBAMi7KlWq6MEHHzSfSZ6X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k5NZVqpUKVWoUMFqX3nZJnA34DJ7AKZ3331XdnZ2evnll5WYmKjJkycrNDRUu3fvNttcuXJFV65cueW27O3tVa5cuRzr16xZowsXLig0NNSqvFWrVrKzs9OLL76o999/X/fee6/27t2rt99+W926dVOtWrUk/fNlgKQsf1CULl1akhQTE3PLGOPj41WhQoVbtgMAwJYU5Xiek59//lmS1KRJE6vywMBA2dnZ6eeff1bfvn0lSW3atNF7772nN998U2FhYbJYLIqKitKePXv05Zdf5mubwN2AZB6A6dq1a4qNjZWjo6MkqVy5cnrxxRe1b98+1atXT5I0efJkTZgw4ZbbCggI0IkTJ3Ksj4yMlJOTk5544gmr8jp16mjevHl6+eWXFRQUZJaHhYXp3//+t7les2ZNSdL333+vtm3bmuU7duyQJP3xxx83jW/Hjh2Kjo7WmDFjbnksAADYkqIcz3Ny+vRp2dvby8vLy6rc0dFR5cuX159//mmWvfnmmzp+/LjefvttvfXWW5L++XL+//7v//TYY4/la5vA3YBkHoBp4MCB5sAvSS1btpQkHTt2zBz8+/fvrxYtWtxyWze7BC8pKUmrV69Wp06d5OHhkaX+nnvuUbNmzdSpUycFBARox44d+uCDD1ShQgVNnTpVknT//ferefPmeu+993TPPfeobdu2OnjwoJ5//nk5ODjo6tWrOe7/zJkz6tOnj6pUqaJXX331lscCAIAtKarx/GauXr1qFcP1nJ2drcZpJycn1ahRQ0888YS6d++u9PR0zZs3T3379tWGDRv0wAMP5HmbwN2AZB6AqVKlSlbrmZfVnT9/3iyrWrWqqlatelv7+b//+z9du3YtyyX20j9n2h999FHt2rXLvIyuW7ducnNz04QJE/TUU0+pTp065naefPJJPfXUU5L+uRRw5MiR2rZtm+Li4rLd9+XLl/Xoo4/q4sWL+u6777LcSw8AgK0rqvH8ZlxcXJSSkpJt3bVr16y+JBgyZIh27dqln376yXxiTc+ePVW3bl29+OKL5u0BedkmcDcgmQdgsre3z7bcMAzz/5cuXdKlS5dyta2KFStmWxcZGSl3d3c9+uijWeo+/vhjeXt7Z7kfrmvXrho/frx27txpJvP33HOPvvvuOx0+fFjx8fGqXr26fHx85Ofnpxo1amTZdkpKirp37669e/dq3bp1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rC+//FKrV68utmMHAAAAACC/ivXM/Jw5c5SYmKg2bdrI19fXXJYuXWq2mT59uh599FH16NFDrVq1ko+Pj5YvX27W29vba9WqVbK3t1dQUJD69u2r/v37a+LEiWabKlWqaPXq1dqwYYMaNmyo999/X//+979z9Yx5AABw+yIiItS0aVO5urrKy8tL3bp1U1xcnFWbNm3ayGKxWC3PPfecVZtTp06pc+fOKl26tLy8vPTKK68oLS2tKA8FAIASoUQ9Z76k4pm0AICSrqSPVR06dFCvXr3UtGlTpaWl6fXXX9e+fft04MABlSlTRtI/yXyNGjWsvpAvXbq0eTzp6elq1KiRfHx8NGXKFJ0+fVr9+/fXM888o3feeSdXcZT0fgIAILdjVYmYAA8AANzZ1q5da7W+YMECeXl5KSYmRq1atTLLS5cubU5ge6P169frwIED2rhxo7y9vdWoUSNNmjRJo0aN0vjx4+Xo6FioxwAAQElSYh5NBwAA7h6JiYmSJE9PT6vyyMhIVahQQfXq1dPo0aN15coVsy46Olr169eXt7e3WRYSEqKkpCTt378/2/0kJycrKSnJagEA4E7AmXnccSq/lruJDU+827mQIwEAZCcjI0PDhw/XQw89pHr16pnlffr0UUBAgPz8/LR3716NGjVKcXFx5lw58fHxVom8JHM9cxLdG0VERGjChAmFdCTFg3EOACCRzAMAgCIWHh6uffv26bvvvrMqHzx4sPn/+vXry9fXV+3atdPRo0dVrVq1fO1r9OjRGjlypLmelJQkf3///AUOAEAJwmX2AACgyAwZMkSrVq3Sli1bdO+99960bfPmzSVJR44ckST5+PgoISHBqk3mek732Ts5OcnNzc1qAQDgTkAyDwAACp1hGBoyZIi+/vprbd68WVWqVLnla2JjYyVJvr6+kqSgoCD9+uuvOnPmjNlmw4YNcnNzU506dQolbgAASiouswcAAIUuPDxcUVFRWrlypVxdXc173N3d3eXi4qKjR48qKipKnTp1Uvny5bV3716NGDFCrVq1UoMGDSRJwcHBqlOnjvr166fJkycrPj5eY8aMUXh4uJycnIrz8AAAKHKcmQcAAIVuzpw5SkxMVJs2beTr62suS5culSQ5Ojpq48aNCg4OVq1atfTSSy+pR48e+vbbb81t2Nvba9WqVbK3t1dQUJD69u2r/v37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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"def target_corr(y, names, method=\"pearson\"):\n    df = pd.DataFrame(y, columns=names)\n    return df.corr(method=method)\n\ndef plot_corr(C, title):\n    plt.figure(figsize=(6.2,5))\n    ax = sns.heatmap(C, vmin=-1, vmax=1, annot=True, fmt=\".2f\",\n                     cmap=\"RdBu_r\", square=True, cbar_kws={\"label\":\"Pearson r\"})\n    ax.set_title(title)\n    plt.show()\n\n# y_raw  -> your original (with NaNs)\n# y_imp  -> your fully-imputed matrix\n# TARGETS -> ['Tg','FFV','Tc','Density','Rg']\n\n# Known-only (pairwise complete)\nC_known = pd.DataFrame(y_train_raw, columns=TARGETS).corr()  # pandas does pairwise-complete by default\nplot_corr(C_known, \"Targets correlation (known-only)\")\n\n# Imputed (full n)\nC_imputed = target_corr(y_imputed, TARGETS, method=\"pearson\")\nplot_corr(C_imputed, \"Targets correlation (imputed)\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:19.667221Z","iopub.execute_input":"2025-08-26T14:01:19.667589Z","iopub.status.idle":"2025-08-26T14:01:20.242321Z","shell.execute_reply.started":"2025-08-26T14:01:19.667564Z","shell.execute_reply":"2025-08-26T14:01:20.241362Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 620x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 620x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":27},{"cell_type":"markdown","source":"# Hyperparameter tuning using Optuna","metadata":{}},{"cell_type":"markdown","source":"## Optuna tuner for Light GBM","metadata":{}},{"cell_type":"code","source":"def tune_lgbm_mae(\n    X, y,\n    n_trials=40,\n    n_splits=3,\n    random_state=42,\n    early_stopping_rounds=200,\n    base_estimators=2000,   # large; ES finds best_iteration_\n):\n    mask = np.isfinite(y)\n    X, y = X[mask], y[mask]\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n\n    def objective(trial):\n        params = {\n            \"objective\": \"mae\",\n            \"n_estimators\": base_estimators,\n            \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.2, log=True),\n            \"num_leaves\":    trial.suggest_int(\"num_leaves\", 31, 255),\n            \"max_depth\":     trial.suggest_int(\"max_depth\", 4, 12),\n            \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 200),\n            \"min_split_gain\":    trial.suggest_float(\"min_split_gain\", 0.0, 1.0),\n            \"subsample\":         trial.suggest_float(\"subsample\", 0.6, 1.0),\n            \"colsample_bytree\":  trial.suggest_float(\"colsample_bytree\", 0.6, 1.0),\n            \"reg_alpha\":   trial.suggest_float(\"reg_alpha\", 1e-8, 1e-1, log=True),\n            \"reg_lambda\":  trial.suggest_float(\"reg_lambda\", 1e-8, 1e-1, log=True),\n            \"random_state\": random_state,\n            \"n_jobs\": -1,\n            \"verbosity\": -1,\n        }\n\n        maes = []\n        for fold_id, (tr, va) in enumerate(kf.split(X), 1):\n            X_tr, X_va = X[tr], X[va]\n            y_tr, y_va = y[tr], y[va]\n\n            model = LGBMRegressor(**params)\n            try:\n                import lightgbm as lgb\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)],\n                    eval_metric=\"l1\",\n                    callbacks=[\n                        lgb.early_stopping(early_stopping_rounds, verbose=False),\n                        lgb.log_evaluation(0),\n                    ],\n                )\n            except TypeError:\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)],\n                    eval_metric=\"l1\",\n                    early_stopping_rounds=early_stopping_rounds,\n                    verbose=False,\n                )\n\n            y_hat = model.predict(X_va)\n            mae = mean_absolute_error(y_va, y_hat)\n            maes.append(mae)\n            trial.report(mae, step=fold_id)\n            if trial.should_prune():\n                raise optuna.exceptions.TrialPruned()\n\n        return float(np.mean(maes))\n\n    study = optuna.create_study(direction=\"minimize\",\n                                pruner=optuna.pruners.MedianPruner(n_warmup_steps=1))\n    study.optimize(objective, n_trials=n_trials, show_progress_bar=False)\n    best = study.best_params\n\n    # Fit a final model to capture best_iteration_\n    X_tr, X_va, y_tr, y_va = train_test_split(X, y, test_size=0.1, random_state=random_state)\n    final = LGBMRegressor(\n        objective=\"mae\", n_estimators=base_estimators, n_jobs=-1, verbosity=-1,\n        random_state=random_state, **best\n    )\n    try:\n        import lightgbm as lgb\n        final.fit(\n            X_tr, y_tr,\n            eval_set=[(X_va, y_va)], eval_metric=\"l1\",\n            callbacks=[lgb.early_stopping(early_stopping_rounds, verbose=False),\n                       lgb.log_evaluation(0)]\n        )\n    except TypeError:\n        final.fit(\n            X_tr, y_tr,\n            eval_set=[(X_va, y_va)], eval_metric=\"l1\",\n            early_stopping_rounds=early_stopping_rounds, verbose=False\n        )\n\n    return best, study.best_value, final","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T22:12:05.922976Z","iopub.execute_input":"2025-08-25T22:12:05.923918Z","iopub.status.idle":"2025-08-25T22:12:05.937434Z","shell.execute_reply.started":"2025-08-25T22:12:05.923889Z","shell.execute_reply":"2025-08-25T22:12:05.936418Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"def tune_xgb_mae(\n    X, y,\n    n_trials=40,\n    n_splits=3,\n    random_state=42,\n    early_stopping_rounds=200,\n    base_estimators=4000,  # larger; ES picks best_ntree_limit\n):\n    mask = np.isfinite(y)\n    X, y = X[mask], y[mask]\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n\n    def objective(trial):\n        params = {\n            \"n_estimators\": base_estimators,\n            \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.3, log=True),\n            \"max_depth\": trial.suggest_int(\"max_depth\", 3, 12),\n            \"min_child_weight\": trial.suggest_float(\"min_child_weight\", 1e-2, 20.0, log=True),\n            \"subsample\": trial.suggest_float(\"subsample\", 0.6, 1.0),\n            \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.6, 1.0),\n            \"reg_alpha\": trial.suggest_float(\"reg_alpha\", 1e-8, 1e-1, log=True),\n            \"reg_lambda\": trial.suggest_float(\"reg_lambda\", 1e-8, 1.0, log=True),\n            \"gamma\": trial.suggest_float(\"gamma\", 0.0, 5.0),\n            \"objective\": \"reg:absoluteerror\",\n            \"tree_method\": \"hist\",\n            \"random_state\": random_state,\n            \"n_jobs\": -1,\n            \"verbosity\": 0,\n        }\n\n        maes = []\n        for fold_id, (tr, va) in enumerate(kf.split(X), 1):\n            X_tr, X_va = X[tr], X[va]\n            y_tr, y_va = y[tr], y[va]\n\n            model = XGBRegressor(**params)\n            try:\n                from xgboost.callback import EarlyStopping\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)], eval_metric=\"mae\",\n                    callbacks=[EarlyStopping(rounds=early_stopping_rounds, save_best=True, maximize=False)],\n                    verbose=False,\n                )\n            except Exception:\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)], eval_metric=\"mae\",\n                    early_stopping_rounds=early_stopping_rounds,\n                    verbose=False,\n                )\n\n            y_hat = model.predict(X_va)\n            mae = mean_absolute_error(y_va, y_hat)\n            maes.append(mae)\n            trial.report(mae, step=fold_id)\n            if trial.should_prune():\n                raise optuna.exceptions.TrialPruned()\n\n        return float(np.mean(maes))\n\n    study = optuna.create_study(direction=\"minimize\",\n                                pruner=optuna.pruners.MedianPruner(n_warmup_steps=1))\n    study.optimize(objective, n_trials=n_trials, show_progress_bar=False)\n    best = study.best_params\n\n    # Optional: fit a final ref model (captures best_ntree_limit internally)\n    X_tr, X_va, y_tr, y_va = train_test_split(X, y, test_size=0.1, random_state=random_state)\n    final = XGBRegressor(objective=\"reg:absoluteerror\", tree_method=\"hist\",\n                         random_state=random_state, n_jobs=-1, verbosity=0, **best)\n    try:\n        from xgboost.callback import EarlyStopping\n        final.fit(\n            X_tr, y_tr,\n            eval_set=[(X_va, y_va)], eval_metric=\"mae\",\n            callbacks=[EarlyStopping(rounds=early_stopping_rounds, save_best=True, maximize=False)],\n            verbose=False,\n        )\n    except Exception:\n        final.fit(\n            X_tr, y_tr,\n            eval_set=[(X_va, y_va)], eval_metric=\"mae\",\n            early_stopping_rounds=early_stopping_rounds,\n            verbose=False,\n        )\n\n    return best, study.best_value, final\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T22:12:05.938476Z","iopub.execute_input":"2025-08-25T22:12:05.938819Z","iopub.status.idle":"2025-08-25T22:12:05.964757Z","shell.execute_reply.started":"2025-08-25T22:12:05.938790Z","shell.execute_reply":"2025-08-25T22:12:05.963742Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"TUNED = {\"lgbm\": {}, \"xgb\": {}}  # per-target params\n\nfor j, name in enumerate(TARGETS):\n    X = Xsel_train[name]                           # your per-target features (np.ndarray)\n    y = y_imputed[:, j]     # your current labels (imputed or known-only)\n\n    # LGBM\n    best_lgbm, cv_mae_lgbm, _ = tune_lgbm_mae(X, y, n_trials=40, n_splits=3)\n    TUNED[\"lgbm\"][name] = best_lgbm\n    print(f\"[{name}] LGBM best CV MAE: {cv_mae_lgbm:.5f} | {best_lgbm}\")\n\n    # XGB\n    best_xgb, cv_mae_xgb, _ = tune_xgb_mae(X, y, n_trials=40, n_splits=3)\n    TUNED[\"xgb\"][name] = best_xgb\n    print(f\"[{name}] XGB  best CV MAE: {cv_mae_xgb:.5f} | {best_xgb}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T22:12:05.965865Z","iopub.execute_input":"2025-08-25T22:12:05.966528Z"}},"outputs":[{"name":"stderr","text":"[I 2025-08-25 22:12:05,993] A new study created in memory with name: no-name-bdcb54ca-b8e1-4b59-badb-e418b70a8bcf\n[I 2025-08-25 22:12:27,847] Trial 0 finished with value: 14.39978577614142 and parameters: {'learning_rate': 0.010749766172116745, 'num_leaves': 239, 'max_depth': 10, 'min_child_samples': 96, 'min_split_gain': 0.838380357579983, 'subsample': 0.7185461374947024, 'colsample_bytree': 0.8291164575960445, 'reg_alpha': 1.1947491070192017e-06, 'reg_lambda': 5.300675589077189e-05}. Best is trial 0 with value: 14.39978577614142.\n[I 2025-08-25 22:12:45,028] Trial 1 finished with value: 15.217415260502909 and parameters: {'learning_rate': 0.039573196723058784, 'num_leaves': 61, 'max_depth': 11, 'min_child_samples': 141, 'min_split_gain': 0.8797735158933905, 'subsample': 0.7504575813069535, 'colsample_bytree': 0.9654410829942842, 'reg_alpha': 5.833305727634206e-08, 'reg_lambda': 3.3626637065587756e-06}. Best is trial 0 with value: 14.39978577614142.\n[I 2025-08-25 22:13:00,380] Trial 2 finished with value: 15.08065621042897 and parameters: {'learning_rate': 0.07855727305289961, 'num_leaves': 234, 'max_depth': 12, 'min_child_samples': 157, 'min_split_gain': 0.8244437120664508, 'subsample': 0.7734371608084514, 'colsample_bytree': 0.8550022064458167, 'reg_alpha': 0.008838281297149208, 'reg_lambda': 2.2360079019082588e-07}. Best is trial 0 with value: 14.39978577614142.\n[I 2025-08-25 22:13:23,015] Trial 3 finished with value: 13.50558180638825 and parameters: {'learning_rate': 0.05606026622309325, 'num_leaves': 152, 'max_depth': 10, 'min_child_samples': 108, 'min_split_gain': 0.5457315249763508, 'subsample': 0.9673225650560806, 'colsample_bytree': 0.9250620164135669, 'reg_alpha': 1.0684728667305664e-07, 'reg_lambda': 8.450988114382135e-05}. Best is trial 3 with value: 13.50558180638825.\n[I 2025-08-25 22:13:32,278] Trial 4 finished with value: 13.651349111776865 and parameters: {'learning_rate': 0.06355894970626523, 'num_leaves': 248, 'max_depth': 4, 'min_child_samples': 43, 'min_split_gain': 0.261032456732194, 'subsample': 0.9564432688933857, 'colsample_bytree': 0.7981032369006893, 'reg_alpha': 6.9123128716861345e-06, 'reg_lambda': 5.7984142989529386e-06}. Best is trial 3 with value: 13.50558180638825.\n[I 2025-08-25 22:13:37,261] Trial 5 pruned. \n[I 2025-08-25 22:13:40,283] Trial 6 pruned. \n[I 2025-08-25 22:14:02,561] Trial 7 finished with value: 13.937205244318404 and parameters: {'learning_rate': 0.01183421680151059, 'num_leaves': 156, 'max_depth': 11, 'min_child_samples': 92, 'min_split_gain': 0.1757817291714222, 'subsample': 0.769329881567679, 'colsample_bytree': 0.6303927258484606, 'reg_alpha': 0.00041334306090498065, 'reg_lambda': 8.569035934793683e-07}. Best is trial 3 with value: 13.50558180638825.\n[I 2025-08-25 22:14:07,172] Trial 8 pruned. \n[I 2025-08-25 22:14:48,555] Trial 9 finished with value: 12.449856306789904 and parameters: {'learning_rate': 0.030394255241495503, 'num_leaves': 117, 'max_depth': 10, 'min_child_samples': 24, 'min_split_gain': 0.4828998279967198, 'subsample': 0.8265045555065571, 'colsample_bytree': 0.908087515927799, 'reg_alpha': 0.09529420255240964, 'reg_lambda': 0.0003821996649508573}. Best is trial 9 with value: 12.449856306789904.\n[I 2025-08-25 22:15:17,236] Trial 10 finished with value: 12.666193313722511 and parameters: {'learning_rate': 0.02476357619982158, 'num_leaves': 93, 'max_depth': 7, 'min_child_samples': 7, 'min_split_gain': 0.3502877850628746, 'subsample': 0.8676634867723284, 'colsample_bytree': 0.7345280547194765, 'reg_alpha': 0.07237214319423581, 'reg_lambda': 0.0027440617746870796}. Best is trial 9 with value: 12.449856306789904.\n[I 2025-08-25 22:15:46,883] Trial 11 finished with value: 12.868110089133529 and parameters: {'learning_rate': 0.021574534135606633, 'num_leaves': 114, 'max_depth': 7, 'min_child_samples': 5, 'min_split_gain': 0.3357801166338517, 'subsample': 0.8494338087782218, 'colsample_bytree': 0.7334915720881636, 'reg_alpha': 0.03951734612390093, 'reg_lambda': 0.002529403158854434}. Best is trial 9 with value: 12.449856306789904.\n[I 2025-08-25 22:16:25,854] Trial 12 finished with value: 12.415207288663254 and parameters: {'learning_rate': 0.026194810614749, 'num_leaves': 94, 'max_depth': 8, 'min_child_samples': 6, 'min_split_gain': 0.0012072916418108814, 'subsample': 0.8671772201140397, 'colsample_bytree': 0.7225805814336849, 'reg_alpha': 0.09770501647659605, 'reg_lambda': 0.001679531837695412}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:16:53,998] Trial 13 finished with value: 12.746293281037433 and parameters: {'learning_rate': 0.024296283622811766, 'num_leaves': 188, 'max_depth': 9, 'min_child_samples': 43, 'min_split_gain': 0.02369383157665439, 'subsample': 0.8290155972267205, 'colsample_bytree': 0.7114857935114542, 'reg_alpha': 0.0041185723567397185, 'reg_lambda': 0.0008449273153163129}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:17:18,654] Trial 14 finished with value: 12.871206741937039 and parameters: {'learning_rate': 0.03433142894592263, 'num_leaves': 84, 'max_depth': 9, 'min_child_samples': 48, 'min_split_gain': 0.7077592699902799, 'subsample': 0.905026278023995, 'colsample_bytree': 0.8935735368989227, 'reg_alpha': 0.005176412553550676, 'reg_lambda': 0.03603499200207062}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:17:23,245] Trial 15 pruned. \n[I 2025-08-25 22:17:45,594] Trial 16 finished with value: 13.08803688257695 and parameters: {'learning_rate': 0.03176532580469083, 'num_leaves': 186, 'max_depth': 9, 'min_child_samples': 67, 'min_split_gain': 0.406853384061355, 'subsample': 0.8145918031479851, 'colsample_bytree': 0.7849149843973965, 'reg_alpha': 3.4455501306666075e-05, 'reg_lambda': 0.010529046396756312}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:18:10,037] Trial 17 finished with value: 12.905538185072155 and parameters: {'learning_rate': 0.015728900394046726, 'num_leaves': 76, 'max_depth': 8, 'min_child_samples': 30, 'min_split_gain': 0.6828583612266342, 'subsample': 0.7210405079802709, 'colsample_bytree': 0.6810331664077822, 'reg_alpha': 0.0009539667848563877, 'reg_lambda': 0.0004199230683592525}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:18:18,458] Trial 18 pruned. \n[I 2025-08-25 22:18:53,111] Trial 19 finished with value: 12.63509329659747 and parameters: {'learning_rate': 0.017238374096700634, 'num_leaves': 113, 'max_depth': 10, 'min_child_samples': 28, 'min_split_gain': 0.970151915546162, 'subsample': 0.9007782247500189, 'colsample_bytree': 0.7784148140674386, 'reg_alpha': 2.6715003810551327e-06, 'reg_lambda': 1.5760480045378587e-08}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:18:59,745] Trial 20 pruned. \n[I 2025-08-25 22:19:37,395] Trial 21 finished with value: 12.540043260364541 and parameters: {'learning_rate': 0.016846640812412106, 'num_leaves': 111, 'max_depth': 10, 'min_child_samples': 23, 'min_split_gain': 0.970791343881543, 'subsample': 0.8955988778987231, 'colsample_bytree': 0.7590723451280832, 'reg_alpha': 1.662591466924566e-06, 'reg_lambda': 1.1083928924551585e-08}. Best is trial 12 with value: 12.415207288663254.\n[I 2025-08-25 22:20:24,327] Trial 22 finished with value: 12.299440178923726 and parameters: {'learning_rate': 0.020094610463041195, 'num_leaves': 128, 'max_depth': 11, 'min_child_samples': 21, 'min_split_gain': 0.7047467341257401, 'subsample': 0.7954575086284885, 'colsample_bytree': 0.6707476609023573, 'reg_alpha': 4.314990821679737e-07, 'reg_lambda': 0.0001304565035970189}. Best is trial 22 with value: 12.299440178923726.\n[I 2025-08-25 22:21:05,856] Trial 23 finished with value: 12.232320579707855 and parameters: {'learning_rate': 0.038683065455182124, 'num_leaves': 133, 'max_depth': 11, 'min_child_samples': 21, 'min_split_gain': 0.6589632179740776, 'subsample': 0.7899732349272367, 'colsample_bytree': 0.6767746318901976, 'reg_alpha': 4.2617653823374103e-07, 'reg_lambda': 0.00012946767668523673}. Best is trial 23 with value: 12.232320579707855.\n[I 2025-08-25 22:21:30,816] Trial 24 finished with value: 12.804293861002584 and parameters: {'learning_rate': 0.04970242507238436, 'num_leaves': 135, 'max_depth': 11, 'min_child_samples': 57, 'min_split_gain': 0.6911597443973219, 'subsample': 0.7855360355687508, 'colsample_bytree': 0.6705506088788595, 'reg_alpha': 4.745708326877097e-07, 'reg_lambda': 0.00010999955240843657}. Best is trial 23 with value: 12.232320579707855.\n[I 2025-08-25 22:22:46,096] Trial 25 finished with value: 12.1587512225177 and parameters: {'learning_rate': 0.04095805451700745, 'num_leaves': 163, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.7500077769708844, 'subsample': 0.8059215690516903, 'colsample_bytree': 0.6775932384420649, 'reg_alpha': 1.6633631144207404e-07, 'reg_lambda': 1.8541130667836747e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:23:31,130] Trial 26 finished with value: 12.28932835603735 and parameters: {'learning_rate': 0.03962558108068723, 'num_leaves': 170, 'max_depth': 12, 'min_child_samples': 20, 'min_split_gain': 0.7610014109426488, 'subsample': 0.6736621889256087, 'colsample_bytree': 0.6651807248796099, 'reg_alpha': 2.798001739884547e-07, 'reg_lambda': 2.2502537453818394e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:23:38,229] Trial 27 pruned. \n[I 2025-08-25 22:24:09,750] Trial 28 finished with value: 12.609479540927468 and parameters: {'learning_rate': 0.07475249152704527, 'num_leaves': 211, 'max_depth': 12, 'min_child_samples': 38, 'min_split_gain': 0.627749142032221, 'subsample': 0.6859886974059025, 'colsample_bytree': 0.6450311178045619, 'reg_alpha': 1.1259495966881374e-07, 'reg_lambda': 2.3367274745675205e-06}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:24:54,601] Trial 29 finished with value: 12.251868654592883 and parameters: {'learning_rate': 0.04453792157055312, 'num_leaves': 169, 'max_depth': 11, 'min_child_samples': 15, 'min_split_gain': 0.8747996910460316, 'subsample': 0.7333925471574001, 'colsample_bytree': 0.698591995459843, 'reg_alpha': 9.35347647661353e-06, 'reg_lambda': 3.5569369155282864e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:25:01,954] Trial 30 pruned. \n[I 2025-08-25 22:25:53,325] Trial 31 finished with value: 12.225397418339709 and parameters: {'learning_rate': 0.03955668325652122, 'num_leaves': 171, 'max_depth': 12, 'min_child_samples': 16, 'min_split_gain': 0.7875198463182155, 'subsample': 0.7476979034545, 'colsample_bytree': 0.6923036129277358, 'reg_alpha': 5.593549915998064e-07, 'reg_lambda': 4.40028190215941e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:26:43,199] Trial 32 finished with value: 12.182879291997017 and parameters: {'learning_rate': 0.04376014903771976, 'num_leaves': 161, 'max_depth': 11, 'min_child_samples': 11, 'min_split_gain': 0.8844374001732342, 'subsample': 0.7425651949971676, 'colsample_bytree': 0.6926503327704406, 'reg_alpha': 5.127461906972637e-06, 'reg_lambda': 6.50681559739916e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:27:21,154] Trial 33 finished with value: 12.413490917154334 and parameters: {'learning_rate': 0.03609675684991637, 'num_leaves': 204, 'max_depth': 12, 'min_child_samples': 33, 'min_split_gain': 0.8020984151487482, 'subsample': 0.7619192938106152, 'colsample_bytree': 0.7546478851866953, 'reg_alpha': 8.530765984193678e-07, 'reg_lambda': 5.584153597026001e-06}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:28:10,167] Trial 34 finished with value: 12.261522094763572 and parameters: {'learning_rate': 0.04848452368968537, 'num_leaves': 160, 'max_depth': 12, 'min_child_samples': 14, 'min_split_gain': 0.9375214105873465, 'subsample': 0.8047144442706076, 'colsample_bytree': 0.6461181014213314, 'reg_alpha': 9.20577749664275e-08, 'reg_lambda': 7.431623369932341e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:28:18,929] Trial 35 pruned. \n[I 2025-08-25 22:28:48,678] Trial 36 finished with value: 12.671359463610635 and parameters: {'learning_rate': 0.06005470522936004, 'num_leaves': 179, 'max_depth': 11, 'min_child_samples': 40, 'min_split_gain': 0.8188486251762052, 'subsample': 0.7515365411500581, 'colsample_bytree': 0.8288844777711104, 'reg_alpha': 3.293390053482536e-06, 'reg_lambda': 0.00019033186770626298}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:29:27,757] Trial 37 finished with value: 12.277860590070675 and parameters: {'learning_rate': 0.03940984513575435, 'num_leaves': 232, 'max_depth': 10, 'min_child_samples': 14, 'min_split_gain': 0.8722556435033777, 'subsample': 0.7814647648985641, 'colsample_bytree': 0.6550325746989609, 'reg_alpha': 2.1188818394967698e-07, 'reg_lambda': 1.0896306090575023e-05}. Best is trial 25 with value: 12.1587512225177.\n[I 2025-08-25 22:29:33,423] Trial 38 pruned. \n[I 2025-08-25 22:29:40,816] Trial 39 pruned. \n[I 2025-08-25 22:30:05,583] A new study created in memory with name: no-name-cedb3165-3021-45f6-b189-fce78b127e37\n","output_type":"stream"},{"name":"stdout","text":"[Tg] LGBM best CV MAE: 12.15875 | {'learning_rate': 0.04095805451700745, 'num_leaves': 163, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.7500077769708844, 'subsample': 0.8059215690516903, 'colsample_bytree': 0.6775932384420649, 'reg_alpha': 1.6633631144207404e-07, 'reg_lambda': 1.8541130667836747e-05}\n","output_type":"stream"},{"name":"stderr","text":"[I 2025-08-25 22:32:50,860] Trial 0 finished with value: 12.773877058770642 and parameters: {'learning_rate': 0.06029846818950776, 'max_depth': 9, 'min_child_weight': 0.7672882970982127, 'subsample': 0.7809270971856077, 'colsample_bytree': 0.8993828949105731, 'reg_alpha': 0.0010529026046637894, 'reg_lambda': 6.613074357129531e-06, 'gamma': 0.3063123808442575}. Best is trial 0 with value: 12.773877058770642.\n[I 2025-08-25 22:34:46,883] Trial 1 finished with value: 12.611724585490213 and parameters: {'learning_rate': 0.12047291994687387, 'max_depth': 9, 'min_child_weight': 6.368482380354779, 'subsample': 0.6681162700372486, 'colsample_bytree': 0.7204561594211127, 'reg_alpha': 1.976367723482119e-05, 'reg_lambda': 4.507075128789039e-06, 'gamma': 0.453782347303357}. Best is trial 1 with value: 12.611724585490213.\n[I 2025-08-25 22:35:53,004] Trial 2 finished with value: 12.592501236018904 and parameters: {'learning_rate': 0.018974189687147015, 'max_depth': 5, 'min_child_weight': 0.39050485120092276, 'subsample': 0.6357077636487473, 'colsample_bytree': 0.7311669952910396, 'reg_alpha': 1.3100039591535475e-08, 'reg_lambda': 0.0005474965766933096, 'gamma': 1.0179704947477335}. Best is trial 2 with value: 12.592501236018904.\n[I 2025-08-25 22:39:17,583] Trial 3 finished with value: 11.975085772147844 and parameters: {'learning_rate': 0.04275532710504177, 'max_depth': 11, 'min_child_weight': 6.861965636274059, 'subsample': 0.7493420684255803, 'colsample_bytree': 0.9555025468380822, 'reg_alpha': 0.00519638353398212, 'reg_lambda': 0.24962050964618968, 'gamma': 0.00027260736532253027}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 22:39:44,012] Trial 4 finished with value: 15.070774232960057 and parameters: {'learning_rate': 0.27497227937752994, 'max_depth': 7, 'min_child_weight': 0.907425820957624, 'subsample': 0.6658398037010298, 'colsample_bytree': 0.6772950931505374, 'reg_alpha': 2.7436497570733527e-07, 'reg_lambda': 5.698919004239833e-07, 'gamma': 0.2917428343420275}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 22:41:35,079] Trial 5 finished with value: 12.196292169259353 and parameters: {'learning_rate': 0.03441187442209486, 'max_depth': 7, 'min_child_weight': 0.012752034341172636, 'subsample': 0.6750545456690106, 'colsample_bytree': 0.9490839569344316, 'reg_alpha': 5.229160809996066e-07, 'reg_lambda': 0.35728215901036126, 'gamma': 1.7229893827213423}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 22:43:42,457] Trial 6 pruned. \n[I 2025-08-25 22:44:20,873] Trial 7 pruned. \n[I 2025-08-25 22:44:33,711] Trial 8 pruned. \n[I 2025-08-25 22:44:42,670] Trial 9 pruned. \n[I 2025-08-25 22:49:39,054] Trial 10 finished with value: 12.185708744991649 and parameters: {'learning_rate': 0.011305070620901686, 'max_depth': 12, 'min_child_weight': 4.916639425688616, 'subsample': 0.9211292242290756, 'colsample_bytree': 0.992690306272916, 'reg_alpha': 0.08208582820511977, 'reg_lambda': 0.2551176764228968, 'gamma': 3.471870443554245}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 22:54:30,395] Trial 11 finished with value: 12.205378197043629 and parameters: {'learning_rate': 0.012129301904901336, 'max_depth': 12, 'min_child_weight': 4.791264477755206, 'subsample': 0.9571924401839882, 'colsample_bytree': 0.9963952759049195, 'reg_alpha': 0.06449602615709564, 'reg_lambda': 0.6918944029220147, 'gamma': 3.3461319319898073}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 23:00:04,009] Trial 12 finished with value: 12.185590352271474 and parameters: {'learning_rate': 0.0100349105540583, 'max_depth': 12, 'min_child_weight': 3.290431355328696, 'subsample': 0.9139735547189755, 'colsample_bytree': 0.970503805525648, 'reg_alpha': 0.08251411434265592, 'reg_lambda': 0.016782497145931285, 'gamma': 2.7414064096335373}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 23:00:22,466] Trial 13 pruned. \n[I 2025-08-25 23:01:36,798] Trial 14 pruned. \n[I 2025-08-25 23:03:09,082] Trial 15 pruned. \n[I 2025-08-25 23:03:12,047] Trial 16 pruned. \n[I 2025-08-25 23:04:16,462] Trial 17 pruned. \n[I 2025-08-25 23:04:32,661] Trial 18 pruned. \n[I 2025-08-25 23:06:16,750] Trial 19 pruned. \n[I 2025-08-25 23:06:42,057] Trial 20 pruned. \n[I 2025-08-25 23:11:52,896] Trial 21 finished with value: 12.149951407106732 and parameters: {'learning_rate': 0.010321605782210008, 'max_depth': 12, 'min_child_weight': 4.691372462576702, 'subsample': 0.91922156319165, 'colsample_bytree': 0.9902957055045171, 'reg_alpha': 0.050105251643785584, 'reg_lambda': 0.20218874758601732, 'gamma': 3.218788677201284}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 23:15:44,035] Trial 22 finished with value: 12.027120310091286 and parameters: {'learning_rate': 0.013738950501660031, 'max_depth': 12, 'min_child_weight': 10.288102242218306, 'subsample': 0.9546626857723891, 'colsample_bytree': 0.9054400469885513, 'reg_alpha': 0.09088052888318912, 'reg_lambda': 0.13009127563201742, 'gamma': 2.887305576279538}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 23:18:47,763] Trial 23 finished with value: 12.113895628127901 and parameters: {'learning_rate': 0.014747433386633056, 'max_depth': 11, 'min_child_weight': 9.786601042858662, 'subsample': 0.9891308259606297, 'colsample_bytree': 0.9166162924546546, 'reg_alpha': 0.012077950960711927, 'reg_lambda': 0.13446478361424385, 'gamma': 3.891610884993272}. Best is trial 3 with value: 11.975085772147844.\n[I 2025-08-25 23:19:31,224] Trial 24 pruned. \n[I 2025-08-25 23:21:09,121] Trial 25 finished with value: 11.951873295240341 and parameters: {'learning_rate': 0.02442862371533056, 'max_depth': 11, 'min_child_weight': 12.201603233542318, 'subsample': 0.7630717207650355, 'colsample_bytree': 0.7755940861245381, 'reg_alpha': 0.0008008437978033723, 'reg_lambda': 0.004271405446384849, 'gamma': 4.709835991110518}. Best is trial 25 with value: 11.951873295240341.\n[I 2025-08-25 23:22:25,451] Trial 26 finished with value: 12.122188871951833 and parameters: {'learning_rate': 0.026958869152435037, 'max_depth': 10, 'min_child_weight': 18.833668921027517, 'subsample': 0.7573655862693315, 'colsample_bytree': 0.7750377197467198, 'reg_alpha': 0.00015082377355849524, 'reg_lambda': 0.00425342301514546, 'gamma': 4.807474111565542}. Best is trial 25 with value: 11.951873295240341.\n[I 2025-08-25 23:23:52,813] Trial 27 finished with value: 12.096323735451975 and parameters: {'learning_rate': 0.047302351291852965, 'max_depth': 8, 'min_child_weight': 1.2943326160000195, 'subsample': 0.8212744094495714, 'colsample_bytree': 0.761188164400497, 'reg_alpha': 0.0008768790932328013, 'reg_lambda': 0.772147935340057, 'gamma': 4.5404134082893215}. Best is trial 25 with value: 11.951873295240341.\n[I 2025-08-25 23:26:20,699] Trial 28 finished with value: 11.781933138908343 and parameters: {'learning_rate': 0.02369792896552243, 'max_depth': 11, 'min_child_weight': 13.155037718836958, 'subsample': 0.7685159626283173, 'colsample_bytree': 0.804933756830599, 'reg_alpha': 0.0017869005868745977, 'reg_lambda': 0.08328111069013848, 'gamma': 2.1151211490261392}. Best is trial 28 with value: 11.781933138908343.\n[I 2025-08-25 23:28:23,639] Trial 29 finished with value: 11.957174391367507 and parameters: {'learning_rate': 0.029902915962176, 'max_depth': 9, 'min_child_weight': 3.7674002113996554, 'subsample': 0.7635558882103937, 'colsample_bytree': 0.6486918784748786, 'reg_alpha': 0.001334545746954141, 'reg_lambda': 8.242419984017322e-06, 'gamma': 2.136073550889626}. Best is trial 28 with value: 11.781933138908343.\n[I 2025-08-25 23:30:01,680] Trial 30 finished with value: 11.88362402194057 and parameters: {'learning_rate': 0.06350507992425143, 'max_depth': 9, 'min_child_weight': 13.283680696984476, 'subsample': 0.7710227925678085, 'colsample_bytree': 0.621909769386937, 'reg_alpha': 0.0010642084223999166, 'reg_lambda': 2.8892832261217886e-05, 'gamma': 1.5317535119801229}. Best is trial 28 with value: 11.781933138908343.\n[I 2025-08-25 23:31:33,717] Trial 31 finished with value: 12.003391300138707 and parameters: {'learning_rate': 0.05991824852054792, 'max_depth': 9, 'min_child_weight': 15.644067349306276, 'subsample': 0.7707411447751614, 'colsample_bytree': 0.6155696633018921, 'reg_alpha': 0.0013024735258600863, 'reg_lambda': 1.2656287991312554e-05, 'gamma': 2.118918109529435}. Best is trial 28 with value: 11.781933138908343.\n[I 2025-08-25 23:33:40,822] Trial 32 finished with value: 12.025065777824457 and parameters: {'learning_rate': 0.032042882833005375, 'max_depth': 9, 'min_child_weight': 3.3383676845661117, 'subsample': 0.801063874737813, 'colsample_bytree': 0.6602814144286644, 'reg_alpha': 8.856453295270931e-05, 'reg_lambda': 1.2934251720532907e-05, 'gamma': 1.2454170880022521}. Best is trial 28 with value: 11.781933138908343.\n[I 2025-08-25 23:35:12,913] Trial 33 finished with value: 11.72040003736132 and parameters: {'learning_rate': 0.021580480664655753, 'max_depth': 8, 'min_child_weight': 11.346169572675375, 'subsample': 0.6116819871205426, 'colsample_bytree': 0.6475902353329832, 'reg_alpha': 7.428239390441951e-06, 'reg_lambda': 3.141625772153358e-06, 'gamma': 0.6636414864751927}. Best is trial 33 with value: 11.72040003736132.\n[I 2025-08-25 23:36:48,592] Trial 34 finished with value: 11.775557022378907 and parameters: {'learning_rate': 0.020752788308800264, 'max_depth': 8, 'min_child_weight': 12.286426837237915, 'subsample': 0.701539167266606, 'colsample_bytree': 0.7353400471116032, 'reg_alpha': 1.0991499764285521e-05, 'reg_lambda': 4.253162392870269e-05, 'gamma': 1.3559126690461092}. Best is trial 33 with value: 11.72040003736132.\n[I 2025-08-25 23:38:31,986] Trial 35 finished with value: 11.761812250447129 and parameters: {'learning_rate': 0.02146099235680253, 'max_depth': 8, 'min_child_weight': 6.787387386287734, 'subsample': 0.6046956578137045, 'colsample_bytree': 0.7249604835328931, 'reg_alpha': 6.292418215543343e-06, 'reg_lambda': 2.4282547019594143e-06, 'gamma': 0.6951225663118348}. Best is trial 33 with value: 11.72040003736132.\n[I 2025-08-25 23:39:44,570] Trial 36 finished with value: 12.026998987114865 and parameters: {'learning_rate': 0.02033865255799896, 'max_depth': 6, 'min_child_weight': 6.375441246226505, 'subsample': 0.611859654340283, 'colsample_bytree': 0.7132938363889427, 'reg_alpha': 7.319865400160035e-06, 'reg_lambda': 2.792273499805798e-06, 'gamma': 0.4384919646389501}. Best is trial 33 with value: 11.72040003736132.\n[I 2025-08-25 23:41:29,030] Trial 37 finished with value: 11.806104107956761 and parameters: {'learning_rate': 0.016710814239322906, 'max_depth': 8, 'min_child_weight': 6.661945291388008, 'subsample': 0.6001973943891942, 'colsample_bytree': 0.7259620496429066, 'reg_alpha': 9.531966058983891e-06, 'reg_lambda': 1.2920388634051618e-06, 'gamma': 0.7444333617609382}. Best is trial 33 with value: 11.72040003736132.\n[I 2025-08-25 23:41:55,183] Trial 38 pruned. \n[I 2025-08-25 23:42:26,691] Trial 39 pruned. \n[I 2025-08-25 23:42:27,726] A new study created in memory with name: no-name-9d6a98ff-67ab-447f-9680-94f6029a1962\n","output_type":"stream"},{"name":"stdout","text":"[Tg] XGB  best CV MAE: 11.72040 | {'learning_rate': 0.021580480664655753, 'max_depth': 8, 'min_child_weight': 11.346169572675375, 'subsample': 0.6116819871205426, 'colsample_bytree': 0.6475902353329832, 'reg_alpha': 7.428239390441951e-06, 'reg_lambda': 3.141625772153358e-06, 'gamma': 0.6636414864751927}\n","output_type":"stream"},{"name":"stderr","text":"[I 2025-08-25 23:43:04,217] Trial 0 finished with value: 0.007017184634863415 and parameters: {'learning_rate': 0.17358216515217442, 'num_leaves': 248, 'max_depth': 12, 'min_child_samples': 33, 'min_split_gain': 0.710240402871159, 'subsample': 0.6386089810808211, 'colsample_bytree': 0.9766893980954809, 'reg_alpha': 7.251760380379316e-05, 'reg_lambda': 7.21067560139862e-07}. Best is trial 0 with value: 0.007017184634863415.\n[I 2025-08-25 23:43:19,520] Trial 1 finished with value: 0.007004438548572374 and parameters: {'learning_rate': 0.13148293741610695, 'num_leaves': 237, 'max_depth': 9, 'min_child_samples': 59, 'min_split_gain': 0.9557318120840661, 'subsample': 0.917325437494254, 'colsample_bytree': 0.6929277571207213, 'reg_alpha': 0.0011476064674561227, 'reg_lambda': 7.133789455023795e-05}. Best is trial 1 with value: 0.007004438548572374.\n[I 2025-08-25 23:43:57,330] Trial 2 finished with value: 0.006977782593485828 and parameters: {'learning_rate': 0.012594307229840871, 'num_leaves': 232, 'max_depth': 12, 'min_child_samples': 37, 'min_split_gain': 0.9945194468008008, 'subsample': 0.9150683061755569, 'colsample_bytree': 0.8512638134377618, 'reg_alpha': 1.4799080122808063e-07, 'reg_lambda': 0.0033637682755946223}. Best is trial 2 with value: 0.006977782593485828.\n[I 2025-08-25 23:44:35,394] Trial 3 finished with value: 0.0068790030528411775 and parameters: {'learning_rate': 0.011582046536721596, 'num_leaves': 144, 'max_depth': 10, 'min_child_samples': 31, 'min_split_gain': 0.1452375937084488, 'subsample': 0.8733037155720393, 'colsample_bytree': 0.652683494999389, 'reg_alpha': 0.0052550194353204295, 'reg_lambda': 0.052329517392638976}. Best is trial 3 with value: 0.0068790030528411775.\n[I 2025-08-25 23:44:49,204] Trial 4 finished with value: 0.00737390133224342 and parameters: {'learning_rate': 0.020401278740670326, 'num_leaves': 157, 'max_depth': 7, 'min_child_samples': 126, 'min_split_gain': 0.1518818276605145, 'subsample': 0.8652806927715075, 'colsample_bytree': 0.637054716177284, 'reg_alpha': 3.647928990031845e-06, 'reg_lambda': 3.858026139667758e-06}. Best is trial 3 with value: 0.0068790030528411775.\n[I 2025-08-25 23:45:14,520] Trial 5 finished with value: 0.0068314463045500776 and parameters: {'learning_rate': 0.10046428209643432, 'num_leaves': 158, 'max_depth': 8, 'min_child_samples': 16, 'min_split_gain': 0.11622844223129514, 'subsample': 0.8511542463399233, 'colsample_bytree': 0.8247642007282487, 'reg_alpha': 1.1119173037471963e-07, 'reg_lambda': 0.004961871644561242}. Best is trial 5 with value: 0.0068314463045500776.\n[I 2025-08-25 23:45:21,571] Trial 6 pruned. \n[I 2025-08-25 23:45:27,134] Trial 7 pruned. \n[I 2025-08-25 23:45:30,093] Trial 8 pruned. \n[I 2025-08-25 23:45:36,751] Trial 9 pruned. \n[I 2025-08-25 23:45:51,935] Trial 10 finished with value: 0.0069618077843665895 and parameters: {'learning_rate': 0.0931378184180789, 'num_leaves': 49, 'max_depth': 6, 'min_child_samples': 9, 'min_split_gain': 0.3351571433064584, 'subsample': 0.7367657427831655, 'colsample_bytree': 0.7682765284557552, 'reg_alpha': 1.166746097445894e-08, 'reg_lambda': 0.0002700197093706112}. Best is trial 5 with value: 0.0068314463045500776.\n[I 2025-08-25 23:46:30,157] Trial 11 finished with value: 0.006687393849462025 and parameters: {'learning_rate': 0.03872589142010371, 'num_leaves': 173, 'max_depth': 9, 'min_child_samples': 9, 'min_split_gain': 0.2773918200040909, 'subsample': 0.7816675786182297, 'colsample_bytree': 0.6081637780427402, 'reg_alpha': 0.066803442291502, 'reg_lambda': 0.08320199055769407}. Best is trial 11 with value: 0.006687393849462025.\n[I 2025-08-25 23:46:35,415] Trial 12 pruned. \n[I 2025-08-25 23:46:40,188] Trial 13 pruned. \n[I 2025-08-25 23:46:48,347] Trial 14 pruned. \n[I 2025-08-25 23:46:53,672] Trial 15 pruned. \n[I 2025-08-25 23:46:59,899] Trial 16 pruned. \n[I 2025-08-25 23:47:03,263] Trial 17 pruned. \n[I 2025-08-25 23:47:08,393] Trial 18 pruned. \n[I 2025-08-25 23:47:18,717] Trial 19 pruned. \n[I 2025-08-25 23:47:24,635] Trial 20 pruned. \n[I 2025-08-25 23:48:05,608] Trial 21 finished with value: 0.006851584726729156 and parameters: {'learning_rate': 0.012244806906619225, 'num_leaves': 141, 'max_depth': 10, 'min_child_samples': 26, 'min_split_gain': 0.10476153597540594, 'subsample': 0.8448772547734867, 'colsample_bytree': 0.6432345124810882, 'reg_alpha': 0.013826731290686222, 'reg_lambda': 0.031773923602517115}. Best is trial 11 with value: 0.006687393849462025.\n[I 2025-08-25 23:48:15,068] Trial 22 pruned. \n[I 2025-08-25 23:48:54,090] Trial 23 finished with value: 0.006827297438648857 and parameters: {'learning_rate': 0.014960048435970158, 'num_leaves': 64, 'max_depth': 11, 'min_child_samples': 22, 'min_split_gain': 0.2093913514339969, 'subsample': 0.8356485334561429, 'colsample_bytree': 0.6527449282313227, 'reg_alpha': 0.018439858063148545, 'reg_lambda': 0.017525575991558868}. Best is trial 11 with value: 0.006687393849462025.\n[I 2025-08-25 23:49:38,484] Trial 24 finished with value: 0.006775806323591074 and parameters: {'learning_rate': 0.016503628662669606, 'num_leaves': 69, 'max_depth': 11, 'min_child_samples': 16, 'min_split_gain': 0.23802549642950105, 'subsample': 0.8312382456429004, 'colsample_bytree': 0.687404298225884, 'reg_alpha': 0.07943024590165988, 'reg_lambda': 0.0017941438673838002}. Best is trial 11 with value: 0.006687393849462025.\n[I 2025-08-25 23:49:45,622] Trial 25 pruned. \n[I 2025-08-25 23:49:57,604] Trial 26 pruned. \n[I 2025-08-25 23:50:06,964] Trial 27 pruned. \n[I 2025-08-25 23:50:48,100] Trial 28 finished with value: 0.006687166966464123 and parameters: {'learning_rate': 0.02892509052789686, 'num_leaves': 75, 'max_depth': 11, 'min_child_samples': 19, 'min_split_gain': 0.2888946525577824, 'subsample': 0.7375307631151873, 'colsample_bytree': 0.6668242047006183, 'reg_alpha': 0.09498372628835967, 'reg_lambda': 0.0003230147490698061}. Best is trial 28 with value: 0.006687166966464123.\n[I 2025-08-25 23:51:56,461] Trial 29 finished with value: 0.00668397671908041 and parameters: {'learning_rate': 0.025323129414137762, 'num_leaves': 84, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.5588079799323852, 'subsample': 0.6746747713997171, 'colsample_bytree': 0.9961590337178567, 'reg_alpha': 6.625180967951214e-05, 'reg_lambda': 1.101120623728988e-05}. Best is trial 29 with value: 0.00668397671908041.\n[I 2025-08-25 23:52:02,603] Trial 30 pruned. \n[I 2025-08-25 23:52:17,123] Trial 31 pruned. \n[I 2025-08-25 23:52:43,580] Trial 32 finished with value: 0.006701948598838942 and parameters: {'learning_rate': 0.04161426698603257, 'num_leaves': 37, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.6853300199862565, 'subsample': 0.705721024603533, 'colsample_bytree': 0.6743484280688999, 'reg_alpha': 0.09428987567163163, 'reg_lambda': 1.694885104971026e-05}. Best is trial 29 with value: 0.00668397671908041.\n[I 2025-08-25 23:53:07,336] Trial 33 finished with value: 0.006793906877030899 and parameters: {'learning_rate': 0.045053950861461654, 'num_leaves': 32, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.8500849972167234, 'subsample': 0.6962211540593176, 'colsample_bytree': 0.7146998339358479, 'reg_alpha': 0.0016286285115262973, 'reg_lambda': 1.2560479197282976e-05}. Best is trial 29 with value: 0.00668397671908041.\n[I 2025-08-25 23:53:35,595] Trial 34 finished with value: 0.006823916071652527 and parameters: {'learning_rate': 0.03662343066765693, 'num_leaves': 54, 'max_depth': 12, 'min_child_samples': 34, 'min_split_gain': 0.6596402911964526, 'subsample': 0.7285684659726972, 'colsample_bytree': 0.6262060881260715, 'reg_alpha': 0.00752973708636267, 'reg_lambda': 7.454578504800849e-07}. Best is trial 29 with value: 0.00668397671908041.\n[I 2025-08-25 23:54:01,449] Trial 35 finished with value: 0.00675326765576851 and parameters: {'learning_rate': 0.04237569277500462, 'num_leaves': 48, 'max_depth': 10, 'min_child_samples': 21, 'min_split_gain': 0.6780145326414839, 'subsample': 0.6649348934932275, 'colsample_bytree': 0.6654871118446274, 'reg_alpha': 0.030311005436270397, 'reg_lambda': 9.15966008761037e-06}. Best is trial 29 with value: 0.00668397671908041.\n[I 2025-08-25 23:54:05,879] Trial 36 pruned. \n[I 2025-08-25 23:54:17,083] Trial 37 pruned. \n[I 2025-08-25 23:54:39,872] Trial 38 pruned. \n[I 2025-08-25 23:54:46,799] Trial 39 pruned. \n[I 2025-08-25 23:55:09,947] A new study created in memory with name: no-name-dbabcc92-9153-4dde-881f-99e3b97a0ed2\n","output_type":"stream"},{"name":"stdout","text":"[FFV] LGBM best CV MAE: 0.00668 | {'learning_rate': 0.025323129414137762, 'num_leaves': 84, 'max_depth': 12, 'min_child_samples': 5, 'min_split_gain': 0.5588079799323852, 'subsample': 0.6746747713997171, 'colsample_bytree': 0.9961590337178567, 'reg_alpha': 6.625180967951214e-05, 'reg_lambda': 1.101120623728988e-05}\n","output_type":"stream"},{"name":"stderr","text":"[I 2025-08-25 23:56:20,780] Trial 0 finished with value: 0.007045118010039201 and parameters: {'learning_rate': 0.014422808965488662, 'max_depth': 5, 'min_child_weight': 0.11232329821147734, 'subsample': 0.8014730710868475, 'colsample_bytree': 0.9595315645180323, 'reg_alpha': 0.00507509528817316, 'reg_lambda': 0.004483651924090754, 'gamma': 2.310043833475942}. Best is trial 0 with value: 0.007045118010039201.\n[I 2025-08-25 23:56:55,507] Trial 1 finished with value: 0.007136303829433508 and parameters: {'learning_rate': 0.20253730380686594, 'max_depth': 12, 'min_child_weight': 2.294640520849231, 'subsample': 0.6193915922141321, 'colsample_bytree': 0.8130224440852454, 'reg_alpha': 1.2773840546910262e-06, 'reg_lambda': 1.0333404493178277e-05, 'gamma': 4.849656562259202}. Best is trial 0 with value: 0.007045118010039201.\n[I 2025-08-25 23:58:28,989] Trial 2 finished with value: 0.006519761842009097 and parameters: {'learning_rate': 0.026054327522041107, 'max_depth': 8, 'min_child_weight': 6.175465579255258, 'subsample': 0.6233832628242132, 'colsample_bytree': 0.7391573443502301, 'reg_alpha': 0.09143846205174469, 'reg_lambda': 3.1435805264746944e-07, 'gamma': 2.9018926618746748}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-25 23:59:11,578] Trial 3 finished with value: 0.007137962991774172 and parameters: {'learning_rate': 0.0863617507428651, 'max_depth': 3, 'min_child_weight': 0.5047773266170036, 'subsample': 0.7330019900273782, 'colsample_bytree': 0.7046339302057558, 'reg_alpha': 2.0297336133687764e-07, 'reg_lambda': 2.362295583663471e-08, 'gamma': 4.877863064318348}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:01:09,904] Trial 4 finished with value: 0.006554638667376327 and parameters: {'learning_rate': 0.018756543365912204, 'max_depth': 8, 'min_child_weight': 0.5438028695966215, 'subsample': 0.6230570451726899, 'colsample_bytree': 0.8911700783845826, 'reg_alpha': 2.4033597597069623e-05, 'reg_lambda': 0.10549542455090549, 'gamma': 4.13584064214472}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:01:28,352] Trial 5 pruned. \n[I 2025-08-26 00:02:30,724] Trial 6 finished with value: 0.00698326551223163 and parameters: {'learning_rate': 0.09172628678184337, 'max_depth': 11, 'min_child_weight': 1.1103960867720022, 'subsample': 0.60351435474661, 'colsample_bytree': 0.6830284624333726, 'reg_alpha': 3.001021154966804e-08, 'reg_lambda': 7.740158859303343e-05, 'gamma': 1.4171386690957948}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:03:21,560] Trial 7 pruned. \n[I 2025-08-26 00:03:39,619] Trial 8 pruned. \n[I 2025-08-26 00:04:40,194] Trial 9 finished with value: 0.006781940841862507 and parameters: {'learning_rate': 0.0892800554911331, 'max_depth': 6, 'min_child_weight': 14.933155873741507, 'subsample': 0.6348213103976783, 'colsample_bytree': 0.6245178348636015, 'reg_alpha': 0.000311007267518859, 'reg_lambda': 1.4668094043488544e-07, 'gamma': 3.158882607620747}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:08:56,642] Trial 11 finished with value: 0.006589694735844719 and parameters: {'learning_rate': 0.011864121414877532, 'max_depth': 8, 'min_child_weight': 0.04280006743064114, 'subsample': 0.7130674732228921, 'colsample_bytree': 0.9785854350155133, 'reg_alpha': 1.1496243067488664e-05, 'reg_lambda': 0.6230254769705612, 'gamma': 4.099760622032799}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:11:32,685] Trial 12 finished with value: 0.00659981305993651 and parameters: {'learning_rate': 0.02177713847584773, 'max_depth': 9, 'min_child_weight': 0.012643574971274956, 'subsample': 0.7243709081572813, 'colsample_bytree': 0.9263415181815178, 'reg_alpha': 8.823444468183317e-06, 'reg_lambda': 0.9200780477470166, 'gamma': 1.9019664821900504}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:12:04,135] Trial 13 pruned. \n[I 2025-08-26 00:13:20,189] Trial 14 finished with value: 0.0066225840650783055 and parameters: {'learning_rate': 0.04035748463081566, 'max_depth': 7, 'min_child_weight': 1.1622692485481039, 'subsample': 0.6896126512113802, 'colsample_bytree': 0.896760678769812, 'reg_alpha': 0.097835639194779, 'reg_lambda': 8.130574912133618e-05, 'gamma': 1.2083057036559586}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:15:06,485] Trial 15 finished with value: 0.006576749760866033 and parameters: {'learning_rate': 0.021649473938953098, 'max_depth': 8, 'min_child_weight': 0.27025257176786904, 'subsample': 0.7944666274984313, 'colsample_bytree': 0.7948659998090559, 'reg_alpha': 6.394364422265255e-05, 'reg_lambda': 2.4269959925757517e-06, 'gamma': 4.045937854235238}. Best is trial 2 with value: 0.006519761842009097.\n[I 2025-08-26 00:15:36,795] Trial 16 pruned. \n[I 2025-08-26 00:17:57,518] Trial 17 finished with value: 0.006505676440313757 and parameters: {'learning_rate': 0.01652408518736028, 'max_depth': 10, 'min_child_weight': 1.4940222783968995, 'subsample': 0.6634816706376321, 'colsample_bytree': 0.8372574125772491, 'reg_alpha': 0.0014422818735336399, 'reg_lambda': 0.0002934741705569429, 'gamma': 3.4345090216093133}. Best is trial 17 with value: 0.006505676440313757.\n[I 2025-08-26 00:18:33,439] Trial 18 pruned. \n[I 2025-08-26 00:21:05,277] Trial 19 pruned. \n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"TUNED   \n# #Tg XGB\n# #FFV XGB\n# #Tc XGB\n# #Density XGB\n# #Rg XGB","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T00:54:29.374075Z","iopub.execute_input":"2025-08-22T00:54:29.374505Z","iopub.status.idle":"2025-08-22T00:54:29.387150Z","shell.execute_reply.started":"2025-08-22T00:54:29.374430Z","shell.execute_reply":"2025-08-22T00:54:29.386215Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"{'lgbm': {'Tg': {'learning_rate': 0.05611470679280668,\n   'num_leaves': 73,\n   'max_depth': 11,\n   'min_child_samples': 16,\n   'min_split_gain': 0.15921789188602148,\n   'subsample': 0.9015453129290009,\n   'colsample_bytree': 0.6615653477931904,\n   'reg_alpha': 1.140684983191731e-05,\n   'reg_lambda': 0.08447780130854951},\n  'FFV': {'learning_rate': 0.01898306195710255,\n   'num_leaves': 170,\n   'max_depth': 12,\n   'min_child_samples': 5,\n   'min_split_gain': 0.8888739546164248,\n   'subsample': 0.6892435602087457,\n   'colsample_bytree': 0.9057782406983074,\n   'reg_alpha': 0.004344326489034722,\n   'reg_lambda': 6.877938125293696e-08},\n  'Tc': {'learning_rate': 0.03796903960618406,\n   'num_leaves': 228,\n   'max_depth': 8,\n   'min_child_samples': 22,\n   'min_split_gain': 0.1123723180899095,\n   'subsample': 0.969148098700171,\n   'colsample_bytree': 0.6364161792648012,\n   'reg_alpha': 8.082249173206633e-08,\n   'reg_lambda': 2.255199784694696e-06},\n  'Density': {'learning_rate': 0.02891083925259428,\n   'num_leaves': 187,\n   'max_depth': 12,\n   'min_child_samples': 5,\n   'min_split_gain': 0.9900183624452835,\n   'subsample': 0.8535564389126332,\n   'colsample_bytree': 0.7754569830778826,\n   'reg_alpha': 1.4813490370925297e-07,\n   'reg_lambda': 1.0258050415453473e-05},\n  'Rg': {'learning_rate': 0.03738162545296616,\n   'num_leaves': 216,\n   'max_depth': 11,\n   'min_child_samples': 8,\n   'min_split_gain': 0.8147215695384844,\n   'subsample': 0.7735138847060828,\n   'colsample_bytree': 0.8593175474066362,\n   'reg_alpha': 1.744274309405346e-05,\n   'reg_lambda': 2.4967893671984407e-07}},\n 'xgb': {'Tg': {'learning_rate': 0.025527306748737176,\n   'max_depth': 7,\n   'min_child_weight': 8.510297305880394,\n   'subsample': 0.6473299526895826,\n   'colsample_bytree': 0.6008985383682325,\n   'reg_alpha': 2.7449849523768417e-08,\n   'reg_lambda': 1.1311283685433348e-08,\n   'gamma': 0.584072683313222},\n  'FFV': {'learning_rate': 0.013557386146531718,\n   'max_depth': 11,\n   'min_child_weight': 2.9542338664953958,\n   'subsample': 0.602523712943433,\n   'colsample_bytree': 0.6901643427294882,\n   'reg_alpha': 0.00019673548054664097,\n   'reg_lambda': 4.94492720748499e-08,\n   'gamma': 3.383232555690977},\n  'Tc': {'learning_rate': 0.03974103934950649,\n   'max_depth': 7,\n   'min_child_weight': 7.610451098609262,\n   'subsample': 0.6465889334009212,\n   'colsample_bytree': 0.7096546573105793,\n   'reg_alpha': 4.691481691688205e-06,\n   'reg_lambda': 4.1315537236281076e-05,\n   'gamma': 4.459576578665406},\n  'Density': {'learning_rate': 0.039892649650135545,\n   'max_depth': 8,\n   'min_child_weight': 6.801571489577744,\n   'subsample': 0.6142597771272138,\n   'colsample_bytree': 0.6149994473652245,\n   'reg_alpha': 7.92751855162223e-07,\n   'reg_lambda': 0.0034233469233912236,\n   'gamma': 0.3476226651017338},\n  'Rg': {'learning_rate': 0.025227831021352582,\n   'max_depth': 9,\n   'min_child_weight': 1.8390245939546621,\n   'subsample': 0.6063850548716503,\n   'colsample_bytree': 0.6106626112020099,\n   'reg_alpha': 0.00011082121892472499,\n   'reg_lambda': 0.6824164370936894,\n   'gamma': 2.9332014894461285}}}"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"TUNED_XGB = {\n    \"Tg\": {\n        \"learning_rate\": 0.021580480664655753,\n        \"max_depth\": 8,\n        \"min_child_weight\": 11.346169572675375,\n        \"subsample\": 0.6116819871205426,\n        \"colsample_bytree\": 0.6475902353329832,\n        \"reg_alpha\": 7.428239390441951e-06,\n        \"reg_lambda\": 3.141625772153358e-06,\n        \"gamma\": 0.6636414864751927\n    },\n    \"FFV\": {\n        \"learning_rate\": 0.012935406926018163,\n        \"max_depth\": 11,\n        \"min_child_weight\": 2.278647463013622,\n        \"subsample\": 0.8805202839997005,\n        \"colsample_bytree\": 0.650116091874385,\n        \"reg_alpha\": 0.006982110217525605,\n        \"reg_lambda\": 0.00018406518134030399,\n        \"gamma\": 3.8113043043997967\n    },\n    \"Tc\": {\n        \"learning_rate\": 0.0490105313775974,\n        \"max_depth\": 7,\n        \"min_child_weight\": 4.170430602696392,\n        \"subsample\": 0.6692908272392672,\n        \"colsample_bytree\": 0.9615013142213737,\n        \"reg_alpha\": 1.414392585811839e-06,\n        \"reg_lambda\": 0.007550004326498994,\n        \"gamma\": 3.6562064805011496\n    },\n    \"Density\": {\n        \"learning_rate\": 0.012888984376732325,\n        \"max_depth\": 10,\n        \"min_child_weight\": 0.027591226938430358,\n        \"subsample\": 0.7148878861868269,\n        \"colsample_bytree\": 0.8288347354806631,\n        \"reg_alpha\": 0.0004288706115037236,\n        \"reg_lambda\": 2.8675880739005804e-06,\n        \"gamma\": 4.323367527240539\n    },\n    \"Rg\": {\n        \"learning_rate\": 0.031071123371104462,\n        \"max_depth\": 12,\n        \"min_child_weight\": 5.955560190206464,\n        \"subsample\": 0.7201867256296993,\n        \"colsample_bytree\": 0.9591347498660378,\n        \"reg_alpha\": 3.169282915255169e-06,\n        \"reg_lambda\": 1.8274495934165643e-05,\n        \"gamma\": 3.8904624738155626\n    },\n}\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:20.243860Z","iopub.execute_input":"2025-08-26T14:01:20.244252Z","iopub.status.idle":"2025-08-26T14:01:20.253041Z","shell.execute_reply.started":"2025-08-26T14:01:20.244220Z","shell.execute_reply":"2025-08-26T14:01:20.251555Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"# Training ensemble models","metadata":{}},{"cell_type":"code","source":"# use_models = ['lgbm', 'xgb']     \n# ensemble_models = ['lgbm', 'xgb']   \n\n\n\n# def kfold_train_ensemble(\n#     Xsel_train: Dict[str, np.ndarray],\n#     y_imputed: np.ndarray,\n#     target_names: List[str],\n#     n_splits: int = 5,\n#     random_state: int = 42,\n#     use_models: List[str] = None,                 # e.g. ['lgbm','xgb','rf','et','enet']\n#     use_mae_objective_for: Tuple[str, ...] = (\"Tg\",\"Rg\")\n# ):\n#     \"\"\"\n#     K-fold OOF training per target for multiple models.\n#     NO submission logic here.\n\n#     Returns:\n#       results:     {model_name: {'per_target': {t: mae}, 'mean_mae': float},\n#                     'ensemble': {...}}   # simple unweighted avg over model OOFs\n#       oof_preds:   {model_name: (n_train, K) array}\n#       fold_models: {model_name: {tname: [fold_model, ...]}}\n#                    For 'enet', each fold_model is ('scaler', scaler, model)\n#     \"\"\"\n#     n, K = y_imputed.shape\n#     assert K == len(target_names)\n\n#     # Folds\n#     kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n#     folds = list(kf.split(np.arange(n)))\n\n#     # Specs\n#     specs = _make_model_specs(random_state)\n#     if use_models is not None:\n#         specs = [(n, b) for (n, b) in specs if n in use_models]\n#     model_names = [n for (n, _) in specs]\n#     print(\"Models:\", model_names)\n\n#     # Storage\n#     oof_preds = {m: np.full((n, K), np.nan) for m in model_names}\n#     fold_models = {m: {t: [] for t in target_names} for m in model_names}\n\n#     # Train\n#     for model_name, builder in specs:\n#         print(f\"\\n==== Training: {model_name} ====\")\n#         for j, tname in enumerate(target_names):\n#             X = Xsel_train[tname]\n#             y = y_imputed[:, j]\n\n#             for fold_id, (tr_idx, va_idx) in enumerate(folds):\n#                 X_tr, X_va = X[tr_idx], X[va_idx]\n#                 y_tr, y_va = y[tr_idx], y[va_idx]\n\n#                 try:\n#                     model = builder()\n#                     # LightGBM/XGBoost: early stopping + MAE objective for Tg/Rg\n#                     if model_name in (\"lgbm\",\"xgb\"):\n#                         if (model_name == \"lgbm\") and (tname in use_mae_objective_for):\n#                             model.set_params(objective=\"mae\")\n#                             eval_metric = \"l1\"     # LightGBM name for MAE\n#                         elif (model_name == \"xgb\") and (tname in use_mae_objective_for):\n#                             model.set_params(objective=\"reg:absoluteerror\")\n#                             eval_metric = \"mae\"\n#                         else:\n#                             eval_metric = \"l1\" if model_name == \"lgbm\" else \"mae\"\n                        \n#                         if model_name == \"lgbm\":\n#                             import lightgbm as lgb\n#                             # silence logs; some versions only respect 'verbosity'\n#                             model.set_params(verbosity=-1)\n#                             try:\n#                                 # Newer API with callbacks\n#                                 model.fit(\n#                                     X_tr, y_tr,\n#                                     eval_set=[(X_va, y_va)],\n#                                     eval_metric=eval_metric,\n#                                     callbacks=[\n#                                         lgb.early_stopping(stopping_rounds=200, verbose=False),\n#                                         lgb.log_evaluation(0)\n#                                     ],\n#                                 )\n#                             except TypeError:\n#                                 # Older API fallback (no callbacks kw)\n#                                 model.fit(\n#                                     X_tr, y_tr,\n#                                     eval_set=[(X_va, y_va)],\n#                                     eval_metric=eval_metric,\n#                                     early_stopping_rounds=200,\n#                                     verbose=False,\n#                                 )\n#                             # Brief, useful fold log\n#                             best_it = getattr(model, \"best_iteration_\", None)\n#                             best_val = None\n#                             try:\n#                                 bs = getattr(model, \"best_score_\", None)\n#                                 if isinstance(bs, dict):\n#                                     vkey = \"valid_0\" if \"valid_0\" in bs else next(iter(bs))\n#                                     mkey = next(iter(bs[vkey]))\n#                                     best_val = bs[vkey][mkey]\n#                             except Exception:\n#                                 pass\n#                             print(f\"[lgbm | {tname} | fold {fold_id}] best_it={best_it} \"\n#                                   f\"best_{eval_metric}={best_val:.4f}\" if best_val is not None else\n#                                   f\"[lgbm | {tname} | fold {fold_id}] best_it={best_it}\")\n#                             y_hat = model.predict(X_va)\n#                             fold_models[model_name][tname].append(model)\n                        \n#                         else:   # XGBoost\n#                             try:\n#                                 from xgboost.callback import EarlyStopping\n#                                 model.fit(\n#                                     X_tr, y_tr,\n#                                     eval_set=[(X_va, y_va)],\n#                                     eval_metric=eval_metric,\n#                                     callbacks=[EarlyStopping(rounds=200, save_best=True, maximize=False)],\n#                                     verbose=False,\n#                                 )\n#                             except Exception:\n#                                 model.fit(\n#                                     X_tr, y_tr,\n#                                     eval_set=[(X_va, y_va)],\n#                                     eval_metric=eval_metric,\n#                                     early_stopping_rounds=200,\n#                                     verbose=False,\n#                                 )\n#                             best_it = getattr(model, \"best_iteration\", None)\n#                             print(f\"[xgb  | {tname} | fold {fold_id}] best_it={best_it}\")\n#                             y_hat = model.predict(X_va)\n#                             fold_models[model_name][tname].append(model)\n\n#                     elif model_name == \"cat\":\n#                         model.fit(\n#                             X_tr, y_tr,\n#                             eval_set=(X_va, y_va),\n#                             early_stopping_rounds=200,\n#                             use_best_model=True,\n#                             verbose=False\n#                         )\n#                         best_it = model.get_best_iteration()\n#                         best_score = model.get_best_score()\n#                         mae_score = best_score.get(\"validation\", {}).get(\"MAE\", None)\n#                         print(f\"[cat  | {tname} | fold {fold_id}] best_it={best_it} \"\n#                               f\"best_mae={mae_score:.4f}\" if mae_score is not None else\n#                               f\"[cat  | {tname} | fold {fold_id}] best_it={best_it}\")\n#                         y_hat = model.predict(X_va)\n#                         fold_models[model_name][tname].append(model)\n\n\n#                     oof_preds[model_name][va_idx, j] = y_hat\n\n#                 except Exception as e:\n#                     print(f\"[{model_name} | {tname} | fold {fold_id}] failed: {e}\")\n\n#     # OOF MAEs per model\n#     results = {}\n#     for m in model_names:\n#         per_t = {}\n#         for j, tname in enumerate(target_names):\n#             y_true = y_imputed[:, j]\n#             y_hat = oof_preds[m][:, j]\n#             mask = np.isfinite(y_hat)\n#             mae = mean_absolute_error(y_true[mask], y_hat[mask]) if mask.sum() > 0 else np.nan\n#             per_t[tname] = float(mae)\n#         mean_mae = float(np.nanmean(list(per_t.values())))\n#         results[m] = {\"per_target\": per_t, \"mean_mae\": mean_mae}\n#         line = \" | \".join([f\"{t}:{per_t[t]:.4f}\" for t in target_names])\n#         print(f\"{m} OOF → {line} | mean={mean_mae:.4f}\")\n\n#     # Simple ensemble of OOF (avg across available models)\n#     oof_ens = np.zeros((n, K), dtype=float)\n#     cnt = 0\n#     for m in model_names:\n#         if np.isfinite(oof_preds[m]).any():\n#             oof_ens += np.nan_to_num(oof_preds[m], nan=0.0)\n#             cnt += 1\n#     if cnt > 0:\n#         oof_ens /= cnt\n\n#     per_t = {}\n#     for j, tname in enumerate(target_names):\n#         y_true = y_imputed[:, j]\n#         y_hat = oof_ens[:, j]\n#         mask = np.isfinite(y_hat)\n#         mae = mean_absolute_error(y_true[mask], y_hat[mask]) if mask.sum() > 0 else np.nan\n#         per_t[tname] = float(mae)\n#     mean_mae = float(np.nanmean(list(per_t.values())))\n#     results[\"ensemble\"] = {\"per_target\": per_t, \"mean_mae\": mean_mae}\n#     line = \" | \".join([f\"{t}:{per_t[t]:.4f}\" for t in target_names])\n#     print(f\"\\nEnsemble OOF → {line} | mean={mean_mae:.4f}\")\n\n#     return results, oof_preds, fold_models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-14T22:59:04.204522Z","iopub.execute_input":"2025-08-14T22:59:04.204792Z","iopub.status.idle":"2025-08-14T22:59:04.231568Z","shell.execute_reply.started":"2025-08-14T22:59:04.204771Z","shell.execute_reply":"2025-08-14T22:59:04.230588Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"# results, oof_preds, fold_models = kfold_train_ensemble(\n#     Xsel_train=Xsel_train,\n#     y_imputed=y_imputed,\n#     target_names=TARGETS,\n#     n_splits=5,\n#     random_state=42,\n#     use_models=use_models,\n#     use_mae_objective_for=(\"Tg\",\"Rg\")\n# )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-14T22:59:04.232575Z","iopub.execute_input":"2025-08-14T22:59:04.233244Z","iopub.status.idle":"2025-08-14T23:03:58.981220Z","shell.execute_reply.started":"2025-08-14T22:59:04.233219Z","shell.execute_reply":"2025-08-14T23:03:58.980336Z"}},"outputs":[{"name":"stdout","text":"Models: ['lgbm', 'xgb', 'cat']\n\n==== Training: lgbm ====\n[lgbm | Tg | fold 0] best_it=1200 best_l1=8.5512\n[lgbm | Tg | fold 1] best_it=1199 best_l1=8.6997\n[lgbm | Tg | fold 2] best_it=1200 best_l1=8.4438\n[lgbm | Tg | fold 3] best_it=1200 best_l1=9.5595\n[lgbm | Tg | fold 4] best_it=1200 best_l1=8.4759\n[lgbm | FFV | fold 0] best_it=797 best_l1=0.0090\n[lgbm | FFV | fold 1] best_it=860 best_l1=0.0089\n[lgbm | FFV | fold 2] best_it=970 best_l1=0.0088\n[lgbm | FFV | fold 3] best_it=173 best_l1=0.0090\n[lgbm | FFV | fold 4] best_it=1168 best_l1=0.0083\n[lgbm | Tc | fold 0] best_it=366 best_l1=0.0081\n[lgbm | Tc | fold 1] best_it=254 best_l1=0.0076\n[lgbm | Tc | fold 2] best_it=228 best_l1=0.0081\n[lgbm | Tc | fold 3] best_it=191 best_l1=0.0082\n[lgbm | Tc | fold 4] best_it=236 best_l1=0.0090\n[lgbm | Density | fold 0] best_it=478 best_l1=0.0226\n[lgbm | Density | fold 1] best_it=1200 best_l1=0.0199\n[lgbm | Density | fold 2] best_it=1200 best_l1=0.0212\n[lgbm | Density | fold 3] best_it=1200 best_l1=0.0202\n[lgbm | Density | fold 4] best_it=886 best_l1=0.0210\n[lgbm | Rg | fold 0] best_it=1200 best_l1=0.5246\n[lgbm | Rg | fold 1] best_it=1200 best_l1=0.4839\n[lgbm | Rg | fold 2] best_it=1200 best_l1=0.4997\n[lgbm | Rg | fold 3] best_it=1200 best_l1=0.5194\n[lgbm | Rg | fold 4] best_it=1200 best_l1=0.5392\n\n==== Training: xgb ====\n[xgb  | Tg | fold 0] best_it=1197\n[xgb  | Tg | fold 1] best_it=1199\n[xgb  | Tg | fold 2] best_it=1199\n[xgb  | Tg | fold 3] best_it=1198\n[xgb  | Tg | fold 4] best_it=1196\n[xgb  | FFV | fold 0] best_it=1199\n[xgb  | FFV | fold 1] best_it=1189\n[xgb  | FFV | fold 2] best_it=1191\n[xgb  | FFV | fold 3] best_it=1124\n[xgb  | FFV | fold 4] best_it=1179\n[xgb  | Tc | fold 0] best_it=1199\n[xgb  | Tc | fold 1] best_it=1199\n[xgb  | Tc | fold 2] best_it=1185\n[xgb  | Tc | fold 3] best_it=1155\n[xgb  | Tc | fold 4] best_it=1198\n[xgb  | Density | fold 0] best_it=1198\n[xgb  | Density | fold 1] best_it=1198\n[xgb  | Density | fold 2] best_it=1199\n[xgb  | Density | fold 3] best_it=1199\n[xgb  | Density | fold 4] best_it=1199\n[xgb  | Rg | fold 0] best_it=1199\n[xgb  | Rg | fold 1] best_it=1199\n[xgb  | Rg | fold 2] best_it=1199\n[xgb  | Rg | fold 3] best_it=1198\n[xgb  | Rg | fold 4] best_it=1199\n\n==== Training: cat ====\n[cat  | Tg | fold 0] best_it=1199 best_mae=9.3596\n[cat  | Tg | fold 1] best_it=1198 best_mae=9.5884\n[cat  | Tg | fold 2] best_it=1199 best_mae=9.2668\n[cat  | Tg | fold 3] best_it=1199 best_mae=10.3971\n[cat  | Tg | fold 4] best_it=1199 best_mae=9.4586\n[cat  | FFV | fold 0] best_it=1190 best_mae=0.0092\n[cat  | FFV | fold 1] best_it=1199 best_mae=0.0095\n[cat  | FFV | fold 2] best_it=1199 best_mae=0.0088\n[cat  | FFV | fold 3] best_it=1199 best_mae=0.0088\n[cat  | FFV | fold 4] best_it=1197 best_mae=0.0084\n[cat  | Tc | fold 0] best_it=1199 best_mae=0.0070\n[cat  | Tc | fold 1] best_it=1199 best_mae=0.0064\n[cat  | Tc | fold 2] best_it=1199 best_mae=0.0071\n[cat  | Tc | fold 3] best_it=1199 best_mae=0.0071\n[cat  | Tc | fold 4] best_it=1199 best_mae=0.0080\n[cat  | Density | fold 0] best_it=1199 best_mae=0.0248\n[cat  | Density | fold 1] best_it=1199 best_mae=0.0225\n[cat  | Density | fold 2] best_it=1199 best_mae=0.0238\n[cat  | Density | fold 3] best_it=1199 best_mae=0.0228\n[cat  | Density | fold 4] best_it=1199 best_mae=0.0237\n[cat  | Rg | fold 0] best_it=1199 best_mae=0.6138\n[cat  | Rg | fold 1] best_it=1199 best_mae=0.5741\n[cat  | Rg | fold 2] best_it=1199 best_mae=0.5699\n[cat  | Rg | fold 3] best_it=1199 best_mae=0.6238\n[cat  | Rg | fold 4] best_it=1199 best_mae=0.6208\nlgbm OOF → Tg:8.7460 | FFV:0.0088 | Tc:0.0082 | Density:0.0210 | Rg:0.5134 | mean=1.8595\nxgb OOF → Tg:9.2046 | FFV:0.0080 | Tc:0.0077 | Density:0.0204 | Rg:0.5493 | mean=1.9580\ncat OOF → Tg:9.6141 | FFV:0.0089 | Tc:0.0071 | Density:0.0235 | Rg:0.6005 | mean=2.0508\n\nEnsemble OOF → Tg:8.6056 | FFV:0.0082 | Tc:0.0072 | Density:0.0203 | Rg:0.5269 | mean=1.8337\n","output_type":"stream"}],"execution_count":43},{"cell_type":"markdown","source":"# Training XGB Model","metadata":{}},{"cell_type":"code","source":"def make_xgb_model(target_name: str, random_state: int = 42) -> XGBRegressor:\n    p = TUNED_XGB[target_name].copy()\n    p[\"max_depth\"] = int(p[\"max_depth\"])           # only this must be int\n    # keep min_child_weight as float\n    return XGBRegressor(\n        n_estimators=4000,\n        objective=\"reg:absoluteerror\",             # MAE objective\n        tree_method=\"hist\",\n        random_state=random_state,\n        n_jobs=-1,\n        verbosity=0,\n        **p\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:20.254095Z","iopub.execute_input":"2025-08-26T14:01:20.254954Z","iopub.status.idle":"2025-08-26T14:01:20.282389Z","shell.execute_reply.started":"2025-08-26T14:01:20.254915Z","shell.execute_reply":"2025-08-26T14:01:20.281265Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"def kfold_train_xgb(\n    Xsel_train: dict, y_imputed: np.ndarray, target_names, n_splits=5, random_state=42\n):\n    n, K = y_imputed.shape\n    assert K == len(target_names)\n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n    folds = list(kf.split(np.arange(n)))\n\n    oof_preds = np.full((n, K), np.nan)\n    fold_models = {t: [] for t in target_names}\n\n    for j, tname in enumerate(target_names):\n        print(f\"\\n==== Training XGB for {tname} ====\")\n        X = Xsel_train[tname]\n        y = y_imputed[:, j]\n\n        for fold_id, (tr_idx, va_idx) in enumerate(folds):\n            X_tr, X_va = X[tr_idx], X[va_idx]\n            y_tr, y_va = y[tr_idx], y[va_idx]\n\n            model = make_xgb_model(tname, random_state)\n            try:\n                from xgboost.callback import EarlyStopping\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)],\n                    eval_metric=\"mae\",\n                    callbacks=[EarlyStopping(rounds=200, save_best=True, maximize=False)],\n                    verbose=False,\n                )\n            except Exception:\n                model.fit(\n                    X_tr, y_tr,\n                    eval_set=[(X_va, y_va)],\n                    eval_metric=\"mae\",\n                    early_stopping_rounds=200,\n                    verbose=False,\n                )\n            best_it = getattr(model, \"best_iteration\", None)\n            print(f\"[XGB | {tname} | fold {fold_id}] best_it={best_it}\")\n\n            y_hat = model.predict(X_va)\n            oof_preds[va_idx, j] = y_hat\n            fold_models[tname].append(model)\n\n    # OOF MAE\n    per_t = {}\n    for j, tname in enumerate(target_names):\n        m = np.isfinite(oof_preds[:, j])\n        per_t[tname] = mean_absolute_error(y_imputed[m, j], oof_preds[m, j])\n        print(f\"{tname} OOF MAE = {per_t[tname]:.4f}\")\n    print(f\"Mean OOF MAE = {np.mean(list(per_t.values())):.4f}\")\n\n    return per_t, oof_preds, fold_models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:20.284326Z","iopub.execute_input":"2025-08-26T14:01:20.284703Z","iopub.status.idle":"2025-08-26T14:01:20.315073Z","shell.execute_reply.started":"2025-08-26T14:01:20.284679Z","shell.execute_reply":"2025-08-26T14:01:20.313888Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"results, oof_preds, fold_models = kfold_train_xgb(\n    Xsel_train=Xsel_train,\n    y_imputed=y_imputed,\n    target_names=TARGETS,\n    n_splits=5,\n    random_state=42\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-26T14:01:20.316644Z","iopub.execute_input":"2025-08-26T14:01:20.317073Z","iopub.status.idle":"2025-08-26T14:23:38.815645Z","shell.execute_reply.started":"2025-08-26T14:01:20.317027Z","shell.execute_reply":"2025-08-26T14:23:38.814913Z"}},"outputs":[{"name":"stdout","text":"\n==== Training XGB for Tg ====\n[XGB | Tg | fold 0] best_it=3996\n[XGB | Tg | fold 1] best_it=3998\n[XGB | Tg | fold 2] best_it=3999\n[XGB | Tg | fold 3] best_it=3999\n[XGB | Tg | fold 4] best_it=3999\n\n==== Training XGB for FFV ====\n[XGB | FFV | fold 0] best_it=3995\n[XGB | FFV | fold 1] best_it=3998\n[XGB | FFV | fold 2] best_it=3996\n[XGB | FFV | fold 3] best_it=3999\n[XGB | FFV | fold 4] best_it=3973\n\n==== Training XGB for Tc ====\n[XGB | Tc | fold 0] best_it=3964\n[XGB | Tc | fold 1] best_it=3997\n[XGB | Tc | fold 2] best_it=3903\n[XGB | Tc | fold 3] best_it=3029\n[XGB | Tc | fold 4] best_it=3929\n\n==== Training XGB for Density ====\n[XGB | Density | fold 0] best_it=3997\n[XGB | Density | fold 1] best_it=3999\n[XGB | Density | fold 2] best_it=3999\n[XGB | Density | fold 3] best_it=3999\n[XGB | Density | fold 4] best_it=3999\n\n==== Training XGB for Rg ====\n[XGB | Rg | fold 0] best_it=3999\n[XGB | Rg | fold 1] best_it=3999\n[XGB | Rg | fold 2] best_it=3998\n[XGB | Rg | fold 3] best_it=3999\n[XGB | Rg | fold 4] best_it=3999\nTg OOF MAE = 11.1329\nFFV OOF MAE = 0.0071\nTc OOF MAE = 0.0113\nDensity OOF MAE = 0.0378\nRg OOF MAE = 0.6478\nMean OOF MAE = 2.3674\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"# Making submission","metadata":{}},{"cell_type":"code","source":"# def predict_and_make_submission(\n#     fold_models: Dict[str, Dict[str, List[object]]],\n#     Xsel_test: Dict[str, np.ndarray],\n#     target_names: List[str],\n#     test_df: pd.DataFrame,\n#     models_to_use: List[str] = (\"lgbm\",\"xgb\"),   # pick your two-model average here\n#     weights: Dict[str, float] = None,            # optional model weights, e.g. {'lgbm':0.6,'xgb':0.4}\n#     path: str = \"submission.csv\"\n# ):\n#     \"\"\"\n#     Use trained fold models to predict test set and write submission.csv.\n#     Averages over folds per model, then over models.\n\n#     fold_models: {model_name: {tname: [fold_model, ...]}}\n#                  For 'enet', each item is ('scaler', scaler, model)\n#     \"\"\"\n#     n_test = next(iter(Xsel_test.values())).shape[0]\n#     K = len(target_names)\n\n#     # per-model predictions\n#     test_preds_per_model = {m: np.zeros((n_test, K), dtype=float) for m in models_to_use}\n#     used_models = []\n\n#     for m in models_to_use:\n#         if m not in fold_models:\n#             print(f\"[WARN] Model {m} not in fold_models, skipping.\")\n#             continue\n#         used_models.append(m)\n\n#         for j, tname in enumerate(target_names):\n#             X_te = Xsel_test[tname]\n#             folds = fold_models[m][tname]\n#             if len(folds) == 0:\n#                 print(f\"[WARN] No fold models for ({m}, {tname}), skipping.\")\n#                 continue\n\n#             # average across folds\n#             fold_sum = np.zeros(n_test, dtype=float)\n#             for fobj in folds:\n#                 if m == \"enet\":\n#                     _, scaler, mdl = fobj\n#                     y_te = mdl.predict(scaler.transform(X_te))\n#                 else:\n#                     mdl = fobj\n#                     y_te = mdl.predict(X_te)\n#                 fold_sum += y_te\n#             test_preds_per_model[m][:, j] = fold_sum / len(folds)\n\n#     # combine across models\n#     if weights is None:\n#         # simple mean across used models\n#         denom = max(1, len(used_models))\n#         final_test = sum(test_preds_per_model[m] for m in used_models) / denom\n#     else:\n#         # weighted average\n#         sw = sum(weights.get(m, 0.0) for m in used_models)\n#         assert sw > 0, \"Sum of weights must be > 0\"\n#         final_test = sum(weights.get(m, 0.0) * test_preds_per_model[m]\n#                          for m in used_models) / sw\n\n#     # write submission\n#     sub = pd.DataFrame(final_test, columns=target_names)\n#     sub.insert(0, \"id\", test_df[\"id\"].values)\n#     sub.to_csv(path, index=False)\n#     print(f\"Saved submission to {path}\")\n\n#     return sub, test_preds_per_model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:46:39.959226Z","iopub.execute_input":"2025-08-22T05:46:39.959656Z","iopub.status.idle":"2025-08-22T05:46:39.980279Z","shell.execute_reply.started":"2025-08-22T05:46:39.959623Z","shell.execute_reply":"2025-08-22T05:46:39.979320Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"# sub, test_preds_per_model = predict_and_make_submission(\n#     fold_models=fold_models,\n#     Xsel_test=Xsel_test,\n#     target_names=TARGETS,\n#     test_df=test,\n#     models_to_use=[\"xgb\"],  # your chosen pair\n#     # weights={\"lgbm\":0.5, \"xgb\":0.5},  # optional\n#     path=\"submission.csv\"\n# )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:46:43.539397Z","iopub.execute_input":"2025-08-22T05:46:43.539691Z","iopub.status.idle":"2025-08-22T05:46:43.584335Z","shell.execute_reply.started":"2025-08-22T05:46:43.539670Z","shell.execute_reply":"2025-08-22T05:46:43.583136Z"}},"outputs":[{"name":"stdout","text":"[WARN] Model xgb not in fold_models, skipping.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/2833310756.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m sub, test_preds_per_model = predict_and_make_submission(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mfold_models\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfold_models\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mXsel_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mXsel_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mtarget_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTARGETS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mtest_df\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_36/1780609412.py\u001b[0m in \u001b[0;36mpredict_and_make_submission\u001b[0;34m(fold_models, Xsel_test, target_names, test_df, models_to_use, weights, path)\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# write submission\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m     \u001b[0msub\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfinal_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m     \u001b[0msub\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"id\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0msub\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    884\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 886\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"DataFrame constructor not properly called!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: DataFrame constructor not properly called!"],"ename":"ValueError","evalue":"DataFrame constructor not properly called!","output_type":"error"}],"execution_count":37},{"cell_type":"markdown","source":"# Submission using XGB","metadata":{}},{"cell_type":"code","source":"def predict_and_make_submission_xgb(fold_models, Xsel_test, target_names, test_df, path=\"submission.csv\"):\n    n_test = next(iter(Xsel_test.values())).shape[0]\n    K = len(target_names)\n    preds = np.zeros((n_test, K), dtype=float)\n\n    for j, tname in enumerate(target_names):\n        X_te = Xsel_test[tname]\n        models = fold_models[tname]\n        if not models:\n            print(f\"[WARN] no models for {tname}\")\n            continue\n        fold_sum = np.zeros(n_test, dtype=float)\n        for mdl in models:\n            fold_sum += mdl.predict(X_te)\n        preds[:, j] = fold_sum / len(models)\n\n    sub = pd.DataFrame(preds, columns=target_names)\n    sub.insert(0, \"id\", test_df[\"id\"].values)\n    sub.to_csv(path, index=False)\n    print(f\"Saved submission to {path}\")\n    return sub, preds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T02:23:07.698590Z","iopub.execute_input":"2025-08-25T02:23:07.698942Z","iopub.status.idle":"2025-08-25T02:23:07.707329Z","shell.execute_reply.started":"2025-08-25T02:23:07.698916Z","shell.execute_reply":"2025-08-25T02:23:07.706046Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"predict_and_make_submission_xgb(fold_models, Xsel_test, TARGETS, test, path=\"submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T02:24:01.877419Z","iopub.execute_input":"2025-08-25T02:24:01.877790Z","iopub.status.idle":"2025-08-25T02:24:02.044460Z","shell.execute_reply.started":"2025-08-25T02:24:01.877754Z","shell.execute_reply":"2025-08-25T02:24:02.043722Z"}},"outputs":[{"name":"stdout","text":"Saved submission to submission.csv\n","output_type":"stream"},{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"(           id          Tg       FFV        Tc   Density         Rg\n 0  1109053969  117.030048  0.375910  0.195079  0.981576  25.932241\n 1  1422188626  162.125467  0.377064  0.242373  0.950844  19.605132\n 2  2032016830   60.305879  0.350626  0.239079  0.882469  19.274481,\n array([[117.03004761,   0.3759101 ,   0.19507917,   0.98157595,\n          25.93224144],\n        [162.12546692,   0.37706387,   0.24237259,   0.95084417,\n          19.60513191],\n        [ 60.30587921,   0.35062582,   0.23907938,   0.88246857,\n          19.2744812 ]]))"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"submission = pd.read_csv('submission.csv')\nsubmission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-25T02:24:07.876354Z","iopub.execute_input":"2025-08-25T02:24:07.876712Z","iopub.status.idle":"2025-08-25T02:24:07.892167Z","shell.execute_reply.started":"2025-08-25T02:24:07.876678Z","shell.execute_reply":"2025-08-25T02:24:07.891134Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"           id          Tg       FFV        Tc   Density         Rg\n0  1109053969  117.030048  0.375910  0.195079  0.981576  25.932241\n1  1422188626  162.125467  0.377064  0.242373  0.950844  19.605132\n2  2032016830   60.305879  0.350626  0.239079  0.882469  19.274481","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Tg</th>\n      <th>FFV</th>\n      <th>Tc</th>\n      <th>Density</th>\n      <th>Rg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1109053969</td>\n      <td>117.030048</td>\n      <td>0.375910</td>\n      <td>0.195079</td>\n      <td>0.981576</td>\n      <td>25.932241</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1422188626</td>\n      <td>162.125467</td>\n      <td>0.377064</td>\n      <td>0.242373</td>\n      <td>0.950844</td>\n      <td>19.605132</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2032016830</td>\n      <td>60.305879</td>\n      <td>0.350626</td>\n      <td>0.239079</td>\n      <td>0.882469</td>\n      <td>19.274481</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":37}]}